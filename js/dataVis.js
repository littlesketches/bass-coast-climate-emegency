//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////                                                                                                              //////  
//////                  THE HUMAN REPRESENTATION OF MODELS |  SPIN OFF: DATA VISUALISATIONS                         //////
//////             a Little Sketches Experiment| application to Bass Coast emissions reduction                      //////
//////                                        version:  v0.01                                                       //////
//////  ----------------------------------------------------------------------------------------------------------  //////
//////   This module contains scripts to build data visualisations in the HRoM model.                               //////
//////                                                                                                              //////               
//////   Note: Future versions will endeavour to build these visualisations into modular components. In prototype   //////
//////   versions, some references and data are hard coded to match the DOM and parsed model data structure         //////
//////                                                                                                              //////  
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
/////////  GLOBAL VISUALISATIONS SETTINGS & STATUS OBJECT   ////////
////////////////////////////////////////////////////////////////////

    // Visualisation data and settings
    const vis = {
        focus:                          null,
        renderStatus: {
            emissionsBarCharts:         false,
            emissionsBubble:            false,
            emissionsSankey:            false,
            costCurve:                  false,
            abatementWedges:            false,
        },
        colours:{
            byEmissionSector:           {},
            palette: {
                blue:           '#00708b',
                yellow:         '#ffe36c',
                lightBlue:      '#c7dfe7',
                charcoal:       '#1e1e1e'
            }
        },
        numberFormatters: {
            formatComma:                d3.format(",.0f"),
            formatInteger:              d3.format(".0f"),   
            formatCostInteger:          d3.format("$,.0f")  
        },     
        helpers:                        {},
        commentary:                      {}              
    }

    function addColourPalettes(){
        vis.colours.byEmissionSector[model.schema.fieldOptions.baselineStocks.emissionsSector[0]] =   "#F2055C"         // Stationary energy > Red
        vis.colours.byEmissionSector[model.schema.fieldOptions.baselineStocks.emissionsSector[1]] =   "#FFB525"         // Transport  > Bright green
        vis.colours.byEmissionSector[model.schema.fieldOptions.baselineStocks.emissionsSector[2]] =   "#98D200"         // Waste > Yellow 
        vis.colours.byEmissionSector[model.schema.fieldOptions.baselineStocks.emissionsSector[3]] =   "#2FAAFF"         // Industiral processes and product use > Blue
        vis.colours.byEmissionSector[model.schema.fieldOptions.baselineStocks.emissionsSector[4]] =   "#0C8B8C"         // Agriculture > Blue green
        vis.colours.byEmissionSector[model.schema.fieldOptions.baselineStocks.emissionsSector[5]] =   "#920999"         // Land use, land use change and forestry > Purple
    }; // end addColourPalettes()


////////////////////////////////////////////////////////////////////
//////////////     BASELINE EMISSIONS BAR CHARTS      //////////////        
////////////////////////////////////////////////////////////////////

    function renderBaselineChart(){
        if(!vis.renderStatus.emissionsBarCharts){        
            // 1a. Set baseline data: demographic
            vis.baselineChart = {
                svg:    d3.select('#profileChart'),
                data: {
                    baselineYear:           2019,
                    demo: {
                        population:             36000,
                        occupiedHomes:          15657,
                        unoccupiedHomes:        13586,
                        commercialSites:        929,
                        industrialSites:        358,
                        farmSites:              989,
                    }
                },
                dims: {
                    width:                      1000,
                    height:                     600,
                    margin:                     { top: 50,  bottom: 50, left: 60,right: 50 }
                },
                scale:                          {},
                methods:                        {}
            }

            // 1b. Set baseline data: calculated from input data
            const inBoundaryBaseline = inputData.baselineStocks.filter(d => d.boundary === "Included")
            vis.baselineChart.data = {
                emissions:  {
                    byGrossVsOffsets: [
                       { "Emissions we put into the atmosphere":    d3.sum(Object.values( d3.nest().key(d => d.activity).rollup(v => v.map(d => d.emissions).reduce((a,b) => a + b, 0) ).entries(inBoundaryBaseline) ).map( obj => obj.value > 0 ? obj.value : 0)) },
                       { "Emissions we 'drawdown' from the atmosphere or prevent elsewhere":  d3.sum(Object.values(d3.nest().key(d => d.activity).rollup(v => v.map(d => d.emissions).reduce((a,b) => a + b, 0) ).entries(inBoundaryBaseline)).map( obj => obj.value < 0 ? obj.value : 0)) }
                    ],
                    byEmissionSector:               d3.nest().key(d => d.emissionsSector).rollup(v => v.map(d => d.emissions).reduce((a,b) => a + b, 0) ).entries(inBoundaryBaseline),
                    byEmissionSectorAndSubSector:   d3.nest().key(d => d.emissionsSector).key(d => d.emissionsSubSector).rollup(v => v.map(d => d.emissions).reduce((a,b) => a + b, 0) ).entries(inBoundaryBaseline),
                    byEmissionSubSector:            d3.nest().key(d => d.emissionsSubSector).rollup(v => v.map(d => d.emissions).reduce((a,b) => a + b, 0) ).entries(inBoundaryBaseline),
                    byEconomicSector:               d3.nest().key(d => d.economicSector).rollup(v => v.map(d => d.emissions).reduce((a,b) => a + b, 0) ).entries(inBoundaryBaseline),
                    byEndUser:                      d3.nest().key(d => d.endUserType).rollup(v => v.map(d => d.emissions).reduce((a,b) => a + b, 0) ).entries(inBoundaryBaseline),
                    byActivity:                     d3.nest().key(d => d.activity).rollup(v => v.map(d => d.emissions).reduce((a,b) => a + b, 0) ).entries(inBoundaryBaseline),
                    byEndUserAndActivity:           d3.nest().key(d => d.endUserType).key(d => d.activity).rollup(v => v.map(d => d.emissions).reduce((a,b) => a + b, 0) ).entries(inBoundaryBaseline),
                    byEconomicSectorAndActivity:    d3.nest().key(d => d.economicSector).key(d => d.activity).rollup(v => v.map(d => d.emissions).reduce((a,b) => a + b, 0) ).entries(inBoundaryBaseline),
                    byEndUserAndEconomicSectorAndActivity:   d3.nest().key(d => d.endUserType).key(d => d.economicSector).key(d => d.activity).rollup(v => v.map(d => d.emissions).reduce((a,b) => a + b, 0) ).entries(inBoundaryBaseline),
                    total:                          inBoundaryBaseline.map(d => d.emissions).reduce((a, b) => a + b, 0)                     
                }
            }
            vis.renderStatus.emissionsBarCharts = true   
        }


        // 2. Setup chart and rendering groups
            d3.selectAll('#profileChart > *').remove()
            vis.baselineChart.svg.attr('viewBox', '0 0 '+vis.baselineChart.dims.width+' '+vis.baselineChart.dims.height)
            const chart = vis.baselineChart.svg.append('g').attr('id', 'profileChartGroup').attr('transform', 'translate('+vis.baselineChart.dims.margin.left*0+' , '+vis.baselineChart.dims.margin.top+')')

            // Groups for rendeing  
            const axisGroup         = chart.append('g').attr('id', 'profileChart-axisGroup'), 
                xAxisGroup          = axisGroup.append('g').attr('id', 'profileChart-xAxis').attr("class", "x axis"),
                xAxisLabelGroup     = axisGroup.append('g').attr('id', 'profile-xLabel'),
                yAxisGroup          = axisGroup.append('g').attr('id', 'profileChart-yAxis').attr("class", "y axis"),
                barsGroup           = chart.append('g').attr('id', 'profileChart-barsGroup'), 
                sketchGroup          = chart.append('g').attr('id', 'profileChart-sketchGroup'), 
                annotationGroup     = chart.append('g').attr('id', 'profileChart-annotationGroup'),
                mainTitle           = annotationGroup.append('text').attr('id', 'profileChart-mainTitle'),
                volumeTitle         = annotationGroup.append('text').attr('id', 'profileChart-volumeTitle'),
                commentaryTitle     = d3.select('#profileChart-narrativeTitle'),
                commentaryText      = d3.select('#profileChart-narrative'),
                commentaryBack      = d3.select('#profileChart-back'),
                commentaryForward   = d3.select('#profileChart-forward')

            // Profile chart xAxis
            xAxisLabelGroup.append('text')
                .classed('profileChart axisLabel', true)
                .attr('dy', 0)
                .attr('dx', 0)
                .text('Annual GHG emissions')
            xAxisLabelGroup.append('text')
                .classed('profileChart axisLabelUnit', true)
                .attr('dy', 10)
                .attr('dx', 0)
                .text('tonnes CO2-e')

            // Add illustraitons
                sketchGroup.append('g').attr('id', 'sketchTown')
                    .attr('transform', 'translate(455, 255) scale(2.75)')
                    .append('path').classed('barsSketch source stationaryEnergy', true)
                    .attr('d', 'M37.327 32.983c2.128-.263-.212.331 0 0zm60.705 0c2.162-.186.126.303 0 0zM0 32.43c2.298-.627 4.928-.16 7.362-.296-.42-4.804-.562-9.633-.639-14.454-2.165.129-10.071.873-3.973-.244 5.852 1.054-.32-4.36-1.852-2.213 5.05-.54.143 1.657-.715-.023 1.18-4.656 7.119 2.17 7.004 3.058-.457 3.529 6.484-.517 7.029 3.71 2.296 2.104-.983 9.024 1.594 9.92l.108-18.86c1.61-2.74 3.625-5.312 4.647-8.34-1.855-2.862 2.422-1.98.398.429 2.956 2.526 7.858 1.993 11.519 1.106 2.03.635 1.904 6.683 3.883 8.987.681 5.569.064 11.352.956 16.825 2.455-.071.023-5.537.505-7.453-.429.485 1.977-5.627 4.512-4.724 2.585 1.016.386-3.401 2.938-1.336 1.172 3.113 6.017 5.042 3.802 8.64-.75 2.268.223 7.199 2.721 4.177-.62-5.46-.715-10.986-1.457-16.422-1.403-1.55 3.852-3.088 2.295-4.978 3.505-.638-.225 1.92 3.17 1.196 2.818-.934 7.95.922 7.868 2.982-1.41 2.476.26 8.121.15 11.844-.184 2.116.901 9.573.983 3.297.091-6.154-.195-12.322.151-18.468 2.281-.84 7.983 1.745 8.433-1.129-1.077-3.319-.088-7.855.935-9.26.916 1.571-.861 3.798 2.951 2.936 2.156.275 7.362-2.18 6.565 1.629-.417 3.306.106 6.54 4.195 5.387 1.636.079.363 3.046.75 4.365-.042 5.808-.1 11.628.454 17.416 2.29.723 1.619-1.487 1.651-3 .05-3.988-.24-8.055.017-11.995 1.745-1.708 1.576-8.475 4.008-5.344 1.541 2.714 4.711-.352 5.547-2.413 1.643-.967 5.397.798 4.625-2.299 2.285-1.25 1.54 3.147 4.484 2.14 3.303 5.212 2.314 11.535 2.923 17.384.312 2.464-.777 6.743 2.974 5.458 2.407-1.252-.189-7.258.595-10.041.537-3.327-.846-1.183-2.29-1.08-.765-2.654 3.788-3.667 3.424-6.386-.382-1.68-1.722-3.712 1.838-2.822 1.664 1.024-1.825 3.81 1.423 1.999 2.739-1.165 8.96-4.014 10.14-.725-1.079.073-4.056 2.012-1.666 2.717 4.83.024 1 7.669 1.927 11.04.569 1.435-1.278 5.206.616 5.367 1.22.845-5.42.349-7.223.522-40.72.064-81.441.183-122.16-.069-.693-.075-1.415.04-2.095-.157zm8.411-3.068c-.859-2.78.668-3.41 3.373-2.756 3.865-1.429 1.637 9.535 2.508 2.847-.008-2.028-.045-4.056-.068-6.083-3.27.415-8.627-2.033-6.742 3.398-.368 2.373 1.183 8.338.93 2.594zm.175-3.831c-.334-3.518 2.756.925 0 0zm.906-.624c-.832-1.276-.636 1.164 0 0zm1.97.482c-.072-4.114 2.918 1.506 0 0zm.828-.482c-.569-1.008-.55 1.002 0 0zm-3.135 4.9c.752-5.237-.832 3.558 1.936 2.327 1.89.306 3.14.002 2.427-2.18.884-4.57-5.228-2.93-2.954.976-1.194 1.897.904-5.106-1.897-3.746.01 1.859.421 7.548.488 2.623zm1.841 1.618c-.487-2.239.359-5.56.315-1.347.021-.057.36 2.591-.315 1.347zm.83-.034c-.502-2.104.302-5.77.281-1.485.065-.086.199 2.853-.282 1.485zm.83-1.732c-.143-4.585 1.117 1.389.153 2.004-.281-.626-.041-1.358-.153-2.004zm4.395-.842c-1.206-3.975 3.251-9.524 5.604-3.652.699 1.407.849 9.307 2.154 5.896-.074-5.6.022-11.205-.264-16.797-2.115.372-7.922-2.223-8.236.646.067 5.684-.28 11.428.18 17.064.888.434.323-2.655.562-3.157zm1.26-8.287c-1.429-2.98 2.646-8.525 3.671-3.18.9 2.913-.096 4.327-3.165 3.392l-.506-.212zm1.227-.403c1.504-2.194-2.918-.065 0 0zm2.178-.518c-1.3-1.887-1.561 2.017 0 0zm-1.941-2.534c-.22-3.856-1.73 3.428-.01.791zm1.968 1.05c-.318-4.532-3.056-.886-.683.347l.543-.073.14-.273zm-1.606 12.177c-.31-2.13.006-10.201-2.299-5.194.08 1.935-1.245 5.884.057 7.026 1.72.001 2.947.467 2.242-1.832zm-1.02-1.02c-.498-2.792 1.68 1.102 0 0zm3.923 2.01c.281-2.187-.91-8.745-2.79-7.253-.622 3.2 1.051 4.112.851 5.68-2.708-1.341 1.412 5.354 1.939 1.573zm13.467-1.188c-.253-5.046-.197-10.105-.56-15.145-3.613-.134-7.225-.277-10.833-.497-.022 5.891.03 11.784.26 17.672h11.247l-.114-2.03zm-2.495-3.725c-6.12 1.525-.923-10.903.378-3.422-.128.83 1.115 3.803-.378 3.422zm.165-1.302c-1.576-1.703-.694 1.96 0 0zm-1.351.437c-.407-2.632-2.306.71 0 0zm-.267-3.195c.219-4.228-2.4 3.029-.064 1.21l.05-.46zM34 23.372c-.795-7.895-2.017 3.004 0 0zm-7.058 2.87c-2.205-2.457 1.69-9.71 2.907-3.659.456 3.191.699 4.361-2.907 3.658zm.856-1.344c-1.525-1.98-.115 2.804 0 0zm1.665.206c-1.336-2.687-1.45 2.418 0 0zm-1.788-2.821c.022-3.952-1.428 3.693-.006.846zm1.788.97c-.583-3.836-1.661-1.908-1.156.564.4-.06 1.34.224 1.156-.564zm12.557 7.098c.015-4.428 3.58-.975 2.712 1.795 1.16-.454 4.053.793 3.92-.93l.072-6.706c-3.38-.22-6.778.096-10.165.143.157 2.406-.43 5.657.53 7.485 1.62-.285 3.54.749 2.93-1.787zm-2.558-1.881c-1.635-3.749 2.988-3.216 1.958.17-.072.312-1.927.343-1.958-.17zm1.668-.693c-1.303-3.192-.16 2.938 0 0zm-.989-.1c-.514-1.683-.37 1.637 0 0zm-.053-1.208c-.728-.224-.364.345 0 0zm.844.033c-.605-.886-.42.476 0 0zm5.092 2.321c-2.02-1.174.026-5.282 1.217-2.65-2.125-1.487 2.727 3.584-1.217 2.65zm.233-.799c-.322-2.558-.55 1.225 0 0zm1.003.066c-.564-2.504-1.116 1.036 0 0zm-1.186-1.897c-.506-.71-.506.71 0 0zm-1.78 5.474c1.642-2.588-3.139-4.4-1.566-1.35.056 1.099-.891 3.045 1.566 1.35zm19.376-1.069c-.255-5.573-.895-11.124-1.049-16.703-3.874.049-7.769.048-11.628.071.217 6.061.857 12.114 1.21 18.167h11.47l-.003-1.535zm-10.188-.094c-1.316-2.935 1.501-4.822 3.443-2.794 1.057 3.203-.623 3.18-3.443 2.794zm.98-.471c1.2-2.008-2.062-.245 0 0zm2.29-.623c-2.02-2.427-2.22 2.503 0 0zm-2.015-1.485c-1.033-1.514-1.428 1.572 0 0zm1.817.072c-2.426-2.437-1.46 1.89 0 0zm2.665 1.496c-1.847-3.88 4.313-3.994 3.086-.13 1.35 1.756-3.921 1.734-3.086.13zm1.29-.033c-.975-1.818-.855 1.744 0 0zm1.384.033c-.984-2.237-1.317 1.858 0 0zm-1.384-1.704c-.857-2.46-1.264 2.2 0 0zm1.186-.012c-1.138-2.265-.805 2.038 0 0zm-8.43-2.668c-1.539-4.787 4.354-5.036 3.124-.287-.706.15-2.424.717-3.123.287zm1.114-1.193c-.701-2.25-.71 2.28 0 0zm1.582-.099c-1.41-2.318-1.386 2.22 0 0zM54.3 22.676c.363-.492 2.928-.365.39-.95-1.123-.734-1.481 1.64-.39.95zm4.285 2.254c-2.191-3.267 2.5-6.528 3.245-2.157.931 3.068-1.036 2.548-3.245 2.157zm1.118-.519c.39-3.315-2.279.371 0 0zm1.872-.115c.333-4.146-3.593 1.329 0 0zm-2.003-2.375c-.449-2.114-1.28 1.803 0 0zm1.926.356c-1.189-2.953-2.701 1.228 0 0zm-8.732-3.071c-2.374-6.095 5.184-2.464 2.157.115-.647-.283-1.762.687-2.157-.115zm.822-.834c-.725-1.748-.631 1.642 0 0zm1.546.05c-1.577-2.286-.727 2.084 0 0zm-1.546-1.634c-.975-1.817-.855 1.745 0 0zm1.384 0c-1.26-1.913-1 1.764 0 0zm4.785 2.713c-3.252-.359-1.192-6.583 1.482-2.935.307 1.33.888 3.738-1.482 2.935zm1.277-.741c-.655-2.004-2.076 1.02 0 0zm-1.55-.336c-1.165-1.822-.552 1.583 0 0zm1.432-1.606c-2.527-2.065.078 2.5 0 0zm-1.399.218c-.569-1.998-1.334.999 0 0zM74.51 29.262c-.1-5.96-.774-11.916-1.187-17.85-2.646-.018-5.356-.004-8.03-.05-.405 6.857-.06 13.906.167 20.647 2.99.204 5.995.016 8.991.025l.059-2.772zm-7.474-.676c-1.011-2.121 2.61-2.213 1.999-.144 1.05 2.133-3.058 2.58-2 .144zm.537-.562c-.292.477.288 2.417 0 0zm1.127 1.073c.317-2.881-1.435-.275-.056.328zm1.978.37c-.965-6.444 4.767 1.349.252.42l-.158-.144-.094-.276zm.652-1.64c-.292.476.288 2.416 0 0zm.847.643c-.487-2.809-.25 2.871 0 0zm-5.222-2.842c-1.086-2.25.068-8.748 1.772-3.553-.006 1.374.813 4.51-1.772 3.553zm1.42-2.5c.707-1.936-1.962-3.26-1.12-1.352.435-3.231.92 7.356 1.12 1.352zm2.418 2.492c-2.128-1.708.007-8.959 1.5-3.717-.172 1.143.93 4.818-1.5 3.717zm.287-1.456c-.297-2.065-.493-5.412-.457-1.617-.273.556.375 3.946.457 1.617zm.89-.792c-.84-7.991-.54 5.592 0 0zm-5.51-5.177c-.442-1.702-.674-6.846 1.986-4.08-.073 1.696 1.39 5.745-1.986 4.08zm.773-2.298c.051-4.439-1.363.728-.236 1.968.398-.545.143-1.345.236-1.968zm.987 1.04c.147-3.027-.877-3.64-.564-.343-.29.537.753 2.379.564.343zm1.914 1.402c-1.246-2.057 1.003-8.457 2.007-3.892-.361 1.763 1.265 5.19-2.007 3.892zm.485-2.751c-.188-3.908-.255-.029-.14 1.847.466 1.474.128-1.75.14-1.847zm1.16.458c.076-5.17-1.468-.228-.202 1.831.273-.574.154-1.224.202-1.831zm5.811 15.468c.181-3.68-1.767-9.39 3.858-6.558.332 2.034-1.744 7.502 1.475 7.177 1.806.161.535-2.869 1.01-4.088.4-7.051.16-14.106-.546-21.124-.101-1.68.664-4.26-1.943-3.24-2.69.18-5.386.235-8.08.238.453 8.299 1.204 16.596 1.663 24.897-.051 1.895-.506 4.342 2.3 3.237l.171-.184.092-.355zm-.766-8.464c-2.849-3.352 3.447-4.306 1.497-.013l-.515.163-.982-.15zm1.088-1.015c-.396-2.063-.556 2.12 0 0zm-.794.248c-.548-2.16-.513.844 0 0zm-.195-1.436c-.505-.71-.505.71 0 0zm.989 0c-.575-.83-.75.765 0 0zm2.226 2.129c-1.323-2 .127-4.746 1.696-2.676.248 1.339.447 3.796-1.696 2.676zm1.333-.957c-.609-1.937-.48 2.106 0 0zm-1.056-.231c-.343-.064.208 1.322 0 0zm.262-1.386c-.744-.542-.227 1.481 0 0zm.749.21c-1.032-1.208-.396 1.043 0 0zm-5.194-1.857c-2.355-3.554 3.022-3.746 2.092-.038.24.822-1.817.116-2.092.038zm1.602-.597c-.746-2.239-1.07 1.463 0 0zm-1.385-.623c-.704-.177.308 1.156 0 0zm.078-.846c-.505-.71-.505.71 0 0zm1.088 0c-1.254-.724-.51.796 0 0zm2.157 2.148c-1.028-1.8 1.009-4.772 2.156-2.593-1.689-.206 2.202 4.15-2.156 2.593zm.643-1.01c-.343-.063.208 1.324 0 0zm1.254.15c-.8-1.198-.7 1.155 0 0zm-.99-1.398c-.528-1.858-.457 2.111 0 0zm-.098-2.06c-1.262.167-1.23-3.58-.361-3.561 3.444-.059-1.143 1.104 1.57 1.514.113.966.394 2.61-1.209 2.047zm.89-1.123c-.933-1.59-.66 2.025 0 0zm-.989-1.546c-.378-.705-.532.353 0 0zm-4.943 1.103c.437-5.59 4.916 1.866.497 1.53-.959.428-.308-1.059-.497-1.53zm.79.568c-.506-1.346-.386 1.305 0 0zm1.187-.099c-.799-1.196-.699 1.157 0 0zm-1.186-1.298c-.638-1.106-.197 1.227 0 0zm1.151.077c-.663-1.305-.551 1.146 0 0zm2.616-2.526c-3.036-3.275 2.844-5.324 1.419-.66.211.913-.874 1.262-1.42.66zm.978-.905c-.64-1.364-.591 1.335 0 0zm-.988-.297c-.63-1.115-.08 1.085 0 0zm.988-1.177c-.81-2.317-.459 1.658 0 0zm-.988-.221c-.46-1.376-.36 1.598 0 0zm-4.623 2.38c-1.542-6.003 4.729-1.248 1.334.253-.46.008-1.024.197-1.334-.252zm.586-1.03c-.736-.046.355 1.48 0 0zm1.223.382c-1.41-1.091-.286 1.287 0 0zm-.017-1.328c-.54-1.553-.523 1.645 0 0zm-1.185-.438c-.34-.23.246 1.628 0 0zm3.208 24.25c-.435-1.232.33-7.153-1.495-5.687.973 2.987.723 3.63.3 6.529.513-.03 1.627.193 1.195-.842zm1.585-.643c.471-1.81-.195-8.205-1.555-3.8 1.339 1.559-.7 4.968 1.563 5.016l.032-.42-.04-.796zm7.775.843c-.469-6.815-.315-13.66-.445-20.49-2.615-.302-5.32-.576-3.762 3.078.31 6.013-.017 12.037-.054 18.054 1.191-.365 4.027.766 4.261-.642zm-3.401-1.91c-2.097-3.951 3.504-4.252 2.007-.18-.59.325-1.369.39-2.007.18zm1.572-1.396c-.777-3.76-.796 3.364 0 0zm-1.128-.458c-.05-3.39-.367 3.4 0 0zm-.009-3.167c-1.419-2.19.43-8.454 1.851-3.728-.433 1.652 1.407 5.23-1.85 3.728zm.442-2.277c.049-5.08-.758-.107-.047 1.9.19-.602.005-1.28.047-1.9zm1.088.396c.211-2.32-.754-4.312-.59-.743-.4 1.495.741 3.466.59.743zm-1.382-4.387c-.81-1.155-2.013-7.558 1.09-5.746-.058 1.388 1.798 6.463-1.09 5.746zm.161-3.087c-.268-4.847-.64-.135-.303 2.017.388 1.707.33-2.13.303-2.017zm.657-1.586c-.63-.554.165 6.926.132 1.773l-.02-.697-.112-1.076zm6.229 14.78c.284-1.385-1.13-4.316 1.227-3.813 4.032-1.266 2.245 3.583 2.474 5.996-1.242 1.832 2.592 2.287 2.049.74-.281-4.487-.284-8.986-.403-13.48-2.113.607-5.096.009-6.761.803-.025 4.495-.229 9.001.139 13.488 2.34.665 1.048-2.176 1.282-3.543zm.545-5.921c-2.73-3.892 4.184-4.884 2.677-.523.603 1.393-2.183.335-2.677.523zm.714-.839c-.575-.83-.75.765 0 0zm1.384 0c-.914-.8-1.063.775 0 0zm-1.582-1.287c-.49-1.043-.49 1.043 0 0zm1.545-.05c-1.491-1.674-1.006 1.513 0 0zm.444 11.781c.928-2.53-.192-9.342-2.582-5.83-.094 2.032 2.017 4.328.252 3.177-.19 2.405-.471 3.134 2.33 2.653zm16.142-2.97c-.193-4.731-.522-9.455-.767-14.184-4.26-.095-8.53-.005-12.78-.357.406 5.847.26 11.724.794 17.56h12.874l-.12-3.019zm-11.114 1.63c-1.922-4.833 2.136-5.035 5.765-4.627 2.36-.493 3.783.175 3.225 2.874.46 3.262-4.91.439-6.956 1.761-.597-.095-1.575.503-2.034-.009zm2.113-2.273c.862-1.953-2.564-2.146-1.737-.12-1.135 1.88 2.426 2.416 1.754.516l-.012-.273-.005-.123zm2.694-.149c1.092-1.919-3.359-2.003-2.293-.017-.704 2.074 3.052 1.991 2.293.017zm3.6.083c.326-2.763-4.428-1.731-2.966.965.745.207 3.677 1.173 2.966-.965zm-8.964-2.952c-2.168-4.919 2.98-4.551 6.276-4.304 2.59-.664 3.648.705 3.136 3.388.294 1.882-2.823.542-4.052.986-1.784.007-3.583.098-5.36-.07zm1.845-2.086c-.03-4.3-3.142 2.64 0 1.168v-1.168zm3.123.03c-.486-3.258-3.725-1.259-2.53 1.3.932.047 3.125.62 2.53-1.3zm3.65.768c1.406-2.461-2.595-2.773-3.016-1.583-.92 2.33 1.942 2.824 3.017 1.583zm-8.627-4.06c-1.526-3.644.046-5.177 3.814-4.5 3.665-.966 6.68.417 5.577 4.55-2.945.088-6.932.673-9.391-.05zm1.74-.565c2.226-4.208-3.356-3.295-.763.12l.762-.12zm3.476-.743c2.232-2.973-3.29-3.626-2.57-.892-1.059 1.983 2.38 2.061 2.57 1.012zm3.602-.671c-.127-3.95-5.202-.976-2.365 1.301 1.316-.221 2.997.85 2.365-1.301zm17.292 10.394c-.046-4.915.864-9.762 1.21-14.653-4.176.295-7.8 2.68-11 5.202-.488 4.345.338 8.707.167 13.065h9.612l.01-3.614zm-3.825 1.794c-3.678-4.049 4.965-4.35 2.903.236-.968-.03-1.964.058-2.903-.236zm2.47-1.398c-1.066-3.21-3.181 1.527-.568.842.898.197.561-.195.567-.842zm-2.335-.247c-.738-2.923-.338 2.794 0 0zm-5.048.247c-.718-1.438.273-5.962 1.456-3.194.027 1.298.926 5.05-1.456 3.194zm1.093-.835c-.774-2.067-.532 2.195 0 0zm0-1.875c-.646-2.48-.711 1.959 0 0zm4.616-.16c-3.451 1.129-2.314-6.206 1.069-3.706 2.243-.176 1.713 5.51-1.07 3.707zm-.792-.792c1.311-5.035-2.403-1.738 0 0zm2.756-.891c-.73-4.443-4.767 1.606-.217 1.039.288-.047.1-.782.217-1.04zm-7.649-.712c-1.386-2.538 1.263-5.876 1.243-1.374.409.656-.513 1.999-1.243 1.374zm.673-1.12c-.597-2.05-.296 2.096 0 0zm0-1.584c-.577-1.544-.483 1.521 0 0zm3.01-.445c-2.618-6.21 7.348-3.384 3.92.328-1.198-.147-2.904.377-3.92-.328zm.997-1.683c-.412-4.942-.98 4.514 0 0zm3.15.445c-1.088-3.56-3.538-1.686-2.609 1.008.867-.314 3.218.585 2.61-1.008zm.011-2.78c-1.993-4.62 4.989-.388 0 0zm4.573 14.115c.242-4.669.427-9.344.475-14.019-2.794-1.175-2.959.957-3.044 3.084-.386 4.13-.972 8.33-.447 12.47 1.466-.26 3.468.894 3.016-1.535zm-2.1-.654c-1.67-2.074.977-9.27 1.346-3.39-.219 1.01.902 4.402-1.347 3.39zm1-1.525c-.195-2.704-1.592 1.762-.126.664zm-.16-2.523c.039-2.525-1.305.458-.297 1.089l.234-.231zm-.225-2.627c-2.587-1.2.752-8.445.818-3.755-.231 1.11.681 3.914-.818 3.755zm.422-1.51c-.789-3.526-.506 3.112 0 0zm0-2.496c-.846-2.76-.5 2.624 0 0zm-89.281 4.45c-4.039-.414 2.866.871 0 0zm8.66-.188c-1.335-.88-5.048.653-1.385.402.178-.353 2.617.718 1.385-.402zM45 23.211c6.135-1.44-3.283.2-5.014-1.212-2.809 1.935 4.229 1.362 5.014 1.212zm-31.751-.467c-.772-.966-3.233-4.129-2.547-.51-1.222-2.79-.099.05-.927-.386-.875-3.15.047 2.712-1.615-.6-1.484-2.837-1.274 3.136 1.73 1.485 1.116.033 2.247.157 3.359.011zm-1.692-.272c-2.446-2.45 1.575-1.474 0 0zm-3.784-.536c-1.383-3.599 1.144.153 0 0zm6.07.297c-1.074-1.248.621 1.71 0 0zm32.502-.215c1.94-1.114-10.14-.995-4.126.041 1.366.155 2.77.246 4.126-.04zm-37.53-1.063c-1.035-2.612.253 2.716 0 0zm3.76-.453c-.683-.067.38 1.486 0 0zm33.844.098c-1.562-.651-8.566-.021-3.14.221.98-.115 2.287.272 3.14-.221zm68.075-.568c-.447-.436-.429 1.024 0 0zm-69.606-.57c-.666-1.375-.588 1.295 0 0zm70.496-.166c-.37-.871-.696 1.133 0 0zm.95-1.152c-1.041-.48-.169 1.525 0 0zm.985-.951c-.848-.768-.588 1.87.067.326zm-22.23-1.431c.799-5.885-6.975 3.65-.699 1.72 1.171.382.482-1.111.7-1.72zm-1.497.281c.264-4.536 1.211 1.382-.034.941zm3.262-.472c.055-5.387.858 4.526 1.125.277 1.023-4.153-3.464-2.355-2.342.694-.01 1.733 2.053.528 1.217-.97zm21.78 1.16c-.671-2.308-1.385 1.634 0 0zm.819-.69c.315-2.196-1.263.757 0 0zm1.051-.505c.214-2.12-1.166.44 0 0zm-2.253-1.445c-.185-3.09-1.225 2.883-.078.789zm3.348.83c1.253-2.196-1.767.096 0 0zm2.29-1.365c-1.545-1.45-1.822 2.43 0 0zm-121.822.478c-2.023-.88.92 1.235 0 0zm29.998-.272c-1.293-1.197-3.168-8.725-1.08-3.351.059 1.825 4.146 6.002 1.74 1.97-1.223-1.974-1.623-6.15-.146-1.553.493 2.05 3.383 5.35 1.001 1.34-1.182-2.195-1.725-6.638-.138-1.783.687 2.22 1.79 3.604.533.485.13-4.651-2.625-3.88-6.09-3.342-2.13.361-6.677-1.8-4.043 2.054.61 2.225 3.968 6.658 1.495 1.721-1.018-1.602-2.085-5.495-.342-1.787.27 2.18 4.737 6.854 1.839 2.244-1.282-1.823-1.748-5.588-.236-1.685.586 2.89 4.63 5.946 1.69 1.584-1.482-2.367-1.584-5.023.113-.876.388 1.977 4.163 5.12 1.5 1.303-.984-1.102-2.376-6.49-.582-2.334.209.542 2.95 5.874 2.746 4.01zm67.005-.265c-.626-1.619-.5 1.98 0 0zm1.187-1.065c-.577-4.87-.65 5.04 0 0zm1.702 1.37c.353-1.733-.826-6.147-1.086-1.966-.105.722-.113 3.361 1.086 1.966zm1.784-.132c.293-1.213-.296-5.835-1.22-2.993.186 1.167-.745 4.9 1.22 2.993zm1.824-1.171c-.127-4.879 1.504 5.191 1.54.102 1.107-2.705-1.385-3.52-2.92-2.569.435 1.276-.814 4.28 1.053 4.083.817.258.163-1.217.327-1.616zm3.506 1.293c.528-2.406-1.855-6.066-1.437-1.706.129 1.174-.128 2.94 1.437 1.706zm1.695-.192c-.573-2.15-1.945-4.59-1.227-.777-.47.838 1.05 1.908 1.227.777zM24.15 11.315c-.472-1.523-3.583-7.709-1.751-2.76.7 1.913 4.333 8.075 1.75 2.76zm100.987 1.86c-.724-1.731-1.397 1.861 0 0zm-100.814.25c-1.178-3.029-4.023-8.784-6.214-2.9-4.423 4.52 3.855 1.96 6.214 2.9zm-4.35-1.429c-2.158-1.952 1.448-4.584 1.136-2.73-.444.473 2.234 2.83-1.137 2.73zm1.087-1.246c-.676-1.87-.498 1.81 0 0zm34.702 1.242c-.678-.373.609 2.727 0 0zm2.14 1.119c-.842-.803-.512.86 0 0zm68.724-.23c2.37.646 1.084-1.568-.86.07-.01.604.83.382.86-.07zm-71.716-.189c-.339-.34.171 1.107 0 0zm39.61-.012c-.477-3.173-2.387 1.237 0 0zm35.596-.05c-1.522-1.544-1.986 1.492 0 0zm-75.935-.636c-.53-.867.463 1.987 0 0zm64.42.396c-1.663-.199-1.725.285 0 0zm-12.214-3.732c-.852-3.049-1.505 1.29 0 0zm-85.03-1.151c-.281-4.058-2.277 1.004 0 0zM2.238 30.23c-1.96-4.387 5.026-2.82 2.085.171-.682.01-1.45.177-2.085-.171zm2.21-.689c-1.37-1.368-1.445 1.223 0 0zm-1.483-.082c-.49-1.043-.49 1.043 0 0zm1.582-.95c-.967-2.09-1.78 1.04 0 0zm-1.582-.238c-.49-1.043-.49 1.043 0 0zm-.793-2.659c-1.293-5.816 5.441.14 1.482.691-.686-.154-1.8.51-1.482-.69zm.99-.212c-.742-1.389-.617 1.337 0 0zm1.121-.284c-1.233-1.153-.292 1.764 0 0zm-1.244-.864c-.06-1.487-1.15.45 0 0zm1.188-.328c-1.289-1.478-.353 1.34 0 0zm-2.52-2.436c-1.775-2.326 2.515-3.174 2.293-1.046 1.55 1.641-2.625 2.567-2.292 1.046zm.863-.147c-.626-1.179-.606 1.1 0 0zm1.079-.113c-1.429-.851-.153 1.126 0 0zm-1.116-.902c3.299-.269-2.028-.244 0 0zm129.488-1.757c.675-.975-.106.942 0 0zM.336 16.762c.508-1.154 6.554-.093 2.043.085-.68.016-1.374.098-2.043-.085zM7.56 10.28c-2.623-3.193 7.557-1.597 3.175.306-.986.328-2.366.532-3.175-.306zm3.076-.263c1.83-1.746-6.475-.466-1.143.144l.493.169.65-.313zm29.848-.257c-3.657-3.17 4.388-2.301 6.367-2.085 2.515 3.594-5.334 1.967-6.367 2.085zm1.325-.529c1.435.477 7.543-.163 3.177-1.107-1.063.382-7.427-.933-3.92 1.404l.743-.297zM45.84 6.19c-2.443-2.446 3.466-3.447 4.97-2.263 1.585 3.889-3.56 1.96-4.97 2.263zm4.707-.906c-.287-1.953-4.256-1.238-5.023.013 1.403-.002 4.145 1.006 5.023-.013zm62.674 1.005c-3.257-1.164-1.035-4.129 1.669-2.963 2.458-1.351 7.364 1.884 2.38 2.377-1.272.019-2.785 1.083-4.05.586zm1.354-.666c1.92-.278 6.908-1.385 2.22-1.766-1.753.045-7.088-.363-3.4 1.851l.628.271.552-.356z')

                sketchGroup.append('g').attr('id', 'sketchFarms')
                    .attr('transform', 'translate(120, 260) scale(2.5)')
                    .append('path').classed('barsSketch source agriculture', true)
                    .attr('d', 'M64.229 39.273c-.731-2.854 1 1.485 0 0zm-15.265-.228c-.366-1.58.922 1.56 0 0zm-.73.103c-1.303-1.556-.103-1.711 0 0zm2.225.029c-.807-1.518.632-.706.08.118zm12.887-.302c-.669-1.867.804 1.125 0 0zm2.631.113c-1.934-1.952-.24-2.08 0 0zm31.908.231c-.063-1.088.843-.207 0 0zm-52.147-.12c-.634-2.127.669-1.829 0 0zm1.129-.154c-.495-2.667.908-1.303 0 0zm7.91-.025c-.58-2.295 1.043.557 0 0zm2.806-.351c.585-2.54.1 1.998 0 0zm.906.277c-.529-2.665.823 1.09 0 0zm2.995-.462c.3-3.225.229 2.28 0 0zm1.243.72c-.747-1.85.66-.868 0 0zm15.358-.24c-.22-2.57.63 1.106 0 0zm-22.548-.26c-1.019-2.23 1.297 1.668 0 0zm4.566.23c-1.048-2.157.776.44 0 0zm6.457-.073c-2.68-3.827.413-1.285 0 0zm9.288.128c-1.287-1.863.367-1.104 0 0zm20.378-.085c-.706-1.224.848.805 0 0zm-53.867-.04c-.947-1.47.781.254 0 0zm9.37-.274c-.712-1.813.974 1.306 0 0zm2.044-.058c-.003-2.298.333 1.756 0 0zm3.057.123c-.806-1.861 1.031 1.08 0 0zm2.286.1c-.183-1.324.884 1.09 0 0zm8.698.154c-.69-1.216-.477-3.636.019-.846zm1.307-.016c-1.353-1.64.636-.583 0 0zm1.259.042c-.624-1.177.692-.412 0 0zm.766 0c-.606-1.055.674-.29 0 0zm3.617-.138c-.875-2.078.763.441 0 0zm1.96.078c-1.883-2.391 1.08.234 0 0zm2.855-.344c-.998-2.037.266-1.058.259.22zm5.819.274c-.871-.625.831-2.834 0 0zm1.855-.008c-1.31-1.892 1.285.77 0 0zm.749 0c-1.14-2.591 1.05-.495 0 0zm4.722-.092c-.71-1.587 1.156 1.174 0 0zm1.52-.109c-.752-2.128 1.011 1.327 0 0zm-50.818-.02c-.359-1.112.796 1.029 0 0zm26.181-.095c-.786-1.838.974 1.062 0 0zm3.264-.436c-1.279-3.21 1.803 2.905 0 0zm1.256.48c-.8-2.666.854.716 0 0zm3.254.102c.037-1.547.648 1.253 0 0zm5.201-.11c-.783-1.833.92 1.011 0 0zm1.923.216c-.856-1.926.499-1.415 0 0zm6.736-.417c.289-1.796.289 1.797 0 0zm-38.416.137c-.813-1.873.729.81 0 0zm27.461.096c-1.018-2.899.81.65 0 0zm1.314-.161c-.466-1.84.687-1.053.23.13zm2.068-.104c-1.19-3.01 1.248 1.668 0 0zm2.613.25c-.64-2.419.723.98 0 0zm2.81-.26c-.569-2.897.921 1.22 0 0zm.904.189c-.75-1.947.665.733 0 0zm-45.534.003c-.642-1.664.521.368 0 0zm36.522-.04c-.727-1.837.851-.806 0 0zm-4.472-.643c-.464-.557.587.073 0 0zm14.3-1.823c-1.52-2.861 2.018 2.612 0 0zm1.196.515c-1.305-2.48 1.258.23 0 0zm-42.147-.304c-.9-2.1 1.294 1.51 0 0zm.978-.239c-.727-3.083 1.134 2.041 0 0zm2.17.052c-.66-1.928.527-1.16.234.137zm39.905.241c-1.272-2.695 1.24.828 0 0zM15.259 35.8c-1.054-2.529 1.701 1.69 0 0zm4.539.157c-1.034-2.059 1.185.676 0 0zm17.994.149c-1.06-.792.931-2.637 0 0zm7.45-.195c-1.455-2.351.922.426 0 0zm3.525.155c-.769-1.912 1.035-.656 0 0zm47.152.076c-.662-1.643.858-1.212 0 0zm-78.682-.321c-1.134-2.055.351-1.08.306.216zm1.544.154c-1.372-2.422.928-1.234 0 0zm7.417-.096c-1.416-2.141 1.452.707 0 0zm4.71.022c-.582-2.609.875.432 0 0zm3.637-.034c-1.1-2.48 1.24.248 0 0zm2.25.029c-1.09-2.192.961-.352 0 0zm1.879-.245c-.882-1.755 1.593 1.592 0 0zm4.243-.142c-.558-3.256.983 1.74 0 0zm1.142.149c-.909-3.024 1.095 1.338 0 0zm7.862.058c-.831-2.875 1.024.98 0 0zm47.9-.272c.56-2.213.06 2.077 0 0zm-83.71-.144c-1.067-2.623 1.621 2.207 0 0zm7.895.473c-1.518-1.753 1.184.399 0 0zm3.32-.33c-.326-2.015.96 1.678 0 0zm4.534.192c-.634-1.414 1.302 1.335 0 0zm3.58.005c-.617-1.652 1.272 1.317 0 0zm5.58.111c-1.814-2.472 1.472.865 0 0zm.993-.06c-.857-1.518 1.344.951 0 0zm5.757.195c-.856-2.085.456-2.756 0 0zm6.618-.011c-2.165-.908.607-.949 0 0zm1.812.011c-.79-2.34.702-2.357 0 0zm1.817-.487c-.349-1.968 1.213 2.073 0 0zm5.06.19c-.404-2.831 1.023.92 0 0zm4.147.12c-.529-2.198.977 1.152 0 0zm12.621-.124c-.11-1.732.719 1.521 0 0zm14.016.012c-.74-1.839 1.203 1.346 0 0zm7.526-.066c-.848-2.68 1.227 1.468 0 0zm-80.187.222c-1.4-1.508.559-1.082 0 0zm3.828-.683c-.054-2.783.717 2.387 0 0zm3.584.489c-2.059-2.537 1.879 1.2 0 0zm1.411.205c-1.32-1.731.584-1.056 0 0zm3.155-.461c-1.057-2.94 1.232 1.679 0 0zm6.67.342c-.712-2.07.589-1.12.258.184zm6.186-.278c.024-1.782.492 2.048 0 0zm.922.32c-1.517-2.623 1.305.548 0 0zm8.267-.064c-.603-2.48.803.493 0 0zm1.857.103c-1.315-1.852.25-1.595 0 0zm5.168-.2c-.788-2.105.926.814 0 0zm2.245-.16c-1.515-2.701 1.745 1.42 0 0zm10.515-.019c-.8-3.42 1.154 1.018 0 0zm.907-.073c-.88-2.74 1.334 1.996 0 0zm2.276.445c-1.172-2.1.478-1.396 0 0zm2.631-.041c-.15-1.004.512.452 0 0zm.732.01c-1.554-1.309.126-1.377 0 0zm1.981-.701c-.536-3.6 1.01 2.387 0 0zm3.837.777c-1.095-2.01.985-1.295 0 0zm9.773-.077c-1.2-2.411 1.19.226 0 0zm-37.8-.128c-1.33-2.278 1.362.545 0 0zm2.017-.18c-.687-1.498 1.29 1.352 0 0zm4.973-.18c.383-1.564.196 1.829 0 0zm18.98.317c-.928-2.938 1.066.754 0 0zm.97.043c-1.45-2.095.926-.364 0 0zm2.982 0c-1.103-2.188 1.225.273 0 0zm5.7-.278c-.604-1.787 1.274 1.511 0 0zm2.783.175c-.492-1.657.9.978 0 0zm4.81-.098c-.723-1.95.803.986 0 0zm-80.287.059c-.707-2.157.967-.202 0 0zm38.14-.02c-.812-1.986 1.032.346 0 0zm5.048-.103c-.684-2.728.763.996 0 0zm7.602.117c-.406-2.33.802.8 0 0zm3.832-.273c-.661-1.808 1.374 1.65 0 0zm1.82.11c-1.274-2.266 1.637 1.112 0 0zm4.2.119c-1.83-1.986-1.341-3.267 0 0zm5.345.139c-.8-1.605.867-1.78 0 0zm10.488-.3c.083-1.507.67 1.31 0 0zm-30.684-.074c-.498-1.515 1.141 1.361 0 0zm3.54.17c-1.207-1.66 1.054.11 0 0zm2.732-.191c-1.292-1.957 1.432.205 0 0zm10.055-.048c-.285-3.288.745 1.68 0 0zm-15.793-.433c-.646-2.603 1.358 2.38 0 0zm2.14.267c-.72-2.327.977 1.29 0 0zm8.83-.255c-1.464-2.695 1.31 1.268 0 0zM91.7 34.03c-1.326-3.024.523-4.385 0 0zm18.753-.427c1.652-2.228-3.007-4.064-2.303-.925.003-3.427-1.495-1.548-1.102.669-.366-5.085-4.346-1.162-3.158-.104.24-5.466-4.606.245-3.52-.489 1.031-3.176-4.174-2.663-1.212-.077 1.469 1.954-.378-.79-.113.826-.485-2.749-4.793-3.746-2.491-.582-.682 3.156-2.3-5.259-1.36-.28-1.15 2.737-1.822-4.57-1.503-.163.338 2.833-.227-.95-.537 1.045-1.56-2.575.012-4.869-3.388-5.08 1.008-.554 3.107-2.783 2.364-4.233 2.593.048 1.044-3.74-.151-4.282 2.558.707.99 1.616 1.014-.307.445-.115 2.68-.366 1.288 1.892-1.453 2.335-2.326 7.215 2.292 5.905 3.857-.088 6.388-.22 10.44-.216-2.588-2.785.915-6.879 3.506-5.085-1.346-.115 1.805 2.712-1.175 3.601-2.777 1.729 4.376 1.131.814 2.291-1.443-1.164-1.561 1.199 1.05.57 2.088 2.166-5.468.872-.517 1.937 1.893-1.1 1.246 3.2.167.41-.239.445.74 4.239-.405 2.677zm-17.096-2.975l-.068.537zm13.541.13c-.663.013.435.639 0 0zm-14.405-.323c-.259-.722-.622 1.11 0 0zm.696-.75c1.3-.435-1.817-2.423-.028.39l.02-.266.008-.124zm1.209.45c-.422-.205-.23.258 0 0zm7-.167c1.677.04 7.148.05 2.32-.338-2.123-.258-8.683.468-3.209.425l.89-.087zm-4.858-.46c2.127-.414 9.382-.494 3.724-.8-1.484-.094-10.55.87-3.724.8zm-.715-.4c-.247-.805 1.006 1.022 0 0zm2.242-.057c.003-.988.594.798 0 0zm9.574.57c.828-1.243-1.248-.09 0 0zm1.838-.467c-.437-.863-.713.979 0 0zm.79.033c-.654-1.082-.647 1.159 0 0zm.884.21c-.6-.669-.716.102 0 0zm-4.204-.21c-.468-.942-2.938-.045-.984.068zm-3.065-.192c2.047-.08-1.73-.366 0 0zm3.731-.728c-.79-.178.328.828 0 0zm2.492.33c-.422-.204-.23.26 0 0zm-.86-.107c-.234-.485-.38.284 0 0zm-17.25-.28c-.84-.879-2.033 1.13 0 0zm13.547-.047c-.438-.533-.33.522 0 0zm-7.873-.128c2.887-.43-7.242.17-1.52.024a67.707 67.707 0 011.52-.024zm7.256.004c5.333-.457-4.525-.288 0 0zm-4.747-.132c-.615-.56-.615.56 0 0zm.894 0c-.77-.568-.77.567 0 0zm.702 0c-.616-.57-.47.551 0 0zm1.022 0c-.744-.574-.968.585 0 0zm-9.77-.216c-.188-2.93-1.983-.755 0 0zm14.742-.605c-.064-2.288-.729 1.93 0 0zm.073-1.152c-2.52-1.418 2.917-.426-.357-2.59 2.912 1.737.858-.322 1.183-.183 2.559.3-2.556-2.514-1.524 1.091-1.054.634-.107 1.597.698 1.682zm2.299-1.629c-.481-.246-.119.632 0 0zm-12.517 9.373c-.691-2.82.954 1.215 0 0zm13.739-.406c-.001-2.497.74 2.33 0 0zm3.98.701c-1.45-3.679 2.724-.199 1.105-.739-1.073-2.012-.972.349-1.106.74zm-47.672-.24c-3.46-.61-1.713-2.032-1.255-1.83-1.074-3.196-3.097-.908-1.399.68-1.53 3.234-1.99-4.65-3.54-.464.359.376 1.597-1.407.595.92-2.15-.115.022-4.62-1.31-.77-1.197 1.607 1.95-4.82-2.03-2.573-2.027-.524-4.811.762-2.182 2.33-1.134 3.192-2.142-.917-3.305-1.676-1.777 1.07.892 1.679-1.603 2.876-.25-.837-1.333.895-1.438-1.723 1.735.522.488-5.744 1.888-8.405 3.013-2.107 9.409-1.148 12.792.178 1.826 3.499 6.316 6.506 5.47 10.146-.898.08-1.812.046-2.683.312zm1.984-1.915c-.99-3.064-4.573-1.709-1.254.294.17.201 1.683.45 1.254-.294zm-1.154-.105c-1.906-1.407 1.535-.328 0 0zm-16.599-.548c1.562-1.547.53-2.8 0 0zm11.75-2.4c1.328-.766 4.013-.008 1.506-2.275-1.454-.137-3.19 5.875-1.506 2.275zm5.291 1.333c-.034-.963-.646.37 0 0zm-14.614-.27c-.287-.496-.168.485 0 0zm1.15 0c-.287-.496-.169.485 0 0zm-.677-.513c4.11-.83-3.46-.91 0 0zm5.515-.265c-.803-1.333-7.016-.779-5.535-4.312-3.443 3.617 2.29 3.352 4.734 4.478zm-8.415-.639c-.362-2.01-.21 2.287 0 0zm12.963.264c-.608-.754-.296.549 0 0zm-9.677-.718c-.421-.205-.23.26 0 0zm7.77-.321c3.31-1.688-.088-2.024-.851-.084zm4.27.282c.235-5.808-9.199-5.727-10.65-5.328 2.897.532 2.438 2.283-.288 1.907-1.386 1.703 2.754 4.632 1.166 1.76 1.556.075 3.343-2.425 3.834-1.87.457-2.37 4.912-.893 4.6 2.058.245.616.627 1.31 1.338 1.473zm-14.197-.504c1.816-3.937-2.415-2.517 0 0zm8.564-.052c1.222-2.462-1.064.772 0 0zm-8.218-3.612c1.652-3.318-2.732.649 0 0zm1.648-1.243c.115-1.569-2.488.74 0 0zm34.17 10.474c.565-3.244.202 2.831 0 0zm9.006.564c-.33-1.602.856 1.079 0 0zm7.081-.281c-1.208-3.372 1.228 1.184 0 0zm12.087.555c-1.1-2.169.219-1.847 0 0zm-101.024-.552c-1.488-3.077.8-1.661.358.438l-.309-.09zm1.658.379c-.879-1.923.946-1.517 0 0zm1.453-.048c-1.354-2.304 1.159-.694 0 0zm1.403-.072c-.842-2.365.96-.324 0 0zm2.2.048c-1.15-1.43-1.114-4.026.305-1.286.803-1.903.478-10.803.244-4.049-.4 3.777-.162-6.416-1.033-.999-.27-1.836 1.041-3.513-.683-1.376-.803-1.054-1.379 2.543-.923-.246-1.124-1.345 1.795-.975.663-2.77 1.573.75-2.317-3.823.635-.705.977 3.986.687-2.612 3.852-1.622 2.498.067 2.923.667.477 1.658-1.185 1.221-1.234 5.474.094 2.093 3.591-2.231-1.01 4.02 2.007 2.229 2.541 3.697 4.036-5.52 1.437-1.149-3.118-1.287.861-5.941 4.308-4.323 2.71 1.163 6.849-.592 7.06-1.929 1.402 1.511 5.996-.412 3.902 3.089 1.743 3.418-5.386 1.848-5.704 5.036-2.196 1.305-1.87 5.542.042 4.739 1.145 2.636 2.016-2.13 1.552 1.211-4.203 2.99-3.884-6.394-3.874-6.812 1.423-1.94 1.377-5.3 3.824-2.732.556-3.772-8.71-1.597-9.556-2.018 2.354.318 7.048.26 3.073 2.102.482.973 2.563.032.755 2.14 2.093-3.463.172 1.417 1.475 3.065.795 1.918 1.057 6.135-1.418 4.085.668-4.193-1.059-5.478-5.14-4.966-4.91-.489-1.174 4.995.076 3.145.545 1.551 1.293-1.456 1.726 1.47-.593-2.766 1.496-.836.414.56-3.055-.052-5.71.376-6.315-3.434-1.656-1.386-1.671 3.264-.728 1.18.766 1.161.955 3.802.29 1.018.172 1.67-2.193 1.73-2.838 1.596zm13.197-1.661c.707-4.112-1.206 2.054-.021.166l.02-.166zm-8.294-.153c-.029-1.988-1.037-.42 0 0zm-3.448-1.13c2.01-2.153.812-4.77.037-.835-.133.33-.348 2.912-.037.836zm12.446.599c-.396-1.345-.187 1.6 0 0zm-9.515-2.81c-.308-.503-.308.503 0 0zm11.212-.256c-.184-.88-.537.924 0 0zm-10.355-.488c1.57-1.893-3.084 1.421 0 0zm-3.743-.313c-.095-3.158-.625 1.428 0 0zm10.083.145c.542-1.52-4.446 1.13-.508.11l.26-.057.248-.053zm-6.995-1.726c.112-.66-1.358 1.36 0 0zm12.506.111c-.295-.558-.412 1.127 0 0zm-17.585-1.907c-.819.121-.04 1.476 0 0zm17.435.137c-.503-1.421-.109 1.7 0 0zm-15.06-.89c-.083-.852-.38 1.804 0 0zm20.824.39c-.956-1.132-1.685.818 0 0zm-1.783-.348c.19-3.036-5.438-2.567-.943-.681l.607.417.336.264zm-1-1.343c.66-.914.26.74 0 0zm-16.797-.787c-3.046.284 1.932.49 0 0zm18.502-.4c-1.357-1.352.116 1.127 0 0zm-1.211-.152c-3.605-1.256-2.65-.102 0 0zm1.814-.434c.137-1.13-.73 1.285 0 0zm27.273 13.416c-1.46-2.287 1.255-.735 0 0zm17.344.114c-.748-1.936 1.372-1.85 0 0zm.753-.154c-.465-2.437.958-.274 0 0zm1.555.047c-1.062-2.31 1.042-.162 0 0zm4.515-.84c.19-3.65.507 3.094 0 0zm4.42.858c-.92-2.866 1.872-.272 0 0zm1.155.114c-1.362-2.624 1.088-1.858 0 0zm2.413-.267c-.717-2.42 1.336 1.264 0 0zm1.266 0c-1.045-2.558.65-2.926 0 0zm1.728.16c-1.192-2.329 1.054-1.337 0 0zm1.026-.056c-.777-2.118.987-.78 0 0zm.762.023c-.354-2.352 1.03.545 0 0zm2.885-.063c-1.606-1.928 1.453.017 0 0zm.817-.128c-3.221-3.312 3.961-1.294.116-.978.522.124.242 2.263-.116.978zm.968.048c-.205-1.726 1.065 1.485 0 0zm4.082-.01c-.952-2.777 1.284 1.164 0 0zm3.367.026c-1.02-2.84 1.279 1.178 0 0zm1.733-.08c-.483-2.827.985 1.442 0 0zm3.332.314c-.991-1.869.747-1.916 0 0zM15.85 33.576c-1.787-1.89.778-1.813 0 0zm6.031-.74c-.954-3.075 2 2.757 0 0zm12.43.58c-.828-5.48 1.793-.103 0 0zm7.387.018c-1.074-2.107 1.39-.067 0 0zm.88-.052c-1.147-2.528.677-.287 1.063-1.926 1.227.428-.376-1.026 1.412.283 1.17 2.107-1.057 1.494-2.474 1.643zm28.67.152c-.809-4.219 2.156-1.567 0 0zm2.133-.19c-2.004-4.645 2.84.344 0 0zm14.82-.41c-1.3-3.388 1.452 1.827 0 0zm31.082.576c-1.606-2.514.931-.91 0 0zm-102.038-.322c-.775-2.443-.017-3.3.395-.327.315.389-.258.656-.395.327zm1.41.268c-1.275-4.667 1.316-1.25 0 0zm1.389-.386c-1.241-2.968 1.428.44 0 0zm6.9-.39c-1.13-2.809 2.235 2.592 0 0zm6.59.638c-1.913-4.345.873-.914 0 0zm54.168-.032c-2.947-2.222 2.632.052 0 0zm15.289.026c-1.126-2.359 1.186.188 0 0zm17.11-.099c-.434-1.793 1.03 1.094 0 0zm2.248.177c-.719-1.533.695-2.073 0 0zm1.926-.082c-.947-1.6 1.38.891 0 0zm.635-.054c-.9-2.564 1.242-.896 0 0zM8.28 33.06c-1.078-2.258-.99-3.744.354-.8.074.072.09 1.915-.353.8zm1.409-.352c-.979-3.924 2.051-.82.282.58zm.412-.344c-.3-.072.276.71 0 0zm36.477.894c-1.884-1.006-1.268-3.497.342-1.263-.757-4.292 1.812 1.617-.342 1.263zm.905-.03c.478-2.08.578-3.374 1.63-1.257.293.22-1.49 1.4-1.63 1.257zm2.208.1c-1.079-2.479 1.306-1.008 0 0zm3.38-.088c-1.283-2.001 1.442.167 0 0zm.765-.164c-2.001-3.926 2.282.798 0 0zm4.07.013c-.975-2.957 1.681-1.046 0 0zm4.603.076c-.483-2.144 1.432.819 0 0zm12.93-.045c-1.975-3.075.627-2.833 0 0zm3.286-.404c.338-2.324.486 2.163 0 0zm2.125.507c-1.814-3.503 1.881.94 1.855-2.336.643 1.609.029 2.842-1.855 2.336zm1.067.062c.33-.522.439.532 0 0zm2.943-.058c-1.84-.247-1.748-4.197-.362-.997.528.027.709.682.362.997zm35.935-.134c-.531-1.356 1.104.946 0 0zm5.115-.033c-1.71-2.787 1.86 1.339 0 0zm-111.085.064c-1.73-2.624 1.193-1.542 0 0zm42.11-.303c-.625-2.484 1.463 1.7 0 0zm17.786.23c-1.783-2.872 1.56.784 0 0zm1.385.074c-2.477-5.077 1.4-1.252 0 0zm7.015-.012c-.941-2.43 1.171.042 0 0zm2.448-.206c-.649-2.297-.29-4.239.327-.856-.006.009.15 1.953-.327.856zM3.014 31.827c-.446-1.884-1.485-5.176.233-1.664.45.661-.016 4.381-.233 1.664zm9.339.53c-.093-2.921.855 2.884 0 0zm.806.384c-.703-2.794.214-2.779.607-.038 0 .413-.9.67-.607.038zm.665-.158c.008-2.594.665 1.845 0 0zm45.184.378c-.886-3.06 1.723-1.049 0 0zm18.435-.337c-.96-4.462 2.34 1.783 0 0zm2.246.373c-.956-1.894 1.211.106 0 0zm-77.393-.256c-.348-1.713-2.285-6.258-.077-2.29.3.136.689 3.33.077 2.29zm2.298-.117c-.382-1.66.92 1.24 0 0zm.775.317c-1.056-1.323.734-1.057 0 0zm.718-.072c-1.447-2.687 1.312.593 0 0zm.6-.318c-.647-2.09 1.179 1.408 0 0zm.732-.2c-1.891-3.235 1.839 1.55 0 0zm3.497.28c-1.1-2.742 1.335 1.047 0 0zm.707.196c-1.369-2.961.92-3.25 0 0zm65.062-.778c-1.807-3.392 1.257-.779.267.941l-.166-.394zm7.03.778c.108-.483.102.614 0 0zm2.544-.502c.45-2.185.382 2.232 0 0zm-84.808.041c-1.353-2.074-.854-3.035.441-.335.209.211-.387 1.468-.44.335zm2.436-.61c.354-3.52.256 3.58 0 0zm5.059 1.017c-.743-2.235-1.45-5.238.2-1.466-.078.268.42 1.504-.2 1.466zm-8.32-.513c-2.157-2.05 1.432.227 0 0zm115.73-.47c-1.532-.598-3.309-.947-1.44-2.286-2.037.668-3.176-1.404-.908-1.072 1.206.791 2.554 1.673 1.435-.203 1.869 1.23 2.722 5.594.54 2.123.115.4 2.256 3.176.372 1.439zm-.67-1.45c-.647-1.352-1.156 1.36 0 0zm2.214 1.169c-.458-2.151.428-2.01 0 0zm1.778-.23c-.078-.92 1.146.463 0 0zm1.192-.306c-.849-.913 1.578.753 0 0zm-8.472-.334c-.994-1.901 1.788.628 0 0zm4.864 0c.615-.317.211.265 0 0zm1.437-.292c.195-1.599.385 1.341 0 0zm3.384.25c.607-.57.793.586 0 0zm-2.15-.214c-.227-.97 1.49.448 0 0zm-7.108-.362c-.24-1.523 1.445 1.038 0 0zm8.223-.001c-.434-.678 1.177.548 0 0zm1.807-.055c.011-.952.764.804 0 0zm-5.729-.092l.212-.27zm-83.465-.204c-1.121-1.792 1.047.473 0 0zm5.04-.035c-.679-1.494.942.234 0 0zm1.337-.212c-.363-1.804 1.001 1.465 0 0zm.737.021c-.16-1.79.591 1.377 0 0zm-8.396-.177c-.419-1.389.66.873 0 0zm2.287-.239c.235-1.44.434 1.725 0 0zm40.042.208c-.387-2.798.85 1.078 0 0zm3.304.16c1.379-4.446-6.264-.906-5.85-3.08-.046 1.714-2.53 2.14-.607-.123-1.37-.327-1.314 4.892-1.363 1.02 1.08-3.642 6.312 1.286 6.774-1.739 1.263-2.806 2.222 4.517 1.046 3.922zm1.133.02c-1.005-1.112.816.147 0 0zm3.664-.004c-1.026-2.335 1.083.778 0 0zm8.589.012c-.82-1.354.893.241 0 0zm-60.487-.268c-.41-1.712.818 1.042 0 0zm10.469-.237c-1.104-3.194 1.266 1.808 0 0zm32.49.412c-1.216-.799.38-2.007 0 0zm6.437-.066c-.418-1.087.79.446 0 0zm1.153-.275c-.633-3.026.86 1.804 0 0zm.645.189c-.184-1.325.884 1.09 0 0zm5.972.117c-.819-1.354.893.241 0 0zm31.036 0c-.103-.985 1.91.708 0 0zm2.293-.005c-.32-.902 1.177.582 0 0zM71.03 29.24c-.801-1.181.693-.205 0 0zm.5-.011c-.973-1.291.839.102 0 0zm3.878-.162c-.985-3.228 1.33.613 0 0zm.846-.035c-.063-1.53.735 1.314 0 0zm.804.015c-.192-1.455.856 1.282 0 0zm2.48.076c-1.77-2.169 2.31-3.535 3.116-7.01 1.39 2.207 3.603-.046.785-.904.705-1.046 3.483 2.84.28 2.066-2.294 1.088-3.155 3.724-4.182 5.848zm1.362-.056c-.886-2.126 1.265 1.114 0 0zm5.883.013c-.637-1.343.947.627 0 0zm1.774-.182c-1.369-2.645 1.438 1.545 0 0zm.852.134c-.06-1.263.79 1.254 0 0zm27.46.197c-.091-.856 1.394.286 0 0zm-87.684-.384c-.532-1.237 1.125.792 0 0zm42.98.252c-.596-.92.76-.161 0 0zm.564-.391c-.464-2.07.983 1.646 0 0zm11.067.224c-.578-1.217.742.674 0 0zm-53.867-.214c-.498-1.829.97 1.26 0 0zm18.301.132c-1.069-1.343.208-.986.252.064zm37.183.064c-1.063-1.304.894.16 0 0zm.621-.11c-.229-.952 1.034 1.077 0 0zm-39.151.045c-1.463-1.211.842-.855 0 0zm1.827-.755c-.225-3.27.848 2.813 0 0zm-28.354.188c-.426-2.55.898 1.78 0 0zm2.131.437c-.793-1.91.87-.748 0 0zm22.335-.377c-.026-2.117.635 1.547 0 0zm.833-.247c-.949-2.952 1.408 2.418 0 0zm1.864.624c-.595-1.817.65-.932 0 0zm2.093-.16c-.932-1.481 1.11.72 0 0zm34.737-.331c-1.3-2.595 1.215 1.43 0 0zm32.971.422c-.611-1.252 1.19.774 0 0zm5.786.026c.293-.825 1.159.457 0 0zm-103.426-.26c-1.184-2.659 1.08.66 0 0zm20.865.018c-.15-.906.7.63 0 0zm2.503-.446c-.716-2.862 1.177 2.28 0 0zm1.023.603c-.766-1.78 1.023.223 0 0zM18.08 28.05c-1.464-5.178 1.118.805 0 0zm.824.293c-.57-4.013 1.049-2.415 0 0zm2.306.118c-.543-1.448.865-1.609 0 0zm.627-.203c-.831-1.984.825-.918.09.244zm20.322-.085c-.27-1.366.831 1.077 0 0zm74.364.106c-.167-1.273.887.988 0 0zm-100.059-.115c-1.806-2.303 3.098-8.119-.993-4.422-.647-2.259-2.663-2.207-1.25.038 1.983-.564 1.702 3.657.79.32.949 4.178-1.142-2.165-2.868-.754-.895-3.65 3.44-1.232 3.544-.734.317-2.193 2.413-.032 3.963-.927-.199.375.07 1.012.325 2.246-1.705-2.541-4.666 1.128-3.19 3.545l-.087.433-.234.255zm-3.782-5.67c-1.19-1.627.602 1.363 0 0zm.98-.154c.049-1.587-2.507.807 0 0zm3.585 5.65c-1.413-3.087 1.262 1.43 0 0zm94.649.283c-.981-1.225 1.315.52 0 0zm.706-.097c-3.01-1.765 4.358-1.014 0 0zm.67-.655c-.309-.502-.309.503 0 0zm-101.135.369c-1.054-2.916 1.005.653 0 0zm1.256-.72c-1.11-3.743 1.417 2.87 0 0zm.785.45c-.692-3.61.856-.779.087.476l-.048-.262-.039-.215zm-3.578-.057c-.76-2.444 1.212 2.105 0 0zm5.242.248c-1.009-2.69.734-.443 0 0zm53.652-.424c.265-2.274-.662-7.04-.443-2.083-.905.98-.018-7.213 3.63-4.17 2.806.62 8.453-1.147 9.5.05-1.553-.202-.71 4.253-2.291 3.57 1.306-5.855-5.963-2.325-9.393-3.375-2.18-.123.347 7.854-1.003 6.008zm52.93.51c.551-1.296.203.9 0 0zM9.585 27.535c-1.155-3.06.606-1.366.317.489l-.317-.489zm1.835.123c-.493-1.834.97 1.324 0 0zm1.658.345c-1.44-2.286.987-.13 0 0zm1.936-.294c-.772-2.18 1.127 1.11 0 0zm99.427.241c.21-2.01 2.122.167 0 0zm2.374-.33c.946-.74.736.773 0 0zm-108.698-.32c-1.18-2.838 1.182 1.182 0 0zm-.966.114c-.937-2.174.826-2.557 0 0zm1.762-.115c-1.124-1.318.251-1.117.265.014zm-3.807-.128c-1.84-1.905-.273-2.29 0 0zm.51-.056c-1.055-1.851-.552-4.438.04-.941zm110.464.023c.422-1.155.605.713 0 0zm-109.733-.64c-.822-5.547.819 1.939 0 0zm105.584.45c-1.591-.166-2.346-.999-.13-.675-2.96-1.349 4.59.586.13.676zm2.627.079c-.145-1.89 1.076.019 0 0zm7.393-.15c-.161-.602.663.377 0 0zM3.966 26.425c-.98-1.82 1.587 1.637 0 0zm111.561-.094c-.256-1.167 1.194.88 0 0zm-1.591-.041c-.322-1.022 1.273.627 0 0zm-1.031-.286c-.94-1.58 1.327.64 0 0zm-3.083-.147c.607-.568.794.587 0 0zm-64.727-.411c-.608-1.665 1.164 1.362 0 0zm68.398.157c-.488-1.203 1.169.946 0 0zm8.328.116c-.978-2.246 1.082.372 0 0zm-78.725-.27c-.787-1.326 1.285.87 0 0zm.898-.057c-1.172-2.383 1.324 1.36 0 0zm47.253.094c-1.083-2.198.823-1.396 0 0zm13.27.173c-.876-1.848.692-1.129 0 0zm-58.539-.26c-.488-1.716.677.55 0 0zm21.945-.105c-.173-1.325.607.844 0 0zm27.73.023c-1.243-2.021 6.174-5.186 1.656-3.774-2.606 2.702-1.79.348-2.01-.397-1.496-2.22 2.7-3.094 3.7-2.53-.663 2.436 1.088-1.064-.002 2.027-.522-.412 1.58.515 1.185.038 1.972-1.401-1.314 3-2.827 2.144-3.417 1.552 1.951 2.959-1.702 2.492zm1.382-3.789c-.168-.89-.616.314 0 0zm-1.634-.747c1.46-1.565-.09-1.497 0 0zm1.283-.792c-.19-1.67-.952 2.772 0 0zm.69.126c-.309-2.456-.636 2.293 0 0zm.636-.798c.411-2.132-1.191 2.552 0 0zm5.934 6.018c-.18-1.328.886 1.1 0 0zm1.818.01c-.578-1.217.742.674 0 0zm5.625.118c-1.683-.88.967-.708 0 0zm.64-.342c.062-2.226 1.132 1.418 0 0zm2.904.224c1.383-1.05-.305.99 0 0zm-68.12-.18c-.561-1.718.674.758 0 0zm31.274.098c.344-1.818.323.589 0 0zm12.537-.116c-.501-2.017.889 1.27 0 0zm3.43-.026c.21-.882.308 1.267 0 0zm.717-.075c-1.245-2.663 1.137 1.052 0 0zm2.672.142c-.808-1.617 1.252 1.034 0 0zm7.677.2c-.823-1.471.956.101 0 0zm-55.435-.352c-.952-1.858 1.012.642 0 0zm.849-.14c-.124-1.673.838 1.652 0 0zm16.655.364c-.378-.723.674.261 0 0zm22.733 0c-.894-1.71.87-.333 0 0zm3.45-.095c-.063-1.268.745.966 0 0zm4.679-.464c-.457-1.966 1.226 2.195 0 0zm.85.38c-.43-1.376.964.899 0 0zm.736-.248c-.432-1.842 1.046 1.84 0 0zm1.266.322c-1.425-.621-.618-1.99 0 0zm.695-.045c-.48-1.155.622.602 0 0zm1.845.07c-.251-1.176.484.575 0 0zm-17.477-.224c-.903-1.338.983.505 0 0zm3.062.176c-1.249-2.393 1.046-1.44 0 0zm13.649-.246c-.462-1.405 1.09 1.292 0 0zm18.537.248c-.894-1.801 1.02.047 0 0zm-73.384-.45c-.268-1.607.867 1.444 0 0zm.963.117c-.723-2.258.793-.65 0 0zm21.265-.277c.99-3.517 3.409 2.398 0 0zm12.623.368c-.347-.914.858.548 0 0zm.904-.047c-1.076-1.332 1.33.705 0 0zm3.056-.085c-.623-2.498.972 1.334 0 0zm.865.255c-.8-1.182.693-.205 0 0zm.746-.29c-.657-1.615.777.961 0 0zm13.904.227c.003-.987.594.8 0 0zm-82.69-.106c.387-.777.591.335 0 0zm64.841-.237c-.09-1.594.698 1.391 0 0zm.804.16c-.453-.835.74.529 0 0zm27.842 0c.27-.796 1.128.597 0 0zm1.15-.039c-1.003-1.61 1.147.65 0 0zm-95.856-.034c-.046-.953 1.084.927 0 0zm56.04.052c-1.054-2.973 6.61-4.75 2.989-1.097-1.564-.29-2.312.18-2.989 1.097zm45.946-.043c.616-.57.47.551 0 0zm-99.465-.154c-.507-.975 1.275.51 0 0zm82.096-.23c1.346-.904 1.133.466 0 0zm-89.656-.114c.608-.862.634.582 0 0zm91.827-.079c-.174-.803.856.856 0 0zm-87.554-.072c-.005-.952 1.302 1.002 0 0zm1.81.048c-.743-1.386.97-.029 0 0zM111.803 24c-1.831-.373 1.671-.995 0 0zm.718-.002c.078-1.484 1.804.931 0 0zm9.5.144c.428-.474.496.29 0 0zM11.544 23.96c.992-.734.765.444 0 0zm6.767-.09c-.327-1.238 1.209 1.081 0 0zm2.812 0c-1.24-1.386 1.203.447 0 0zm68.71-.077c.372-.651.351.958 0 0zm11.451.038c-.73-1.352 1.37 1.015 0 0zm12.944.126c-1.785-1.48 1.077-.485 0 0zm5.79-.09c-.156-1.094.93.83 0 0zm.743.03c-.184-1.254.93.861 0 0zm-18.61-.148c-.059-.8 1.311.768 0 0zm-91.5-.063c.481-.982.767.394 0 0zm93.05-.157c-.476-1.273 1.12 1.169 0 0zm.868.077c-.535-1.318.783.515 0 0zm14.512.09c.684-.861.76.61 0 0zm-31.253-.3c-1.005-1.112.817.147 0 0zm14.966-.109c-.184-1.321.883 1.086 0 0zm11.952-.011c-.966-1.516 1.33.808 0 0zm-27.644-.054c-.358-1.695.902 1.172 0 0zm-.78-.053c.47-.552.616.57 0 0zm3.256 0c-.182-.581.755.57 0 0zm11.942 0c.47-.552.616.57 0 0zm11.207.034c-.56-.842 1.256.32 0 0zm-92.498-.278c.474-.735.813 1.096 0 0zm46.446.158c-.544-1.124.838.396 0 0zm44.617-.064c-.232-1.548.88.115 0 0zm7.661-.17c.51-1.238.188 1.018 0 0zm2.746.192c.744-.574.968.585 0 0zM9.57 22.92c.344-.768 1.03.649 0 0zm61.503.003c-1.018-2.585 3.28.052 0 0zm17.356-.07c.413-.744.681.33 0 0zm-77.396-.117c.364-2.134 1.134-.272 0 0zm9.83-.149c-.346-.915.86.547 0 0zm89.693.065c-.903-1.013 1.709.551 0 0zm5.076.004c.77-.568.77.567 0 0zm2.313.008c-.714-1.016.903.158 0 0zm-91.018-.149c.17-1.142 1.274.494 0 0zm59.909-.067c-.484-1.07 1.367.956 0 0zm15.062.07c.003-.987.593.8 0 0zm10.605-.119c-.38-1.008 1.365 1.112 0 0zm1.167.063c-.602-1.715.807.647 0 0zm2.88-.159c-.591-1.396 1.022.973 0 0zm-87.836.084c.3-1.53 1.113.79 0 0zm60.992-.108c.298-1.259.455.843 0 0zm-80.383-.114c1.488-1.675 1.18.535 0 0zm1.327-.342c.294-1.349.294 1.349 0 0zm55.817.262c-.518-1.24 1.326.926 0 0zm21.254.05c.029-.943.792.853 0 0zm14.558.02c.832-.282.559.446 0 0zm19.173-.125c.615-.975.717.582 0 0zM17.53 21.755c1.488-.7-.699.856 0 0zm2.658.175c-.077-.92 1.147.463 0 0zm7.45-.043c.309-.503.309.503 0 0zm60.837-.07c-.112-.853.563.777 0 0zm.914.07c.308-.503.308.503 0 0zm10.727 0c.28-1.002.982.789 0 0zm1.292-.053c.623-.85.067.633 0 0zm10.012-.01c1.213.857.048-.369 0 0zm-77.14-.041c1.748-.852 1.403.476 0 0zm78.236-.064c-.496-1.121.793.504 0 0zm-97.392-.278c-.72-.934.781-.037.365.164zm7.236.233c-.298-.87.718.52 0 0zm80.584-.107c.186-.699.6.825 0 0zm-2.093-.02c-.517-.823 1.195.495 0 0zm6.02-.099c-.553-1.922 1.33.77 0 0zm.926-.011c-.428-1.204.792.479 0 0zm7.658.086c.116-1.075.549.34 0 0zm.563-.095c.46-.617.387.753 0 0zM7.845 21.24c1.618-1.68 1.58.157 0 0zm1.175.17c-1.157-.898 2.164.552 0 0zm11.227-.079l.265-.156zm71.333.086c-.223-.894.737.53 0 0zm22.52-.042c.914-.58-.175.56 0 0zm-102.81-.249c.176-1.146.413.917 0 0zm6.598.163c-.301-.765.765.301 0 0zm1.316-.11c-.347-.915.859.547 0 0zm68.268.068c.47-.552.616.57 0 0zm1.55-.066c-.565-1.952.827.598 0 0zm12.78.113c-.212-.806.96.385 0 0zm1.73-.004c-.71-.896 1.397.446 0 0zm2.78-.11c.59-.608-.122.706 0 0zm2.938.006c.16-1.014 1.613.892 0 0zm1.476-.006c-.533-1.103 1.383.927 0 0zm-101.15-.147c.07-1.323.853.925 0 0zm3.757.01c.546-.711.46.538 0 0zm10.41.076c.286-.496.167.485 0 0zm5.74-.012c.327-1.158.901.922 0 0zm37.036-.062c-.275-.69 1.564.813 0 0zm47.326-.198c.398-1.075.273 1.263 0 0zm-91.827.16c.281-.994.694.34 0 0zm.958-.016c.287-.496.168.485 0 0zm66.733-.097c.164-1.978.56.98 0 0zm2.045.037c-2.873-1.168 1.773-.054 0 0zm12.543.039c-.914-1.526.782.4 0 0zm.485-.1c-.354-1.149 1.348 1.16 0 0zm1.152-.052c-.478-1.465.752.732 0 0zm7.017.173c.309-.503.309.502 0 0zm2.427-.2c.42-.914.171 1.14 0 0zm5.835.152c.39-.696.708.754 0 0zm-111.009-.335c-1.694-1.425 2.197.853 0 0zm5.454.229c-.51-.96 1.242.76 0 0zm72.447.017c.004-.988.594.799 0 0zm2.238-.059c-.235-1 .91.734 0 0zm21.619.104l.087-.27zm-95.22-.3c.092-.765.473.974 0 0zm62.45.05c-.178-.696.771.419 0 0zm22.584-.043c.47-.551.617.57 0 0zm7.504.045c-.309-.872 1.375.337 0 0zm5.523-.045c.308-.502.308.503 0 0zm-99.81-.092c-.72-1.57.775.193 0 0zm4.602-.03c-.308-1.038.99.722 0 0zm1.675.008c-.189-.73 1.105.583 0 0zm2.791-.014c.662-.607.573.472 0 0zm-16.347-.04c.8-1.145 1.9.377 0 0zm4.278-.088c.617-.57.47.552 0 0zm2.174-.252c-.415-1.259 1.114 1.077 0 0zm8.107.222c.42-1.596.837-.656.087.174zm44.985-.041c-.947-1.047 1.16.587 0 0zm35.281.066c-2.767-.892 1.634-.234 0 0zm7.814-.052c.446-.822.909.693 0 0zm2.918.057c.438-.532.33.522 0 0zm-100.225-.138c-.82-.994 1.248.523 0 0zm7.572-.17c-.452-1.482.793.82 0 0zm9.97.131c-.22-.963.79.64 0 0zm57.97.08c1.512-1.204.995.482 0 0zm-65.135-.159c.33-.522.438.532 0 0zm54.406-.003c-2.55-.358 1.22-.433 0 0zm1.789.003c-.393-.67.749.304 0 0zm32.146.047c-.269-.923 1.123.367 0 0zm-100.28-.17c-1.72-.908 2.372-.06 0 0zm13.275-.014c.003-.987.593.8 0 0zm89.725.05c.162-1.707.91-.295 0 0zm6.603.006c-.128-.86 1.115.308 0 0zm-99.698-.228c-.267-.903 1.088.884 0 0zm68.45.058c-.104-.898 1.772.828 0 0zm19.661-.072c-.36-1.1 1.163.944 0 0zM7.714 19.716c1.43-1.074 1.309.739 0 0zm68.71-.27c.41-1.128.179 1.37 0 0zm36.274.203c-.174-.94 1.07.359 0 0zm-103.58-.054c.485-.934 1.216.74 0 0zm.98.03c.756-1.125-2.503-.156.178-1.4.695.144.66 1.714-.178 1.4zm11.75 0c-.438-1.022 1.182.342 0 0zm8.088-.03c.682-1.08.545.624 0 0zm71.202-.013c.47-.552.616.57 0 0zm1.285.013c-.48-.688 1.221.451 0 0zm.783.033c.254-.775.93.599 0 0zm10.256-.031c.024-1.81 1.059-.383 0 0zm-97.25-.389c-.78-1.882 1.234 1.31 0 0zm59.445.124c1.217-.824-.674.949 0 0zm2.625.13c.012-.951.764.805 0 0zm9.836-.165c-.607-1.673 1.885 1.346 0 0zm17.383.2c-.543-1.126.838.395 0 0zm16.518-.428c.291-1.571.291 1.572 0 0zm-115.04.3c-.587-.98 1.485.595 0 0zm5.888-.113c-.063-.93.857.915 0 0zm2.446.07c.403-.558.196.528 0 0zm59.667.034c-.39-1.393.846-.335 0 0zm16.942-.104c.101-.898 1.053.927 0 0zm8.075.084c.594-.743.767.543 0 0zm6.058-.158c.37-.652.35.957 0 0zm4.757.187c-.634-.893 1.292.524 0 0zm-41.992-.18c.004-.988.594.799 0 0zm11.05-.059c-.245-1.117.957.967 0 0zm9.582.003c.616-.793.616.794 0 0zm.766.065c.226-3.146 1.667.377 0 0zm1.022-.193c.334-1.095.36 1.122 0 0zm2.964.169c-.59-1.032 1.146.465 0 0zm9.613-.108c-.536-1.125 1.28 1.112 0 0zm6.067.064c-.266-1.128.88.933 0 0zm-90.012-.086c-1-2.069 1.061.698 0 0zm11.47-.046c.417-.49.187.687 0 0zm73.244.071c.33-.522.438.533 0 0zm15.989-.02c-.964-1.282 1.399.377 0 0zm-112.67-.17c-.811-.897 2.044.702 0 0zm3.311-.122c-1.629-1.203-1.135-2.661 0 0zm9.65.117c-.266-1.129.88.933 0 0zm.962-.185c-.345-1.29.94 1.058 0 0zm1.57.293c.695-.266-.057.293 0 0zm.855-.04c.247-.586.882.824 0 0zm54.657-.01c.003-.987.593.8 0 0zm14.326.048c-2.85.095.724-.85 0 0zm18.651.004c-.214-.915 1.201.72 0 0zm-10.98-.124c-.19-.717.897.38 0 0zm5.659.011c-.638-1.03 1.354-1.465 0 0zm-89.274-.321c.427-.7.172.91 0 0zm52.087.177c-1.17-.957 1.534.368 0 0zm4.822-.023c.559-1.097.778.46 0 0zm22.477-.06c-2.635-1.404 2.143.092 0 0zm7.333.041c.146-.594.969.703 0 0zm8.685-.007c.38-.284.234.485 0 0zM7.2 18.556c-.547-.824.98.187 0 0zm1.31-.125c-.433-1.196 1.169.943 0 0zm5.93.169c-.677-1.566.971.367 0 0zm59.047-.235c.297-1.13.297 1.13 0 0zm15.454.137c.85-.887.587.74 0 0zm15.914-.02c-.46-1.372 1.002.926 0 0zm8.352.011c.101-.78.756.552 0 0zm8.046.064l-.336.439zm-109.396-.181c-.534-1.1 1.276.83 0 0zm1.732.05c.428-.475.497.288 0 0zm80.07-.207c-.19-1.411.872 1.215 0 0zm6.316.136c.412-1.194.544.778 0 0zm5.657.12c.013-.938.75.658 0 0zm-96.513-.15c.743-1.433.912.45 0 0zm10.94.019c.045-.968 1.308.554 0 0zm50.584.008c-.927-.588.765-.318 0 0zm2.206-.115c1.367-.966-.29.761 0 0zm7.361 0c.197-.758.61.942 0 0zm7.402.014c1.49-1.175.446.862 0 0zm2.158-.079c-.546-1.446 1.119 1.103 0 0zm4.663.065c.014-1.045 1.417 1.085 0 0zm15.632 0c-.591-.797 1.378.729 0 0zm-89.11-.116l.29-.104zm1.574.076c.19-1.227.781.295 0 0zm69.234-.352c-.598-2.34 1.113 1.53 0 0zm.907.302c-.525-.946.965.709 0 0zm4.662.073c-.212-.806.96.385 0 0zm17.237-.004c-.543-1.125.838.395 0 0zM7.81 18.035c-.768-.96 1.176.584 0 0zm20.978-.182c.297-1.13.297 1.13 0 0zm43.48.157c-.508-1.764.803.512 0 0zm6.898.026c.004-.987.594.8 0 0zm33.206 0c.048-.835.791.806 0 0zm-99.328-.069c-.926-.587.765-.317 0 0zm98.567-.05c.33-.522.439.532 0 0zm8.11.002c1.036-.989.813.683 0 0zm1.308-.282c-.333-1.76.617 1.465 0 0zm-93.135.165c.682-1.08.544.624 0 0zm60.058.03c-.625-.904 1.043.37 0 0zm17.593-.03c.681-1.08.545.624 0 0zm-97.329-.345c-.917-1.177 1.634.939 0 0zm.707.195c.046-1.026.995.923 0 0zm11.18-.12c-.086-.972 1.24 1.22 0 0zm1.916.144c.684-.862.76.61 0 0zm66.54-.08c.052-.814.994.781 0 0zm5.62 0c.461-.753.462.755 0 0zm.925.108c-.402-.878 1.243.376 0 0zm4.31-.043c.616-.56.616.56 0 0zm4.758.043c-.517-.822 1.194.496 0 0zm6.252-.069c-.613-1.192.935.512 0 0zm-9.796-.102c.793-.587.606.568 0 0zm-89.244-.145c-.85-.822 1.09.223 0 0zm10.08-.138c-.063-1.53.736 1.314 0 0zm65.647.197c-.49-1.325 1.16.612 0 0zm5.495.004c-.281-1.104 1.29.657 0 0zm12.332-.01c-.613-.879 1.01.27 0 0zm1.591.012c-.28-1.268.82.239 0 0zm-90.513-.248c.404-.47.045.654 0 0zm63.943.114c-.342-1.008 1.07.535 0 0zm9.238-.089c.566-.562.688.713 0 0zm1.1-.028c-.087-.953 1.067.975 0 0zm23.039.074c.308-.502.308.503 0 0zM9.328 17.188c-1.819-1.057 1.19-1.188 0 0zm101.708-.04c-.188-.58.92.6 0 0zm1.66-.007c.38-.284.234.485 0 0zm6.984.052c-.57-1.05.765-.303 0 0zm-104.814-.095c.437-.47.651.303 0 0zm6.974-.152c-.122-1.047.768.714 0 0zm.891-.008c.04-.92 1.034.998 0 0zm1.306.123c.694-.266-.058.293 0 0zm3.473-.24c.42-.914.171 1.14 0 0zm60.734.208l.377-.142zm-67.989-.162c-.617-1.143 1.074.57 0 0zm60.58-.012c-.25-1.176.484.575 0 0zm4.354-.03l.232-.111zm.814-.132c.421-.914.172 1.14 0 0zm6.73.245c-.01-.85.826.441 0 0zm1.08-.032c-.281-.737 1.149.665 0 0zm5.76.029c-.414-.784 1.168.196 0 0zm6.157-.051c.078-1.039.756.877 0 0zm-79.242-.047c.357-.979 1.04.185 0 0zm62.485-.03c-.667-.913 1.341.274 0 0zm2.649-.108c-.167-.837.9.79 0 0zm5.449-.041c-.69-1.426 1.7 1.18 0 0zm1.443-.033c-.13-1.14 1.31 1.241 0 0zm6.538.062c-.325-1.1.882.917 0 0zm6.437.034c-.719-1.286 1.237.848 0 0zm-101.578-.11c-.5-1.225 1.528.859 0 0zm2.145.04c.118-.632.48.247 0 0zm69.35-.015c-.183-.58.755.57 0 0zm-70.627-.128c.47-.552.616.57 0 0zm2.299-.128c-.102-.97.994 1.152 0 0zm10.112-.011c.436-.113-.066-.262 0 0zm61.536-.053c.297-1.13.297 1.13 0 0zm-77.31.107c.305-1.7 2.173.269 0 0zm76.47-.11c1.396-.549-.726.706 0 0zm3.472.088c.292-.682.565.354 0 0zm2.35-.021c.615-.57.47.551 0 0zm-78.081-.089c-.744-1.386.97-.028 0 0zm9.369-.04c-.065-.641 1.317.364 0 0zm2.686.006c-.308-1.038.99.722 0 0zm58.362-.07c.306-.707.306.708 0 0zm8.813.065c.308-.503.308.503 0 0zm21.158.043c-.215-.916 1.201.719 0 0zm6.684-.03c.422-.757.585.414 0 0zm-36.04-.1c.693-.267-.058.293 0 0zm.662-.105c.306-.708.306.707 0 0zm22.676.073c.78-1.225.563.644 0 0zm-95.26-.095c-.45-.993.904.338 0 0zm13.847-.035l.115-.2zm.427-.36c.159-1.37 1.464 1.561 0 0zm63.291.353c.793-.587.607.568 0 0zm1.11.046c.03-.938.955.71 0 0zm2.408-.037c.141-.716.97.744 0 0zm20.704-.214c-.558-1.497 1.154 1.325 0 0zm-103.28-.054c-.756-1.153 1.527.904 0 0zm5.003.003c.111-.583.111.582 0 0zm-4.16-.083c-.06-.966.88.801 0 0zm10.722.089c.345-1.013.768.42 0 0zm92.398.007c.57-.917.843.676 0 0zm-89.193-.327c-.35-1.1.893.838 0 0zm74.76.185c-.182-.58.756.571 0 0zm-8.045-.128c.615-.56.615.56 0 0zm27.677-.218c.024-1.68.636 1.414 0 0zm-30.998.062c.78-.47.764.535 0 0zm1.437.071c-.625-.903 1.043.37 0 0zm25.126-.11c-.266-1.129.88.933 0 0zM9.134 15.086c-.617-1.262 1.611 1.151 0 0zm2.112-.013c-.063-1.53.735 1.314 0 0zm78.844.09c.447-.708.57.928 0 0zm16.094.096c-.025-.966.564.22 0 0zm8.553-.099c-.335-1.07 1.148.927 0 0zm3.131.067c.287-.496.168.486 0 0zm-107.55-.125c-1.735-1.2 1.314.305 0 0zm10.552-.163c.145-1.36.662.651 0 0zm73.563.055c.205-.7.596.086 0 0zm4.933-.09c.14-.839.7.986 0 0zm18.005-.007c-.246-1.28.861.89 0 0zm-29.554-.08c-.669-1.335 1.73.956 0 0zm17.918.026c.439-.532.33.522 0 0zm10.792.014c.388-.778.592.334 0 0zm-96.36-.27c.606-.569.792.587 0 0zm68.965 0c.616-.56.616.56 0 0zm4.74-.075c.09-.645.576.836 0 0zm21.25.075c.616-.56.616.56 0 0zM93.18 14.45c.434-.867.355.442 0 0zm-81.804-.078c-.45-.993.905.338 0 0zm93.954-.157c-1.529-1.037 1.359-.056 0 0zm10.579-.087c-.417-1.401 1.204 1.515 0 0zm-105.443.03c-.446-.958 1.168.653 0 0zm77.707-.152c-.29-1.322.939 1.083 0 0zm-67.892-.135c.28-1.149.506.91 0 0zm71.918.075c.403-.558.196.528 0 0zm-3.206-.193c-.473-.673 1.168.554 0 0zm.774.056c.003-.988.593.799 0 0zm3.006-.135c.371-.652.35.957 0 0zm-80.85-.124c-.27-1.265.873 1.156 0 0zm79.778.065c-.346-1.206.72.833 0 0zm-81.388-.123c-.031-1.08.838.984 0 0zm.86.017c-.268-.904 1.088.883 0 0zm79.232.044c.004-.988.594.798 0 0zm.58-.116c.497-.29.429.474 0 0zm-71.18-.09c-.136-.892 1.123.59 0 0zm84.974-.17c.3-.915.3.915 0 0zm-15.437-.044c-.248-1.124 1.307 1.055 0 0zm3.048-.156c.404-.47.045.654 0 0zm-2.24-.065c.003-.987.593.8 0 0zm1.676-.073c-.019-.937.678.806 0 0zm-81.43-.175c.38-.717.631 1.064 0 0zm1.853.129c.168-.486.286.496 0 0zm78.625-.044l.266-.156zm13.202.044c.462-.54.462.54 0 0zm-91.308-.247c-.601-1.17.802.594 0 0zm.705-.02c1.074-.773-.511.832 0 0zm-2.182.01c.615-.56.615.56 0 0zm8.43-.255c.3-.916.3.915 0 0zm82.803.058c-.158-1.095.929.829 0 0zm.975.003c-.266-1.13.88.932 0 0zm-84.992-.061c.77-.568.77.567 0 0zm72.146-.193c-.469-.779 1.217.604 0 0zm11.188-.192c.297-1.13.297 1.13 0 0zM13.103 12c-.763-1.443 1.062.653 0 0zm-2.01-.111c-.046-.953 1.084.927 0 0zm2.783-.055c-.454-1.056 1.097.799 0 0zm4.31.063c.309-.502.309.503 0 0zm73.692.024c.206-.7.597.085 0 0zm-72.585-.11c-.543-1.124.838.396 0 0zm71.878-.05c.078-1.039.755.877 0 0zm1.472-.054c.831-.545-.19.639 0 0zm-80.46-.258c.298-1.13.298 1.13 0 0zm4.982.128c.825-.753.04.738 0 0zm1.373-.024c-.847-.836 1.548.447 0 0zm82.664-.026c.315-.727.506.48 0 0zM14.004 11.3c-.248-.86 1.15.269 0 0zm2.914-.075c.004-2.04.745.762 0 0zm-5.475-.122c-.793-1.54 1.128.69 0 0zm6.392-.134c.598-1.04.344.732 0 0zm73.98.032c.36-.549.557.565 0 0zm.787.043c-.399-1.008 1.01.494 0 0zm8.56.003c-.845-1.625.948-.205 0 0zm-88.834-.41c-.288-1.751.599.993 0 0zm.639.064l.265-.156zm.959-.02c.265-1.306 1.558.197 0 0zm2.337-.206c-.276-1.548.865 1.002 0 0zm84.236.142c.308-.503.308.502 0 0zm-83.001-.331c-.169-.985.939.81 0 0zm-.684-.01c-1.037-1.28 1.406.503 0 0zm-3.331-.312c-.298-1.446.884 1.252 0 0zm1.723.183c.633-.379-.082-.277 0 0zm77.61-.112c-.032-1.08.838.984 0 0zm6.93-.004c.248-.643.627.861 0 0zm-85.008-.447c.409-1.127.178 1.37 0 0zm78.86.256c.047-.836.79.805 0 0zm-79.754-.376c-.57-.965 1.414.97 0 0zm86.272.128c.196-.529.403.558 0 0zm-84.48-.308c-.45-1.483.795.82 0 0zm78.924.032c.156-.91 1.094 1.563 0 0zm.841.066c.073-1.008.712.827 0 0zm2.48.082c.462-.54.462.54 0 0zm1.277.024c.264-1.333.778.352 0 0zm-.586-.2c-.097-.952.643.46 0 0zm-1.683-.336c-.082-.924.817.94 0 0zm-82.014-.053c-.445-1.036.725.428 0 0zm82.712-.083c.113-.884.558 1.064 0 0zm-1.43.008c.36-.55.557.565 0 0z')

                sketchGroup.append('g').attr('id', 'sketchTrees')
                    .attr('transform', 'translate(-10, 260) scale(2.5)')                    
                    .append('path').classed('barsSketch sink land', true)
                    .attr('d', 'M1.314 35.723c.476 1.164 2.81.311 3.785-.492 2.622-.068 3.948-2.244 5.475-3.637-.618 1.513-1.507 3.235 1.008 2.445 1.353-.275 4.759-2.206 2.174.074-1.444 1.373 3.401.168 1.516 1.478 1.123-.21 1.52-1.145 1.116.372 1.22-.263 1.023-.982 1.87-.145 1.694-.597 3.716.526 5.256-.15-1.601-2.123-2.015-4.262-1.306-6.82.907-.963.85-6.692 1.943-2.905 1.323 2.184 2.943 5.327.974 7.691-2.866 1.515.199 3.316 1.461 1.49 1.112-.802 1.198 1.518 2.185-.446-.987 2.48 1.216-.68.687.907 1.186-.094.544-1.266 1.589.023 1.238-.056.27-2.923.444-3.85-1.493-1.156-3.635-2.378-4.369-4.083-1.771-1.489-.009-4.039-.6-5.673.846-.963-.54-2.121.88-2.343-1.733-1.809 2.32-3.325.276-1.686-1.273.161 1.158 2.827-.797 2.163.898 1.47-.663 1.912.381 3.535-1.529.648-.324 2.848.066 3.658.712 1.381 2.728 3.35 4.339 3.731-.291-1.535-2.923-3.276-2.8-4.059 1.305.923 3.865 4.722 2.596.897-.288-.862-3.268-4.141-2.046-3.48.893 1.03 2.948 4.691 2.42 1.221-.398-1.333.76-5.127-.17-5.11-1.731.774 1.7-1.84.643.482.276 1.269-.697 6.66 1.21 4.093-.724.679-1.473 5.627.012 3.034 1.647-2.387-2.878 5.148.793 1.955 1.535-1.257 2.675-3.377 3.28-4.841.5-1.43.58-4.079-.36-3.906.641-1.308-.007-3.077-.56-3.4.735-.959-.385-1.656-.393-1.13-1.316-.535-1.65-3.07-.446-.742 1.304.445.43-1.55-.185-1.166-.075-1.689.031-2.73-1.15-3.146.529-2.482-1.655-2.54-2.047-5.05-.822-1.077-.993 2.997.237 2.252.158 1.566-.972-.511-.683 1.69.103 2.41-.484-.87-.58 1.424-.69.23.914-3.301.015-2.687-1.523 1.094-.446 3.963-1.227 4.115-1.377-1.967 1.56-4.18 1.496-6.488.494-3.499 1.36 1.95 2.312 1.293.118 1.363 1.54 1.506.746 3.228 1.984-.206.307 3.12 1.888 3.49.472 2.566 1.249 4.54 1.645 7.16.206 2.386-.52 4.753-2.286 6.512-1.029 2.116-4.33 2.479-3.468 5.576-1.018 2.664 3.212-.175 2.295.875-1.046.476 2.412.18 2.67-.006 3.276-.704.64-2.36-1.287-2.277-3.078-1.98 1.175-3.58 2.146-5.155 2.473-1.822.913-6.118.54-8.873-.711-1.189-2.286-4.211-.356-1.436.52-.32.963-5.208-1.503-3.847-.243-1.73-.63-5.392 1.502-5.553.91.793 1.852-.458 3.036.724 1.685.164 1.613 3.24 1.658 3.654 2.92-1.747 4.68 3.913 2.396 4.578-.658-.205-1.031 1.137-1.635-.13-2.608 2.13-4.207 5.154-3.717 8.634-.707 2.632 3.032.898 3.074 3.48 3.23 2.54-2.07 4.454-3.316 6.31.951 1.127 5.806-1.232 3.727.142 1.326.233 2.338-1.275 1.588.602-7.709.122-15.46.066-23.13.676-6.884-.243-13.775.295-20.65-.265-.756.098-2.035 1.154-.283-.687zm8.223-.425c-.4-1.3-3.478 1.386-1.139.245-.312 1.211.745-.191 1.14-.245zm.384.307c.684-2.013-1.937 2.04 0 0zm.612-.06c.179-1.512-.813 1.833 0 0zm-4.128.065c2.68-1.646-4.073.687-.502.224zm.625.224c-.752-.375-1.065.584 0 0zm4.241-.58c-.635-.482-.2 1.58 0 0zm.456.304c-.377-1.49-.227 1.443 0 0zm1.33.163c-.823-1.078-1.54.835 0 0zm1.594.097c-.474-.698-.42.675 0 0zm-.552-.533c-1.021-.265.207.715 0 0zm13.134-.03c-.275-.855-.382 1.165 0 0zm11.878-.142c-.614-.826-2.294 1.047-.135.294l.108-.109zm-25.523-.055c-.66-.51-1.04.247 0 0zm-5.543-.211c-.84-.268-.143.345 0 0zm.839-.437c.488-1.136 1.897-2.739.141-.954-.398.591-.958 2.141-.141.954zm3.64.185c-.459-.908-.32 1.12 0 0zm-1.772.01c-.431-.687-.719.71 0 0zm12.692-2.61c-.382-1.822.71-2.854.444-.418-.164 1.922 1.136-2.396.472.575-.868 1.756-.265 2.796.919.777 1.212-2.429-.364-4.971-1.71-6.707-.282-1.108-.695 3.227-1.38 4.145-.473 1.267 1.305 5.969 1.283 2.304zm-9.955 1.998c.864-.863-1.976.963 0 0zm28.186-.677c2.122-.943 3.164-3.457.981-4.88-.63-2.03-3.66-.561-4.54.29-.962.76-4.173 2.53-1.663 3.608.947.528 4.214 1.933 2.701-.666-1.313-2.271.056-1.265.614.223-.022-1.224 2.494-3.555.82-1.16-.801 1.771-.228 2.295.748.65.165.702-2.545 4.163.339 1.935zm-.702-13.87c2.26-2.056.652-4.168-.102-6.23-1.64 2.134-1.726 4.989-.94 7.476.115 1.696.576-1.306 1.042-1.246zm2.517-2.572c.667-3.377-2.295 2.516-.43.572l.228-.286.202-.286zm1.367-.176c.46-1.136 1.01-6.063-.386-2.848-1.171 2.94-.221.108-.075-1.293-.483.15-1.532 4.159-.835 1.036.511-3.177-1.896 2.957.756 2.297.297-1.586 1.557-4.34.627-1.18-.338.1-.62 3.005-.087 1.988zm1.386-.654c.111-2.938-1.063 2.02 0 0zm-.682-.5c.718-1.414.597-3.647-.122-.728-.465.935-.548 2.694.122.729zm-2.92-.343c-.46-.064-.275 1.43 0 0zm-3.312-1.024c-.513-.333.267 2.487.19.343zm3.081.748c1-1.304-.07-3.217-.384-.549-.242.326.015 1.69.384.55zM42 13.511c.567-3.169-1.007 2.728-.104.423zm-1.926.036c.81-1.186 1.363-2.52 1.084-.473 1.525-.403 1.01-6.457-.284-2.69-.192 1.184-1.831 5.058-.887 1.943.778-1.119 1.193-5.314.123-1.939-.12.572-1.736 4.557-.036 3.159zm1.136-2.287c.292-1.13 1.022-2.965.464-.66.076.14-.705 1.585-.464.66zm-2.888 1.798c.235-1.06 1.568-4.808-.044-4.487-.385 1.246-1.618 6.081-.295 2.484.215-1.58 1.06-3.396.406-.728.182.617-1.826 3.626-.067 2.73zm1.231-1.581c.903-1.283.685-4.986-.123-1.813-.462.871-.728 4.828.123 1.813zm3.279.293c-.582.325.138-2.482-.683.06.03.432.785.47.683-.06zm.247-.649c.116-.79-.676.96 0 0zm-5.474-1.03c.492-2.427-1.352 2.948 0 0zm.441-1.786c-.296-.53-.376 1.177 0 0zm-1.978 15.612c-1.237-.728.4-.804-.307-1.434.817-.119 1.274 2.967.307 1.434zm-8.122-2.01c-.084-1.229 2.436-.182.326-.22.185.564-.318 1.188-.326.22zm6.325-.423c-.438-1.71 1.739-1.418 1.002-.306-.124-2.063-.95.485-1.002.306zm-5.857-2.081c-.34-1.77 1.04-.087 1.377-1.522 1.02.825-.634-.116-.45 1.547-1.023-1.024-.249-.877-.927-.025zm2.855-.143c-.756-1.05 1.6-3.352 1.255-1.301-.674-1.321-.906 1.088-1.255 1.301zM28.2 16.398c-1.275-1.461 2.56-5.042.419-1.992-.515.27.171 2.497-.419 1.992zm3.388-1.76c.99-2.395 1.844-.489.522-.13-.112-.64-.566 1.273-.522.13zm3.03-1.461c-1.965-1.18 1.173-.41 0 0zm-2.06-1.884c.014-2.008 2.366.584.533-.5.076-.088-.629 1.34-.532.5z')
                
                sketchGroup.append('g').attr('id', 'sketchKombi')
                    .attr('transform', 'translate(870, 317) scale(2.1)')                         
                    .append('path').classed('barsSketch source transport', true)
                    .attr('d', 'M0 12.842c1.4-.389 2.874.016 4.299-.204-.026-.457-.987-1.032-.838-1.815-.379-1.192-1.825.442-2.72-.155-1.358-.44.6-1.34-.06-2.242C.46 7.316.676 6.18.73 5.053c.2-1.267.393-2.593.99-3.738C2.618.22 4.18.439 5.427.165c4.229-.283 8.471-.11 12.706-.163 2.243.026 4.523-.009 6.723.473 1.153.84 1.326 2.485 2.363 3.49 1.015 1.701.744 3.734.795 5.621 1.28.3-.696.063-1.083.115-.545-.02-2.118-.145-2.027.263.975.303 2.586-.032 3.229.197-1.066.136-2.204-.173-3.222.2 1.044.36 2.277.103 3.393.129.207.099-1.265.133-1.718.103-.76.228-2.027-.318-2.403-.173.324.797-1.248 1.908-.753 2.168h5.25c-.863.85-2.292.051-3.384.348-8.432.034-16.865.032-25.297.049v-.143zm6.94-.424c.965-.544 1.358-2.094.615-2.957-.522-.513-1.37-.05-.558.452.619.642.01 1.787-.76 2.02-.92.37-2.024-.327-1.982-1.344-.093-.763 1.457-1.586-.017-1.348-.948.306-.85 1.784-.364 2.502.466.825 1.47 1.103 2.35.9.251 0 .535-.028.716-.225zm13.52.188c-.359-.686-1.226-1.259-.982-2.135-.574.362-1.245-.353-1.965-.047l-6.59.024c-.8.331-2.165-.72-2.92.217-.024.75-.454 1.334-.774 1.92 1.22.145 2.486.003 3.723.048 3.17 0 6.339.024 9.508-.027zm2.399-.137c1.526-.724 1.494-3.229-.069-3.903-1.455-.787-3.478.609-3.172 2.265.109 1.37 1.677 2.113 2.903 1.733.12 0 .226-.058.338-.095zm-1.742-.631c-1.361-.57-.7-2.95.756-2.76 1.559-.02 1.922 2.531.346 2.847a1.575 1.575 0 01-1.102-.087zm1.148-.145c1.534-.488.387-3.114-1.006-2.28-.76.252-.75 1.728-.452 1.761-.85-1.283 1.538-2.587 2.078-1.083.713 1.185-1.524 1.853-1.672 1.517.308.208.712.21 1.052.085zm-1.06-.384c-.55-.49.226.366 0 0zm1.042-.052c1.556-1.07-1.718-2.4-1.258-.483.148.493.817.86 1.258.483zm-.699-.485c-.3-1.116 1.345.195 0 0zm.953.535c.365-.41-.614.449 0 0zm-.99-1.699c-.496.12-.483.399 0 0zm.945.145c-.587-.412.308.343 0 0zM6.17 11.75c1.492-.412.583-2.961-.839-2.333-1.387.397-.781 2.83.652 2.382.064-.01.125-.034.187-.05zm-.873-.084c-1.554-.513-.145-3.063 1.123-1.998 1 .681.132 2.491-1.035 2.023l-.06-.018zm-.155-.277c-.182-.299-.366-.183 0 0zm1.088-.11c1.532-1.313-2.185-2.116-1.221-.243.24.402.853.578 1.221.242zm-.654-.419c-.672-1.194 1.301.016 0 0zm.903.443c-.237-.032-.245.348 0 0zm.169-1.17c-.328-.284.348.513 0 0zm-1.34-.399c-.173-.155-.33.422 0 0zm1.052.048c-.511-.335.298.335 0 0zm4.43.788c-.256-.122.091.256 0 0zm8.387-.015c-.117-.221-.087.288 0 0zm-16.686-.15c-.48-.237-2.208-.273-1.814.087.597.036 1.25.173 1.814-.086zm.24-.166c.079-.341-.302.518 0 0zm16.626-.09c.115-1.428 1.534-2.547 2.946-2.244.485.172 1.974.932.952-.068-.744-.27-1.568-.079-2.352-.145l-1.643-.024c-.072-.894.116-1.839-.134-2.7-.305 1.483.231 3.056.025 4.443-.898.786-2.247.205-3.336.387-1.621.01-3.243.012-4.865.02-.289-1.345.128-2.65 0-4.07.243-1.503-1.448-.832-2.354-.977-2.582-.002-5.164.012-7.745.05C.699 6.439.62 8.087.934 9.692c1.316.433 2.488-.384 3.706-.51 1.267.201 2.877-.43 3.905.5.64.928 1.775.464 2.703.541 2.703-.032 5.406-.005 8.109-.073zm-15.9-2.943c.377-.572 2.607.077 1.015.017-.339.004-.677-.005-1.016-.017zm-.164-.302c.5-.157 1.487-.303 1.758.046-.585.037-1.179.067-1.758-.046zm.014-.264c.467-.155 1.542-.325 1.712.039-.57.027-1.145.04-1.712-.04zm2.1-.111c-.524-.329-1.479.113-1.817-.244.545.064 2.283-.17.796-.117-.401.075-1.484-.194-.453-.194.599.156 1.801-.18.476-.1-.397.048-1.421-.134-.411-.131.362.089 1.81-.147.647-.132-.383.109-1.73-.14-.577-.107.77-.158 2.992-.322 2.402 1-.207.35-.763.101-1.062.025zm1.02-.006c.745-1.18-1.63-1.19-.844.005.27.1.571.057.844-.005zm-3.134-1.23c.524-.047 1.454-.263 1.759.045-.586.037-1.18.067-1.759-.046zM3.28 5c.526-.08 1.457-.244 1.77.058-.588.034-1.19.087-1.77-.058zm-.635 5.05C2.076 9.63.64 9.782.53 10.13c.697.068 1.443.19 2.113-.08zm.832-.033c.769-1.736-1.346.858 0 0zm5.166.127c.193-.793-1.506-1.1-.666-.135.109.251.458.216.666.135zm16.092.012c0-.378-.265.059 0 0zm-.49-.188c-.285-1.62-2.498-2.63-3.819-1.573-.44.314-.965 1.481-.266.514 1.12-1.109 3.416-.746 3.827.882-.005.094.15.292.259.177zm.276-.299c.998-.417 3.276.65 3.29-.952.115-.6-.255-1.03-.67-.762-.314-.777-.24-1.703-.49-2.45-.37 1.099.177 2.465-.102 3.661-.135.932-2.506-.269-2.086.724l.036-.039zm-11.133.034c.929.272 2.157-.167 1.614-1.33-.202-1.103.326-2.95-.3-3.622l-3.667.027c.034 1.638-.017 3.279.078 4.916.758.053 1.517-.006 2.275.009zm5.608-2.487c-.016-1.068.47-3.03-1.334-2.464-.936.073-3.009-.528-2.597 1.047 0 1.288-.009 2.577.04 3.865 1.29-.066 2.617.227 3.879-.148l.012-2.3zm-3.723-.689c-.744-.964 1.667-1.434.814-.237a.742.742 0 01-.814.237zm.489-.142c1.168-.541-.952-.637-.269.084l.137-.033zm.359-.801c-.193-.244-.284.165 0 0zm10.374 2.293c0-1.135.215-3.144-1.476-3-1.868-.31-3.765-.126-5.647-.155-.626.848 1.92.486.838 1.02-1.19-.393-1.323 2.19-.14 1.937 1.163.012 2.49-.365 3.517.347.425 1.042 1.378 1.893 2.592 1.341.65-.142.208-1.024.316-1.49zm-15.488.903c-.286-.522-.241.513 0 0zm8.282-.028c-.244-.546-.173.514 0 0zm8.51-1.917c-.453-.805.184-2.927-1.317-2.587-.288 1.323 1.505 1.998 1.307 3.382.194.707.09-.76.01-.795zm-.283.804c.314-1.37-.976-.296-.107.275l.06-.083zm-.167-1.178c.108-.865-.694-.109 0 0zm-.429-.39c-.386-.453.21.745 0 0zm-6.714-.487c-.298-.247-.386.224 0 0zm.056-.167c-.22-.275-.323.226 0 0zm5.964-.69c-.132-1.013-1.404-.457-2.104-.588h-4.709c.247 1.132 1.906.203 2.747.5 1.304-.023 2.63-.014 3.888.365.126-.009.243-.15.178-.277zm-4.86-.335c.024-.604.416.366 0 0zm-10.593.265c-.143-1.118-1.824-.16-2.6-.472-2.393.018-4.789-.057-7.18.076.047.997 1.726.147 2.43.434 2.45 0 4.9.007 7.35-.038zm-2.32-.183c-.249-.494.506.08 0 0zm6.501.108c-.113-.897-1.385-.263-2.029-.432l-1.89.017c.424 1.143 2.065.175 3 .466.306-.01.613-.025.92-.051zm-2.057-.22c.236-.39.18.405 0 0zm6.092.082c-.76-.701-1.84-.108-2.74-.305h-1.185c.45 1.177 2.135.128 3.096.478.248-.015.72.158.83-.173zm-2.09-.087c.224-.328.164.38 0 0zm2.343.03c-.074-.807-.187.753 0 0zM7.304 2.928C6.78 1.612 8.42 1.335 9.327 1.554c.57-.077 1.519.015 1.465.796.65-1.053-.772-1.039-1.456-.968L1.793 1.36C1.65 2.14.37 4.017 1.767 4.054c1.778.09 3.558-.009 5.337.032.486-.143.09-.82.2-1.158zm3.62 1.03c.34-.453-.365-1.572-.25-.487 0 .142-.077.874.25.487zm.402-1.067c-.554-1.568 1.576-1.414 2.537-1.38 1.384-.09.455 1.973 1.037 2.282-.085-.78.617-2.648-.704-2.434h-3.19c.193.733-.28 2.399.32 2.548.06-.337-.016-.678 0-1.016zm4.159-1.311c.987.15 2.63-.564 3.191.433v2.015c.642-.626.122-1.856.102-2.5-1.128-.449-2.633-.138-3.696-.012-.038.83-.01 1.669-.019 2.504.744-.521-.137-1.791.422-2.44zm-.934 1.308c.496-1.481-1.418-1.334-2.31-1.327-1.153.062-1.179 1.85-.54 2.414.896.004 2.112.299 2.835-.207.063-.29.02-.587.015-.88zm3.987 1.083c.347-1.13-.022-2.915-1.536-2.372-1.384-.437-2.106 1.087-1.486 2.163.817.592 1.944.172 2.893.223zm.738-.541c.088-1.069-.523.327-.08.491.238-.038-.007-.365.08-.491zm-8.934.484c.545-1.093-.055-2.736-1.452-2.22-1.313-.376-2.072 1.512-1.02 2.235.796.31 1.656-.144 2.472-.015zM21.345 2.84c.788-1.378-2.14-1.879-1.799-.29-.24.858.16 1.799 1.165 1.479.846.134.63-.668.634-1.189zm2.122 1.09c1.028-.448-.142-2.028-.673-2.328-.973-.332-1.587.41-1.293 1.33-.244 1.492 1.017 1.02 1.966.998zm3.325-.12c-.556-.554-1.127-2.45-1.766-2.069.404.675.918 2.068 1.766 2.07zm-1.418-.068c-.465-.579-.883-2.274-1.705-1.827.01.903.64 2.081 1.705 1.827zm-5.937-.169c-.142-.078.138.38 0 0zm-.001-.28c-.151.067.195.342 0 0zm-8.541-.71c-.181-.646-.091.566 0 0zm8.327.014c-.295-.472-.221.467 0 0zm.066-.621c.467-1.117-.74-.089-.067.353.063-.108.05-.233.067-.353zm.793-.488c-.415-.079-.325.096 0 0zm.75 0c-.411-.065-.296.079 0 0zm.554.006c-.199-.186-.105.146 0 0zm.278 0c-.199-.186-.105.146 0 0zm.39 0c-.2-.186-.106.146 0 0zm.75-.007c-.164-.049-.511.034-.144.017zm.472.007c-.199-.186-.105.146 0 0zm.308-.003c-.443-.106-.163.12 0 0zm.333 0c-.443-.106-.162.12 0 0zm-2.502-.167c-.348-.2-.069.152 0 0zm.335 0c-.443-.105-.163.12 0 0zm.555-.003c-.393-.068-.283.082 0 0zm1.475-.002c-.544-.048-1.026.048-.205.018-.038-.002.536 0 .205-.018zm-4.646-.128c2.117-.01 4.234.01 6.35-.049C24.445.02 22.797.385 21.443.169A194.198 194.198 0 005.816.243c-1.23.092-2.502.207-3.62.774.655.584 2.212.01 3.198.217 4.58-.025 9.16-.043 13.74-.044z')

                sketchGroup.append('g').attr('id', 'sketchPlane')
                    .attr('transform', 'translate(850, 150) scale(2.1)')                         
                    .append('path').classed('barsSketch source transport', true)
                    .attr('d', 'M31.596 13.167c-3.616-.675-7.272-1.14-10.947-1.26-2.72-.321-5.376-1.076-8.116-1.236-1.548 1.446-3.528 2.4-5.669 1.932-2.14-.11-2.508-2.347-1.931-3.744-.793-.246-2.266-.197-.584-.188C3.424 8.082.446 7.563.019 5.665c-.27-2.201 2.367-3.672 4.257-3.98 2.693-.177 5.309.746 7.956 1.114C19.05 4.062 25.848 5.487 32.67 6.684l4.444-.467C39.097 4.35 40.493 1.91 42.538.132c2.098-.746 1.814 1.861 1.116 2.972-.425.918-1.149 3.081.74 2.287 1.532-.21 3.11-.483 4.643-.125-2.074.889-4.776-.004-6.455 1.778-1.417 1.634.632 3.261 2.268 2.354 1.351-.083 4.63-.36 4.754-.077-2.194.74-5.16-.12-6.535 2.038-1.843.88-3.965.898-5.948 1.298-1.83.263-3.671.524-5.525.51zm2.525-.246c3.08-.41 6.225-.704 9.148-1.834.838-1.752-3.7-.102-2.539-1.396.794.005 2.211-.332.58-.643-2.061-.501-4.223-1.54-6.358-.935-1.167.55-.08 3.562-1.822 2.598.623-1.61-1.65-2.856-2.554-1.398.761 1.16-.454.169-.822.19 1.895.854-2.543-1.375-1.488.656-.187 1.674-3.255 1.223-4.713 1.39-.973-.064-.849-.01-.16.125-1.7.158-2.988-.71-3.796-2.118-.495-.632-2.104-1.049-.524-1.33 1.556-1.08 3.381-1.298 5.155-.737 1.696-.273 3.35-.37 5.102-.396.872-.087 3.407-.361 1.17-.627-8.428-1.548-16.8-3.426-25.267-4.75-1.003-.088-3.158.468-3.115 1.088C3.124 2.042 5.67 4.081 3.66 3.959c-.57-1.159-1.348.251-2.407.02-2.575.554-.627 3.06.917 3.556C4.746 8.962-.855 5.5 1.526 6.822c1.1 1.259 3.236 1.494 4.337 1.456-.34.114 1.878.7 2.629.786 1.047.177 3.482.51 3.612.702-.171.735 2.636 1.042 3.597 1.19 1.448.338 3.775.38 4.785.685-1.1.1 4.068.36 1.776.125-2.3-.437 1-.016 1.661.081 2.97.313 5.9 1.021 8.88 1.182a8.69 8.69 0 001.318-.108zm-2.588-.088c-.854-.084-3.95-.73-1.505-.307 2.497.439 5.04.12 7.531-.194-1.982.377-4.005.645-6.026.501zm0-.227c-1.931-.32-3.889-.481-5.81-.86 2.27.27 4.534.581 6.8.875-.33.024-.66.007-.99-.015zm1.481-.002c.773-.163.33.111 0 0zm2.214-.185c.386-.212.162.148 0 0zm.623-.062c.386-.213.162.147 0 0zm-4.38-.053c-.941-.032-2.33-.37-.608-.17.612.02 2.15.282.608.17zm-3.35-.072c.385-.242.144.164 0 0zm9.914 0c.385-.242.143.164 0 0zm.345-.062c.296-.204.05.165 0 0zm-.425-.24c.707-.279 1.88-.284.484-.038-.18.04-1.441.31-.484.039zm-9.055.051c.459-.207.17.145 0 0zm4.348.001c.802-.11 3.846-.292 1.495-.026-.497.038-.997.073-1.495.026zm-4.844-.062c.296-.204.05.166 0 0zm-.374-.062c.296-.204.05.165 0 0zm11.223 0c.296-.204.05.165 0 0zm-7.875-.118c-.802.015-1.782-.38-.414-.133.546.166 3.305-.011 2.622.184-.736.029-1.474.015-2.208-.051zm8.12.057c.254-.202.133.148 0 0zm-10.754-.126c.386-.242.144.164 0 0zm7.732 0c.385-.242.144.164 0 0zm-10.336-.082c.714-.252.542.056 0 0zm1.777.017c-.754-.373 1.34.252 0 0zm4.514-.25c.076-.888.498-1.476.183-.26.01 0-.288.889-.183.26zm-1.24.101c-.093-.236 1.175.22 0 0zm-1.918-.034c.253-.202.133.148 0 0zm-9.804-.18c-3.264-.8 2.176.22 0 0zm9.06.054c.295-.204.05.165 0 0zm11.016-.026c.824-.186 1.533.172.297.046.304-.101-.426.086-.297-.046zm-.779-.17c1.002-.319 1.609-.038.233-.016l-.162.05zm1.808-.01c-.185-.232 1.07.38 0 0zm.405-.1c-.394-.293 1.152.401 0 0zm-8.603-.181c.112-.658.308-1.022 0 0zm-13.593.056c-.754-.022-2.3-.427-.656-.212.517-.01 1.995.431.656.212zm22.398.011c-.521-.4 1.264.354 0 0zm-25.859-.08c-.684.058-4.188-.931-1.913-.6.293.199 2.882.739 1.913.6zm26.14-.082c-1.488-.294-.076-.33.46.033l-.188.019zm-25.485-.124c-2.552-.213-.478-3.939 1.366-3.15-2.178-.443-3.482 3.36-.851 3.252l-.212-.038-.303-.064zm2.307.004c-.612-.021-2.51-.398-.811-.257.588-.046 2.603.554.811.257zm.948-.052c-1.396-.431 1.756.404 0 0zm22.461-.027c-.87.02-1.809-.62-.412-.175.818.078 2.068.26.412.175zm-27.068-.03c.295-.204.05.166 0 0zm-.316-.06c.253-.202.133.147 0 0zm17.973-.084c.128-.457.056.435 0 0zm-18.318-.16c-.812-.135-1.57-.825-.344-.223.193.061 1.319.49.344.224zm1.21-.033c-1.86-1.088 3.108-3.396.364-1.67-.43.418-.715 1.112-.364 1.67zm.885.088c.295-.204.05.165 0 0zm-1.797-.14c-.776-.193-1.622-.905-.347-.32.139.014 1.063.428.347.32zm1.067-.162c-1.09-1.068 2.252-2.414.075-1.194-.353.182.4 1.54-.075 1.194zm.866.147c-1.567.014.789-2.437-.6-.865-.427.339 1.132.927.6.865zm14.528-.052c-.105-.277.5.417 0 0zm-12.607-.105c.296-.204.05.165 0 0zm1.188-.013c-.662-.896.375-.126 0 0zm-2.358-.078c-2.001-.525 1.66.097.413.037zm2.558-.263c-1.084-.217-.019-.51 0 0zm-5.585.02c.743-.097-.352-1.598.488-.37.042.262-.228.618-.488.37zm-1.352-.227c.296-.204.05.165 0 0zm-1.734-.082c-.297-.225.84.312 0 0zm7.763 0c.163-.14.137.314 0 0zm-8.386-.125c.021-.204.837.292 0 0zm22.118-.166c-.802-.529 1.24.527 0 0zM8.422 8.856c-1.07-.063-1.343-.475-.032-.141.79.084 1.776.502.404.205l-.372-.064zm.9-.114c.252-.202.132.148 0 0zm-.313-.062c.254-.202.133.148 0 0zm29.258-.11c-1.096-.348-1.108-.718-.04-.12.106-.05.804.55.04.12zM8.246 8.56c-1.18-.05-1.602-.438-.186-.126.185.022 1.122.338.186.127zm1.387.057c.253-.201.132.148 0 0zm-1.31-.25c.254-.2.133.149 0 0zm-1.145-.204c-.957-.166-1.895-.706-.383-.239.527.11 1.566.565.383.24zm-1.23-.044c-1.17.05-1.515-.225-.159-.123.19.022 1.043.48.159.123zm-2.66-.414C2.591 7.575.741 6.023 1.202 6.36c.192.253 2.93 1.53 2.086 1.345zm.843-.012c-.834-.184-3.475-1.903-1.494-.79.092.075 2.414.82 1.494.79zm2.453 0c-.645-.178-3.625-.44-1.544-.336.503.113 1.14-.066 1.544.336zm-1.312-.075c.296-.204.05.166 0 0zm1.259-.18c-.79-.107-3.39-.458-1.187-.337.389-.004 2.953.646 1.187.337zm18.813-.136c-.416-1.03.996-.137 0 0zm-.466-.056c-.532-1.208.988-.143 0 0zm-.562-.062c-.575-1.082.96-.112 0 0zm-.538-.102c-.575-1.076.882-.19 0 0zm-.587-.057c-.431-1.086.88-.16 0 0zM3.1 6.864c-.801-.29-1.214-.792-.105-.175.469.184.898.49.106.175zm19.492.075c-.362-1.115.823-.104 0 0zm-.524-.101c-.535-1.04.924-.154 0 0zm-.564-.065c-.6-1.13 1.002-.363 0 0zm-14.72-.06c0-.824.55-1.65.1-.29zm14.092-.136c-.474-1.076.837-.092 0 0zm-.566-.1c-.27-1.344.93.149 0 0zm-.421-.006c-.78-.98 1.064-.63 0 0zm-.571-.095c.47-.601-.703.028.02-.695.237.11.335.683-.02.695zm-.543-.105c.23-.235-.632-.466.124-.525.052.128.114.536-.124.525zM6.679 6.158c.097-.95.277-.168 0 0zm11.54-.015c-.438-.852.497-.764 0 0zm.139-.364c-.17.046.212.302 0 0zm-10.793.316c-1.087-.94.166-4.494 1.163-2.097.19.715-.127 2.48-1.163 2.097zm.9-.212c.21-.358-.011-2.196-.034-.893.53-1.128-1.381-2.597-1.043-.614-.01.65.049 1.954 1.077 1.507zm.009-.467c.053-.286.053.287 0 0zm-1.09-.385c-.17.045.212.302 0 0zm1.06-1.123c-.17.046.212.303 0 0zm.057-.325c-.538-.817.365.96 0 0zm9.155 2.526c-.615-.871.616-.82 0 0zM1.161 5.993c-.137-.282.375.441 0 0zm15.795-.028c-.574-1.015.971-.201 0 0zm.233-.572c-.243.183.386.544 0 0zm-.69.5c-.795-1.054.74-.476 0 0zm.07-.522c-.233-.022.396.902 0 0zM6.535 5.78c-.282-.99.376.096 0 0zm9.255-.012c-.627-1.07.977-.486 0 0zm.218-.32c-.104-1.068-.104 1.069 0 0zm-2.152-.117c-.74-1.109.987-.511 0 0zm.201-.428c-.143.212.215.536 0 0zm-.854.265c-.28-1.536.903.58 0 0zm-.963-.089c-.324-.66.425-.776 0 0zm-.469-.063c-.4-.878.432-.188 0 0zm.87-.184c.382-1.108.35.904 0 0zm-1.605.045c-.46-1.057.885-.452 0 0zm-.593-.133c-.667-.838.882-.557 0 0zm-.629-.189c-.55-1.12.956-.142 0 0zm-.623-.052c-.462-1.011.887-.116 0 0zM4.514 3.444c-.585-1.86 2.287 1.309.248.422l-.248-.422zm.786.494c-.544-.224-.213.146 0 0zm-.39-.205c-.296-.503.119.42 0 0zm2.322-.038c-.264-1.238.328.889 0 0zM9 12.463c.937-.064 1.281-.398.16-.134-.645 0-1.18.31-.16.134zm-1.58-.042c-.254-.202-.133.148 0 0zm-.437-.065c1.71.478 5.62-.748 3.4-2.79-1.137-.865-3.07-.376-2.548 1.268-.025.415-1.476 1.3-.852 1.522zm.565-.2c.384-.538 2.829.135.816.012a6.26 6.26 0 01-.816-.011zm2.4-.173c.296-.204.05.165 0 0zm.45-.028c-.056-.485.69-.413 0 0zm-2.73-.1c.825-.497 2.71.3.711.023a13.315 13.315 0 01-.71-.022zm.796-.208c-1.868-.27 1.574-.032.592.023l-.386-.013-.103-.005zm-.156-.226c-1.419-.24 1.17-.037 0 0zm2.402-.179c-.141-.927.376-1.345.217-.193.097-.035-.385.673-.217.193zm-2.773-.147c.05-.818.212-2.145.228-.602-.019.171.075.62-.228.602zm-2.32.759c-.39-.866-.84.157 0 0zm.737.075c.902-.371 1.281-1.594.359-.26-.85-.32-.432-.213-.594.19-.706-.573-.762-2.036-.512-.354.096.303.419.563.747.424zm13.316-.378c-.184-.13-.112.145 0 0zm-.777-.128c-.299-.121-.14.13 0 0zm5.86-.005c-.827-.054-.62.063 0 0zm-2.805-.057c-.298-.121-.14.13 0 0zm-.345-.06c-.184-.129-.112.145 0 0zm4.154-.082c1.493-1.48-.25-3.54-1.904-3.85-2.101-.87-1.792 1.036-1.334 2.305-.408 1.268-1.82.952-1.69-.016.338.995.148.952-.52.676 1.36 1.623 3.018-1.483 1.99-2.697 1.457.96.143 2.58.156 3.503 1.044.393 2.218.069 3.302.08zm-2.572-.075c-1.942-.462 2.832.152.45.032l-.226-.014zm2.376.04c.115-.559.637-.451 0 0zm-1.79-.222c-1.085.12-1.14-.53-.085-.155.89.14 1.526.39.085.155zm-.214-.272c-1.872-.415 1.524-.453.32-.213-.995-.01 1.629.58-.083.246zm2.46-.395c.037-1.4.432.106-.034.136l.026-.1zm-3.04-.237c.088-.694.143-2.252.237-.664-.06.16.1.649-.236.664zm-11.754 1.178c-.253-.202-.133.148 0 0zm14.84 0c-.254-.202-.133.148 0 0zm-4.225-.083c-.464-.454-.136.321 0 0zm5.19.024c-.184-.13-.113.144 0 0zm-15.775-.124c-.184-.13-.112.144 0 0zm.062-.25c-.183-.13-.112.144 0 0zm9.08-.103c-.262-.556-.65-.691 0 0zm13.788-.13c.244-.557.066-2.373-.008-.815.008-.467-.117-1.245-.118-.251.816-.833-1.242-1.563-.569-.377-.756.503-.287 2.104.695 1.444zm-21.425.022c-.527-.504-2.074-1.088-1.02.062.33.233.675-.098 1.02-.062zm-.771 0c1.197-.296-.194.219 0 0zm-.047-.167c.253-.201.132.148 0 0zm-.187-.124c.253-.202.132.148 0 0zm14.85.393c-.332-.258-.309.164 0 0zm-5.658-.178c-.284-.082.258.34 0 0zm5.974.01c-1.525-.179-.378.063 0 0zm.39-.1c-.253-.202-.132.147 0 0zm-20.466-.209c-.204-.64-.181.587 0 0zm.632-.424c-.29-1.561-.072.98.007.05zm13.342.445c-.278-.217.284.49 0 0zm6.222.143c-.574-.284-.469.17 0 0zm-.12-.205c-.546-.398-.412.138 0 0zm16.009.005c-1.332-.673 3.21-.555.46-.527-.51.042-3.25-.071-2.337.408.551-.35 1.258.21 1.877.119zm-1.056-.318c.295-.204.05.165 0 0zm-15.072.1c-1.156-.393.697.4 0 0zm17.719.026c-.299-.121-.14.13 0 0zm.466-.064c-.386-.212-.162.148 0 0zm.437-.063c-.386-.212-.162.148 0 0zm-18.71-.12c-.738-.387.304.332 0 0zm3.813-.276C30.117 8.77 27.68 8 28.045 8.32c.768.31 1.725 1.348 2.48 1.146zm-.395-.053c-.952-.397-1.699-1.138-.312-.283.134.076 1.165.722.312.283zm15.042.136c-.713-.159-.241.108 0 0zM7.591 9.19c-.244-.637-.041.504 0 0zm12.192-.027c-.26-.332.037.318 0 0zm2.305-.181c-.35.05.166.502 0 0zm5.72.26c-.253-.202-.133.148 0 0zM5.712 8.802c-.44-.02-.236.54 0 0zm22.158.252c-.253-.202-.132.148 0 0zm1.002-.018c-.539-.863-3.793-1.108-1.267-1.362 2.048-.276 4.11-.436 6.138-.846 1.277-.126 2.583-.114 3.821-.492-4.258.385-8.504.885-12.753 1.356.264.19 1.568.79.636.236.655.304 2.562 1.276.943.37.857.14 1.574.862 2.482.738zm-1.448-.418c-.368-.473 1.297.598 0 0zm5.695.133c-.384-.88-3.355-1.192-1.284-.382.17.02 1.793 1.216 1.284.382zm-.981-.274c-1.11-.464-.871-.684.119-.046.748.402 1.18.72-.12.046zM19.91 8.69c-.673-.176-1.935.031-.36-.333.765-.61-2.567.07-.51.529.273.063.719.118.87-.196zm-.438.162c-.251-.307.826.39 0 0zm-.93-.076c-.982-.478.526.423 0 0zm-13.126-.04c.137-.282-.375.442 0 0zm35.75-.77c.835-1.907-4.413-.197-2.08.228.617.304 2.14 1.123 2.08-.228zm-1.965.186c-1.874-.638 1.668.379.096.03zM39.428 8c-2.263-.915 2.147.675 0 0zm.224-.183c-1.402-.541 1.223.293 0 0zm.08-.248c-.404-.376.96.522 0 0zm-8.475 1.146c.96-.33-1.284.237 0 0zM6.454 8.685c-.852-.353-1.291-.05-.158 0l.104.04zm20.278.007c-.394-.506-.273.024 0 0zm3.445-.324c-.253-.202-.132.148 0 0zM5.392 8.309c-.184-.13-.112.144 0 0zm25.424-.014c.337-.258-.92.2 0 0zm-2.494-.165c.863.207 3.48-.204 1.294-.464-.35-.112-2.864.25-1.294.464zm.655-.152c1.206-.325 1.445.273 0 0zm.265.265c-.253-.202-.132.148 0 0zm.748 0c-.253-.202-.132.148 0 0zm8.088-.308c-.498-.737-3.112-1.095-1.023-.466 1.152.527.38.336-.344-.042.15.155 1.921 1.11 1.367.508zm-3.473.184c-.298-.122-.14.13 0 0zm.576-.084c.096-.244-.985.345 0 0zm-2.494-.058c-.592-.165-.592.233 0 0zm3.008-.047c-.386-.213-.162.148 0 0zm6.616-.452c.247-1.27-.402 1.33 0 0zm-10.466.37c-.535-.432-.012.272 0 0zm4.193.021c-.253-.202-.132.148 0 0zm.437-.062c-.253-.202-.133.148 0 0zm-4.532-.136c-.348-.296 2.723-.08.951.06.694.107 4.056-.417 1.848-.697-1.104.038-3.341.183-3.732.594.068-.041 1.497.234.933.043zm2.708-.262c2.526-.343-1.275.314 0 0zm-2.027-.004c.915-.14 2.818-.108.818.037-.432.039-2.122.017-.818-.037zm2.701-.223c.296-.204.05.165 0 0zm-3.996.504c-.183-.13-.112.144 0 0zm3.928-.125c-.183-.13-.112.144 0 0zm-5.611-.062c-.184-.13-.112.144 0 0zm8.948-.066c-.253-.202-.132.148 0 0zM21.573 7.37c-.253-.201-.133.148 0 0zm17.333 0c-.253-.201-.132.148 0 0zm.376-.062c-.3-.121-.14.13 0 0zm.404-.064c-.387-.212-.163.148 0 0zm-.372-.366c3.002-.386 5.92-1.257 8.93-1.59-2.443-.054-4.891.375-7.282.724.7.01 4.283-.466 1.912-.04-2.074.297-4.17.462-6.233.814-.432.202 1.107.2.084.021 1.012-.17 3.455-.04 1.233.258-.659.14-2.67-.248-.795.09.767.163 1.409-.22 2.151-.277zm.188-.195c.296-.204.05.165 0 0zm-5.894.314c-.299-.122-.14.13 0 0zm.731-.081c.14-.258-1.063.345 0 0zm3.758-.044c-.299-.122-.14.13 0 0zm4.222-.015c.03-.348-.9.406 0 0zm-7.34-.047c-.298-.122-.14.13 0 0zm7.57-.283c-.169.046.212.302 0 0zm-4.423-.088c-.184-.13-.113.144 0 0zm1.014-.115c.22-.197-1.173.235-.015.002zm-.795-.079c-.543-.224-.212.146 0 0zm.53-.06c-.455-.23-.178.153 0 0zm1.122-.001c-.386-.212-.162.148 0 0zm-.509-.238c1.842.342 3.416-1.106 3.191-2.96.31-.988 2.09-3.453-.149-2.665-1.53 1.084-2.305 2.938-3.71 4.186-.93 1.132-2.1 1.982.668 1.44zm-.208.177c-.253-.201-.132.148 0 0zm1.185 0c-.253-.201-.132.148 0 0zm-.498-.062c-.298-.121-.14.13 0 0zm5.89-.308c-.184-.13-.112.144 0 0zm.408-.066c-.299-.121-.14.13 0 0zm.31-.063c-.253-.201-.132.148 0 0zm.312-.062c-.253-.202-.132.148 0 0zm.312-.062c-.253-.202-.133.148 0 0zm.312-.063c-.254-.201-.133.148 0 0zm-4.587-.282c-.17.046.211.303 0 0zM4.349 3.858c-.669-.464-.235.238 0 0zm-2.603-.042c-.253-.201-.133.148 0 0zm-.657-.145c-.36-.287-.308.497 0 0zm1.032.083c-.299-.121-.14.13 0 0zm.404-.064c-.386-.212-.162.148 0 0zm40.835-.093c-.17.046.212.302 0 0zm-40.32.011c-.09-.243-.127.26 0 0zm1.184-.25c-.296-.502.12.42 0 0zm39.497-.98c-.416.73-.142 1.044 0 .003zm.076-.465c-.17.046.211.303 0 0zm.124-.499c-.17.046.212.303 0 0zm.063-.25c-.17.047.211.303 0 0zm.167-.543c-.356.431.053.45 0 0z')

                sketchGroup.append('g').attr('id', 'sketchWaste')
                    .attr('transform', 'translate(840, 320) scale(3)')                         
                    .append('path').classed('barsSketch source waste', true)
                    .attr('d', 'M.984 7.92c0-.01-.005-.069-.013-.13l-.013-.113-.112-.003c-.1-.002-.116-.004-.151-.022a.21.21 0 01-.065-.053c-.022-.03-.026-.043-.037-.135a14.933 14.933 0 01-.049-.721l-.016-.341-.02-.465c-.004-.124-.01-.253-.012-.286-.002-.032-.01-.21-.016-.396a28.778 28.778 0 00-.016-.405C.462 4.813.454 4.64.45 4.469a26.726 26.726 0 00-.016-.381 104.989 104.989 0 00-.064-1.335l-.006-.1L.3 2.596a1.826 1.826 0 01-.137-.147 1.096 1.096 0 00-.1-.108C-.004 2.289 0 2.306 0 2.128v-.16h.118a1.2 1.2 0 00.263-.016.537.537 0 00-.047-.066c-.06-.077-.063-.088-.039-.114a.642.642 0 01.13-.097c.004 0 .034.035.065.077l.08.105.024.028.11-.108c.06-.059.127-.119.148-.134.024-.017.037-.032.037-.043 0-.01-.02-.062-.043-.116-.078-.18-.076-.251.007-.306.02-.013.036-.015.108-.013.077.002.086 0 .1-.015a.116.116 0 01.143-.024c.043.027.064.091.088.266.003.026.01.049.015.05.013.005.02-.043.026-.182l.005-.113h.079a.69.69 0 01.101.006c.02.005.022.01.022.04 0 .052-.026.292-.031.287a1.022 1.022 0 01-.01-.13c-.004-.136-.009-.152-.045-.151-.044 0-.053.02-.065.147-.005.05-.014.11-.02.132-.012.048-.006.062.028.062.026 0 .124.028.2.057l.052.02-.004-.036c-.003-.033-.002-.036.008-.025.007.006.018.03.026.054.017.052.032.06.056.028l.04-.049a.402.402 0 01.15-.09c.044-.012.06-.002.085.05a.37.37 0 00.078.097l.057.054-.005.047a.477.477 0 01-.009.057c-.008.02.011.033.05.032.052 0 .068-.01.1-.06.032-.05.066-.07.122-.07.045 0 .053.007.085.07a.17.17 0 00.04.054c.02.014.027.014.141-.001.044-.006.057.001.074.043.028.066.065.086.171.093.097.006.121-.001.125-.036.005-.05-.008-.06-.431-.32A86.794 86.794 0 01.778.454 2.74 2.74 0 01.58.312C.57.305.578.29.635.205.728.068.776.01.799.003c.05-.013.08.003.566.3.478.293.505.31.647.423.085.067.123.091.145.091.073 0 1.167.693 1.271.805.02.02.02.021.015.154-.005.145-.03.327-.054.404-.019.057-.058.102-.1.113-.045.012-.057.03-.083.115a7.962 7.962 0 01-.051.162.958.958 0 00-.035.135c-.01.07-.022.292-.028.49l-.012.4-.016.556c-.004.173-.012.405-.016.516l-.016.457c-.004.14-.011.336-.016.436-.012.285-.031.827-.031.9v.065h.082c.099 0 .201.016.269.043.064.026.15.091.198.15.07.088.133.235.133.312 0 .05-.013.037-.028-.03-.048-.205-.24-.369-.475-.404a.545.545 0 00-.322.06.593.593 0 00-.189.19.539.539 0 00-.046.345.5.5 0 00.272.358c.088.043.16.058.264.053a.513.513 0 00.493-.385.295.295 0 01.023-.069c.015-.014.009.063-.009.12a.583.583 0 01-.42.413.718.718 0 01-.284-.013.564.564 0 00-.097-.016c-.026 0-.033-.004-.038-.019a.589.589 0 00-.079-.09.554.554 0 01-.176-.344.601.601 0 01.334-.617l.059-.032.005-.3.014-.908a143.816 143.816 0 01.072-2.994v-.03h-.872l-.002.17c-.003.146-.005.172-.016.184-.012.012-.015.012-.044-.002-.044-.022-.052-.042-.047-.12a1.418 1.418 0 000-.148l-.005-.084H1.19l.002.157c.001.139 0 .16-.012.178-.018.028-.049.029-.066.003a.715.715 0 01-.04-.227 1.011 1.011 0 00-.008-.097c-.004-.013-.027-.014-.34-.014-.186 0-.338.002-.34.006a.828.828 0 00.003.1l.018.378.017.337.012.262c.004.114.011.264.016.334l.015.305a54.378 54.378 0 00.04.766 18032.519 18032.519 0 00.044.794c.02.37.068 1.282.086 1.689l.01.22.024.034a.294.294 0 00.057.056c.03.022.04.024.115.027.098.005.117-.002.117-.04 0-.033.013-.045.071-.068.11-.042.438-.135.522-.147a.268.268 0 00.07-.025c.046-.024.076-.022.1.008.009.011.02.02.026.02.02 0 .05.046.063.097l.027.113.014.064.366.004c.202.002.369.006.372.009.005.006-.125.012-.392.02-.194.004-.316.013-.324.021-.003.003-.001.01.004.015.023.023-.003.079-.075.155l-.039.042-.325.012-.39.011c-.064 0-.067 0-.067-.017zm.346-.07c.07-.004.181-.007.248-.007H1.7l-.005-.046c-.032-.326-.034-.34-.057-.363-.016-.017-.049-.016-.104.003a3.64 3.64 0 01-.345.08c-.171.036-.197.044-.197.066 0 .02.027.178.04.243l.01.042.08-.005c.044-.003.138-.01.208-.013zm1.907-5.707c.001-.059 0-.115-.002-.125L3.23 2H.048v.254l1.593-.002 1.594-.002zM.988 1.956c.149-.006.357-.011.463-.011.147 0 .193-.003.196-.01l.03-.105.029-.096-.017-.014a.898.898 0 00-.336-.12 4.711 4.711 0 01-.109-.018l-.022-.004v-.08c0-.097-.012-.23-.024-.266-.018-.054-.062-.063-.132-.025-.043.023-.05.025-.11.02-.08-.005-.096 0-.11.028-.019.034-.015.067.016.154.06.165.067.188.067.21 0 .025-.019.044-.049.052-.05.012-.218.181-.258.26l-.019.037h.058c.031 0 .179-.005.327-.012zm2.073-.18c.014-.014.047-.056.074-.092a.967.967 0 01.08-.095.164.164 0 00.032-.035c0-.007-.097-.068-.354-.22a13.362 13.362 0 01-.329-.203A1.756 1.756 0 002.33.987c-.002.002.077.08.177.173a31.495 31.495 0 01.42.399.864.864 0 01.087.092c.021.032.022.044.007.105-.006.023 0 .046.01.046a.105.105 0 00.031-.026zm-.158-.195a52.695 52.695 0 01-.755-.648 5.536 5.536 0 00-.651-.492C1.127.193.867.031.838.031c-.011 0-.03.013-.05.034a.592.592 0 00-.09.138c0 .007.06.047.23.156.072.045.384.237.664.407a36.982 36.982 0 01.948.6c.254.166.391.253.4.253.002 0-.014-.017-.037-.038zm.147 5.892a.39.39 0 01-.292-.29c-.014-.055-.012-.091.014-.174a.439.439 0 01.22-.244c.04-.02.052-.022.132-.022.078 0 .092.002.133.021.09.043.17.143.188.235.003.02.005.039.004.04A.137.137 0 013.425 7a.414.414 0 00-.138-.146.487.487 0 00-.183-.052c-.116 0-.232.07-.274.163a.315.315 0 00.154.403c.049.024.058.026.136.026.078 0 .086-.002.14-.027a.355.355 0 00.161-.155c.017-.039.032-.048.032-.019 0 .043-.071.161-.127.21a.35.35 0 01-.149.07c-.063.014-.063.014-.127 0z')

                d3.selectAll('.barsSketch').classed('faded', true)

        // 3. Add methods and set intro
            addProfileMethods()
            vis.baselineChart.methods.introEmissionsTitle()

        // X. Bar chart methods 
            function addProfileMethods(){
                // Update commentary content
                vis.baselineChart.methods.updateCommentary = (scene, duration = 250, delay = 0) => {
                    commentaryTitle.html(vis.commentary.baselineChart[scene].title).style('opacity', 0).transition().duration(duration).delay(delay).style('opacity', 1)
                    commentaryText.html(vis.commentary.baselineChart[scene].content).style('opacity', 0).transition().duration(duration).delay(delay+ 100).style('opacity', 1)
                }

                // A. INTRO emissions counter            
                vis.baselineChart.methods.introEmissionsTitle = (title = 'intro', duration = 5000) => {
                    //  Setup scene
                    d3.selectAll('.grossEmissions, .offsetEmissions, .profileChart-yAxis, #profileChart-xAxis > *, #profile-xLabel > *').remove()
                    d3.selectAll('.barsSketch').classed('faded', true)
                    // i. Add and play the counter
                    mainTitle.text("In 2019, our community's greenhouse gas emissions were an estimated")
                        .attr('x', vis.baselineChart.dims.width / 2)
                        .attr('y', vis.baselineChart.dims.height / 2 - 45)
                        .attr('dy', 0)

                    volumeTitle.classed('glowText dark', true)                    
                        .attr('x', vis.baselineChart.dims.width / 2)
                        .attr('y', vis.baselineChart.dims.height / 2)
                        .transition().duration(duration * 0.5)
                        .tween('text', d => {
                            let i = d3.interpolate(0, vis.baselineChart.data.emissions.total);
                            return function(t) {  d3.select(this).text(vis.numberFormatters.formatComma(i(t))+' tonnes of CO2-e')   };
                        });

                    // ii. Fade in the commentary controls and update the commentary
                    d3.select('#profileChart-controls').style('opacity', 0)
                        .transition().duration(duration * 0.5).delay(duration * 0.5)
                        .style('opacity', null)
                    vis.baselineChart.methods.updateCommentary('intro', 2500, 2500)
                    commentaryBack.style('opacity', 0).on('click', null)
                    commentaryForward.style('opacity', 1).on('click', () => {
                        mainTitle.transition().duration(1000).attr('y', vis.baselineChart.dims.margin.top / 2)   
                        volumeTitle.transition().duration(1000).attr('y', vis.baselineChart.dims.margin.top  / 2 + 45)
                        vis.baselineChart.methods.renderGrossVsOffsetBarChart(vis.baselineChart.data.emissions.byGrossVsOffsets)
                    })
                } // end introEmissionsTitle()

                // B. GROSS VS OFFSETS SCENE
                vis.baselineChart.methods.renderGrossVsOffsetBarChart = (data, title, duration = 2000) => {
                    const barHeight = 50, xScaleVertHeight = vis.baselineChart.dims.height * 0.8
                                    
                    // Set X scale and position X axis and label                                
                    vis.baselineChart.scale.xScale = d3.scaleLinear().domain(d3.extent(data, d => Object.values(d)[0])).range([vis.baselineChart.dims.margin.left, vis.baselineChart.dims.width -vis.baselineChart.dims.margin.right])
                    xAxisGroup.attr("transform", "translate("+0+"," + xScaleVertHeight+ ")").call(d3.axisBottom(vis.baselineChart.scale.xScale));           
                    xAxisLabelGroup.attr("transform", "translate("+(vis.baselineChart.dims.width - vis.baselineChart.dims.margin.left)+"," + (xScaleVertHeight + 40) + ")")

                    // Draw Y axis as line without end ticks for Y axis Position Y axis 
                    yAxisGroup.append('path').classed('profileChart-yAxis', true)
                        .attr('d', d3.line()([
                            [vis.baselineChart.scale.xScale(0), xScaleVertHeight - 10],  
                            [vis.baselineChart.scale.xScale(0), xScaleVertHeight - 200]
                        ]))

                    // Add Gross and Offset bars
                    barsGroup.selectAll('.profileBars').data(data).enter().append('rect')
                        .attr('class',  d => Object.values(d)[0] > 0 ? 'grossEmissions profileBars' : 'offsetEmissions profileBars')
                        .attr('x', vis.baselineChart.scale.xScale(0) )
                        .attr('y', xScaleVertHeight - 120)
                        .attr('height', barHeight)
                        .attr('width', 0)
                        .style('opacity', 1)
                        .transition().duration(duration * 0.75)
                            .attr('x', d => Object.values(d)[0] > 0 ? vis.baselineChart.scale.xScale(0) : vis.baselineChart.scale.xScale(Object.values(d)[0]))                        
                            .attr('width',  d =>  vis.baselineChart.scale.xScale(Math.abs(Object.values(d)[0])) - vis.baselineChart.scale.xScale(0) )

                    // Add annotation labels
                    annotationGroup.selectAll('.profileLabels').data(data).enter().append('text')
                        .attr('class',  d => Object.values(d)[0] > 0 ? 'grossEmissions profileLabels' : 'offsetEmissions profileLabels')                    
                        .attr('x',  d => vis.baselineChart.scale.xScale(Object.values(d)[0] / 2) )
                        .attr('y',  vis.baselineChart.dims.height * 0.35 )
                        .attr('dy', 0)
                        .text(d => Object.keys(d)[0]) 
                        .call(vis.helpers.wrap, 180, 1.2, true)
                        .style('opacity', 0)
                            .transition().duration(duration * 0.25).delay(duration * 0.75)
                            .style('opacity', null)                            

                    // Add data label on bar
                    annotationGroup.selectAll('.profileDataLabels').data(data).enter().append('text')
                        .attr('class',  d => Object.values(d)[0] > 0 ? 'grossEmissions profileDataLabels' : 'offsetEmissions profileDataLabels')                    
                        .attr('x', d => vis.baselineChart.scale.xScale(Object.values(d)[0] / 2) )
                        .attr('y',  xScaleVertHeight - 120 + barHeight)
                        .attr('dy', -20)
                        .text(d => vis.numberFormatters.formatComma(Object.values(d)[0])+' t CO2-e') 
                        .style('opacity', 0)
                            .transition().duration(duration).delay(duration)
                            .style('opacity', null)     

                    // Show the illustrations
                        d3.select('#sketchTown').attr('transform', 'translate(455, 255) scale(2.75)')
                        d3.select('#sketchFarms').attr('transform', 'translate(120, 260) scale(2.5)')
                        d3.select('#sketchTrees').attr('transform', 'translate(-10, 260) scale(2.5)')  
                        d3.select('#sketchKombi').attr('transform', 'translate(870, 317) scale(2.1)')      
                        d3.select('#sketchPlane').attr('transform', 'translate(850, 150) scale(2.1)')      
                        d3.select('#sketchWaste').attr('transform', 'translate(840, 320) scale(3)')        
                        
                        d3.selectAll('.barsSketch').classed('faded', false)
                            .style('opacity', 0)
                            .transition().duration(2000).delay( (d,i) => i * 150 + duration * 0.5 )
                            .style('opacity', null)                        

                    // UPDATE COMMENTARY CONTROLS
                    vis.baselineChart.methods.updateCommentary('sourcesAndSinks')        
                    commentaryBack.on('click', null)
                    commentaryForward.on('click', null)
                    setTimeout( () => {
                        commentaryBack.on('click', vis.baselineChart.methods.introEmissionsTitle).transition().duration(250).style('opacity', 1)
                        commentaryForward.on('click', vis.baselineChart.methods.renderNetBarChart)
                    }, duration)
                }; // end renderGrossVsOffsetBarChart()
     
                // C. NET EMISSIONS SCENE
                vis.baselineChart.methods.renderNetBarChart = (data, title) => {
                    const duration = 2000

                    // Animate the offsetting of bars
                    d3.select('.offsetEmissions.profileBars').transition().duration(duration)
                        .attr('x', vis.baselineChart.scale.xScale(0) )
                        .attr('width', 0)
                    d3.select('.grossEmissions.profileBars').transition().duration(duration)
                        .attr('width', vis.baselineChart.scale.xScale(vis.baselineChart.data.emissions.total) -  vis.baselineChart.scale.xScale(0) )
                        .style('fill', vis.colours.palette.lightBlue)

                    // Animate the offset and gross figures
                    d3.select('.grossEmissions.profileDataLabels').transition().duration(duration)
                        .style('fill', vis.colours.palette.blue)
                        .attr('x', vis.baselineChart.scale.xScale(vis.baselineChart.data.emissions.total/ 2 ) )
                        .tween('text', d => {
                            let i = d3.interpolate(Object.values(vis.baselineChart.data.emissions.byGrossVsOffsets[0])[0], vis.baselineChart.data.emissions.total);
                            return function(t) {  d3.select(this).text(vis.numberFormatters.formatComma(i(t))+' t CO2-e')   };
                        })
                    d3.select('.offsetEmissions.profileDataLabels').transition().duration(duration)
                        .style('opacity', 0)
                        .tween('text', d => {
                            let i = d3.interpolate(Object.values(vis.baselineChart.data.emissions.byGrossVsOffsets[1])[0], 0);
                            return function(t) {  d3.select(this).text(vis.numberFormatters.formatComma(i(t))+' t CO2-e')   };
                        })                    
                    d3.selectAll('.profileLabels').transition().duration(duration)
                         .style('opacity', 0)
                    d3.selectAll('#profileChart-mainTitle, #profileChart-volumeTitle').transition().duration(duration)
                        .style('opacity', 0.25)

                    // Add in a net emissions label
                    annotationGroup.append('text')
                        .attr('class',  'netEmissions profileLabels')                    
                        .attr('x',  d => vis.baselineChart.scale.xScale(vis.baselineChart.data.emissions.total/ 2) )
                        .attr('y',  vis.baselineChart.dims.height * 0.35 )
                        .attr('dy', 0)
                        .text(d => "Net emissions are what we get when we consider all our of emission sources and sinks") 
                        .call(vis.helpers.wrap, 350, 1.3, true)
                        .style('opacity', 0)
                        .transition().duration(500).delay(duration)
                            .style('opacity', null)  

                    // Show the illustrations
                    d3.selectAll('.barsSketch').classed('faded', false)                    
                        d3.select('#sketchTown').transition().duration(duration).attr('transform', 'translate(465, 255) scale(2.75)')
                        d3.select('#sketchFarms').transition().duration(duration).attr('transform', 'translate(165, 260) scale(2.5)')
                        d3.select('#sketchTrees').transition().duration(duration).attr('transform', 'translate(90, 260) scale(2.5)')  
                        d3.select('#sketchKombi').transition().duration(duration).attr('transform', 'translate(840, 317) scale(2.1)')      
                        d3.select('#sketchPlane').transition().duration(duration).attr('transform', 'translate(830, 150) scale(2.1)')      
                        d3.select('#sketchWaste').transition().duration(duration).attr('transform', 'translate(827, 320) scale(3)')  

                    // UPDATE COMMETARY
                    vis.baselineChart.methods.updateCommentary('netEmissions')    
                    commentaryBack.on('click', null)
                    commentaryForward.on('click', null)
                    setTimeout( ()=> {
                        commentaryBack.on('click', () => {
                            mainTitle.transition().duration(1000).attr('y', vis.baselineChart.dims.margin.top / 2)   
                            volumeTitle.transition().duration(1000).attr('y', vis.baselineChart.dims.margin.top  / 2 + 45)
                            vis.baselineChart.methods.renderGrossVsOffsetBarChart(vis.baselineChart.data.emissions.byGrossVsOffsets)
                        })
                        commentaryForward.style('opacity', 1).on('click', () => {
                            vis.baselineChart.methods.renderNetEmissionsSectorBar(vis.baselineChart.data.emissions.byEmissionSector.sort((a,b) => b.value - a.value))
                     })
                    }, duration)                                    
                }; // end renderNetBarChart()

                // D.EMISSIONS SECTOR BAR CHART: TRANSITION
                vis.baselineChart.methods.renderNetEmissionsSectorBar = (data, title) => {
                    const duration = 2000, barHeight = 50, startingBarYpos = 260, xScaleVertHeight = vis.baselineChart.dims.height * 0.8
                    
                    // Transition the net bar up and label off
                        d3.selectAll('.netEmissions.profileLabels, .grossEmissions.profileDataLabels').transition().duration(500)
                            .style('transform', 'translateY(-20)')
                            .style('opacity', 0)
                        d3.select('.grossEmissions.profileBars')
                            .transition().duration(duration)
                            .attr('y', startingBarYpos)
                        d3.select('.profileChart-yAxis')
                            .transition().duration(duration)
                            .attr('d', d3.line()([
                                [vis.baselineChart.scale.xScale(0), xScaleVertHeight - 10],  
                                [vis.baselineChart.scale.xScale(0), xScaleVertHeight - 270]
                            ]))
                        
                    // Add the sector bars in stacked position
                    const grossSectorEmissions = d3.sum(data.map(d => d.value > 0 ? d.value : 0) ),
                        netBarData = data.map( (d, i) => {return {  
                                sector:       d.key,
                                value:        d.value > 0 ? d.value / grossSectorEmissions * vis.baselineChart.data.emissions.total : 0
                            }
                        }),
                        cumulativeSum = (sum => value => sum += value)(0),
                        netCumArray = (function(){
                            let arr = netBarData.map(d => d.value).map(cumulativeSum)
                                arr.unshift(0)
                                arr.pop(1)                        
                            return arr
                        })()

                    // Attach emission profile  bars
                    barsGroup.selectAll('.profileBars.emissionSectors').data(netBarData).enter().append('rect')
                        .attr('class', d => 'profileBars emissionSectors '+vis.helpers.camelize(d.sector) )
                        .attr('x', (d, i) => vis.baselineChart.scale.xScale(netCumArray[i]) )
                        .attr('y', startingBarYpos)
                        .attr('height', barHeight)
                        .attr('width', (d, i) => vis.baselineChart.scale.xScale(d.value) - vis.baselineChart.scale.xScale(0) )
                        .style('fill', d => vis.colours.byEmissionSector[d.sector])
                        .style('opacity', 0)
                        .transition().duration(800).delay(duration)
                            .style('opacity', null)

                    // Add labels
                    annotationGroup.append('text').attr('class', 'netBreakdownLabel profileLabels')
                        .attr('x', vis.baselineChart.scale.xScale(vis.baselineChart.data.emissions.total/ 2 ) )
                        .attr('y', 230)
                        .text("It can be difficult to properly 'see' what contributes to net emissions")
                        .style('opacity', 0)
                        .style('transform', 'translateY(-20)')
                        .transition().duration(800).delay((d,i) => duration + i*50)
                            .style('opacity', 1)
                            .attr('transform', null)                        

                    annotationGroup.selectAll('.profileLabels.emissionSectors').data(data).enter()
                        .append('text').classed('profileLabels emissionSectors', true)
                        .attr('x', vis.baselineChart.scale.xScale(0) + 50)
                        .attr('y', (d, i) => i * 20  + 360)
                        .style('fill', d =>  vis.colours.byEmissionSector[d.key] )
                        .text(d => d.key +': '+vis.numberFormatters.formatComma(d.value)+' t CO2-e') 
                        .style('opacity', 0)
                        .style('transform', 'translateY(-20)')
                        .transition().duration(800).delay((d,i) => duration + i*50)
                            .style('opacity', 1)
                            .attr('transform', null)

                    // FAde oit illustration
                        d3.selectAll('.barsSketch').classed('faded', true)

                    // UPDATE COMMENTARY
                        vis.baselineChart.methods.updateCommentary('netEmissionsProblem')      
                        commentaryBack.on('click', null)
                        commentaryForward.on('click', null)
                        setTimeout( () => {
                            commentaryBack.on('click', () => {
                                console.log('THIS?')
                                vis.baselineChart.methods.renderNetEmissionsSectorBar(vis.baselineChart.data.emissions.byEmissionSector.sort((a,b) => b.value - a.value))
                                d3.selectAll('.grossEmissions, .netEmissions').transition().duration(500).attr('y', xScaleVertHeight - 20).style('opacity', null)
                                d3.selectAll('.profileBars.emissionSectors, .netBreakdownLabel.profileLabels, .profileLabels.emissionSectors').style('opacity', 0)
                                // d3.selectAll('.netEmissions.profileLabels, .grossEmissions.profileDataLabels').transition().duration(500).style('transform', null).style('opacity', 1)
                                d3.selectAll('.barsSketch').classed('faded', false)
                              
                            })
                            commentaryForward.style('opacity', 1).on('click', () => {
                                vis.baselineChart.methods.renderEmissionsSectorBarChart(vis.baselineChart.data.emissions.byEmissionSector.sort((a,b) => b.value - a.value))
                            })
                        }, duration)                                           
                }; // end renderBarChart()
     
                // E. EMISSIONS SECTOR BAR CHART: FINAL
                vis.baselineChart.methods.renderEmissionsSectorBarChart = (data, title) => {
                    const duration = 3000, barHeight = 15, barGap = 10, startingBarYpos = 400,  xScaleVertHeight = vis.baselineChart.dims.height * 0.8
                    vis.baselineChart.scale.xScale = d3.scaleLinear().domain(d3.extent(data, d => d.value)).range([vis.baselineChart.dims.margin.left, vis.baselineChart.dims.width -vis.baselineChart.dims.margin.right])                                    
                    // Emission sector bars in to view
                    barsGroup.selectAll('.profileBars.emissionSectors').data(data)
                        .transition().duration(800).style('opacity', 1)
                        .transition().duration(2000)
                        .attr('x', d =>  d.value > 0 ? vis.baselineChart.scale.xScale(0) : vis.baselineChart.scale.xScale(d.value))    
                        .attr('y', (d, i) => i * (barHeight + 20 + barGap) + 200)                     
                        .attr('height',  barHeight )
                        .attr('width',  d =>  vis.baselineChart.scale.xScale(Math.abs(d.value)) - vis.baselineChart.scale.xScale(0) )

                    // Hide net bar
                    d3.select('.grossEmissions.profileBars').style('opacity', 0)

                    // Adjust the axes
                    xAxisGroup.transition().duration(duration)
                        .attr("transform", "translate("+0+"," + (xScaleVertHeight) + ")")
                        .call(d3.axisBottom(vis.baselineChart.scale.xScale));           
                    xAxisLabelGroup.transition().duration(duration)
                        .attr("transform", "translate("+(vis.baselineChart.dims.width - vis.baselineChart.dims.margin.left)+"," + (xScaleVertHeight + 40) + ")")

                    // Draw Y axis as line without end ticks for Y axis Position Y axis 
                    d3.select('.profileChart-yAxis')
                        .transition().duration(duration)
                        .attr('d', d3.line()([
                            [vis.baselineChart.scale.xScale(0), xScaleVertHeight - 10],  
                            [vis.baselineChart.scale.xScale(0), xScaleVertHeight - 300]
                        ]))

                    // Transition labels
                    d3.select('.netBreakdownLabel.profileLabels').transition().duration(duration)
                        .style('transform', 'translateY(-50)')
                        .style('opacity', 0)

                    d3.selectAll('.profileLabels.emissionSectors').data(data)
                        .transition().duration(duration)
                        .attr('x', vis.baselineChart.scale.xScale(0) + 10)
                        .attr('y', (d, i) => i * (barHeight + 20 + barGap) + 200 - 5)
                        .style('fill', d =>  vis.colours.byEmissionSector[d.key] )
                        .text(d => d.key +': '+vis.numberFormatters.formatComma(d.value)+' t CO2-e') 

                    // UPDATE COMMETARY
                    vis.baselineChart.methods.updateCommentary('netEmissionsVis')    
                    commentaryBack.on('click', null)
                    commentaryForward.on('click', null)
                    setTimeout( ()=> {
                        commentaryBack.on('click', vis.baselineChart.methods.renderEmissionsSectorBarChart).transition().duration(250).style('opacity', null)
                        commentaryForward.style('opacity', 1).on('click', () => { 
                            // Go to emissions breakdown chart
                            d3.selectAll('.menu-option').classed('selected', false)
                            d3.select('#menu-breakdown').classed('selected', true)
                            d3.selectAll('.vis-container').classed('hidden', true)
                            d3.select('#'+document.getElementById('menu-breakdown').getAttribute('vis')+'-container')
                                .classed('hidden', false).style('display', 'grid').style('opacity', 0)
                                .transition().duration(1000).style('opacity', 1)
                            movePenguins('menu-breakdown')                                
                        })
                    }, duration)   
                }; // end renderBarChart()

                // X. Round numbers         
                vis.baselineChart.methods.roundNumbers = () => {
                    volumeTitle.transition().duration(500)
                        .tween('text', d => {
                            let i = d3.interpolate(vis.baselineChart.data.emissions.total, Math.round(vis.baselineChart.data.emissions.total/1000)*1000);
                            return function(t) {  d3.select(this).text(vis.numberFormatters.formatComma(i(t))+' tonnes of CO2-e')   };
                        });
                }; //end roundNumbers()
            } // end addProfileMethods()
    }; // end renderProfileChart


////////////////////////////////////////////////////////////////////
////////////////   EMISSIONS BUBBLE CHART VIEWER   /////////////////      
////////////////////////////////////////////////////////////////////

    // Render the emissions bubble chart
    function renderBubbleVis(){
        vis.renderStatus.emissionsBubble = true     // Set render status to true

        // Initiate chart data variables in vis object
        vis.bubbleChart = {
            chartData:                      '',
            emissionSectorData:             [],  
            emissions: {
                dataPosCO2:                 '',
                dataNegCO2:                 '',
                grossEmissions:             '',
                netEmissions:               '',
                creditEmissions:            '',
                dataInBoundaryPosCO2:       '',
                dataInBoundaryNegCO2:       '',
                grossInBoundaryEmissions:   '',
                netInBoundaryEmissions:     '',
                creditInBoundaryEmissions:  ''
            },
            energy: {
                dataPosEnergy:              '',
                dataNegEnergy:              '',
                grossEnergy:                '',
                netEmissions:               '',
                netEnergy:                  '',
                creditEnergy:               '',
                dataInBoundaryPosEnergy:    '',
                dataInBoundaryNegEnergy:    '',
                grossInBoundaryEnergy:      '',
                netInBoundaryEnergy:        '',
                creditInBoundaryEnergy:     ''
            },
            lists: {
                emissionsType:              [],
            },
            dims:{
                height:                     700,
                width:                      1000,
                margin:                     { left: 200 }
            },
            scales:{
                emissionsArrayScaleX:       '',
                emissionsArrayScaleY:       ''
            },
            forces: {
                forces:                     '',
                updateForces:               ''
            },
            svgGroups:{
                labelsGroup:                ''
            },
            tooltipDiv:                     d3.select("main").append("div").attr("class", "bubbleChart-tooltip").style("opacity", 0),     // Define the div for the tooltip
            methods:                        {}
        }

        d3.selectAll('#bubbleChart > *').remove()
        addMethods()
        parseBubbleData(inputData.baselineStocks);
        renderBubbleChart('bubbleChart', vis.bubbleChart.chartData, 'emissions')
        vis.bubbleChart.methods.intro()

        // Add the next button to go to sankey
        d3.select('#bubbleChart-forward').on('click', () =>  {
            d3.selectAll('.menu-option').classed('selected', false)
            d3.select('#menu-flow').classed('selected', true)
            d3.selectAll('.vis-container').classed('hidden', true).style('display', null)
            d3.select('#'+document.getElementById('menu-flow').getAttribute('vis')+'-container')
                .classed('hidden', false).style('display', 'grid').style('opacity', 0)
                .transition().duration(1000).style('opacity', 1)
        })

        // A. Parse bubble chart data 
        function parseBubbleData(data){
            // Add an emissions Type
            data.forEach(d => d.emissionsType = d.emissionsAbated > 0 ? 'Sinks and credits' : 'Sources' )

            const emissionsData = vis.bubbleChart.emissions,
                energyData = vis.bubbleChart.energy

            // Use emissions data and  a variable for "size" 
            vis.bubbleChart.chartData = data.filter( d => d.boundary === "Included")
         
            // Create 'positive' and 'negative' (i.e. renewables/offsets datasets)
            emissionsData.dataPosCO2 = vis.bubbleChart.chartData.filter(d => d.boundary === "Included"  &&  d.emissions > 0)
            emissionsData.dataNegCO2 = vis.bubbleChart.chartData.filter(d => d.boundary === "Included"  &&  d.emissions < 0)

            // Calculate emisisons, and energy totals
            emissionsData.creditEmissions   = d3.sum(emissionsData.dataNegCO2, d => d.emissions); 
            emissionsData.netEmissions      = emissionsData.grossEmissions + emissionsData.creditEmissions;
            energyData.grossEnergy          = d3.sum(emissionsData.dataPosCO2, d => d.energy);
            energyData.offsetEnergy         = d3.sum(emissionsData.dataNegCO2, d => d.energy);
            energyData.netEnergy            = energyData.grossEnergy + energyData.creditEnergy;

            // "In Boundary": create 'positive' and 'negative' (i.e. renewables/offsets datasets)
            emissionsData.dataInBoundaryPosCO2      = vis.bubbleChart.chartData.filter(d => d.boundary === "Included" && d.emissions > 0)
            emissionsData.dataInBoundaryNegCO2      = vis.bubbleChart.chartData.filter(d => d.boundary === "Included" && d.emissions < 0)
            emissionsData.grossInBoundaryEmissions  = d3.sum(emissionsData.dataInBoundaryPosCO2, d => d.emissions); 
            emissionsData.creditInBoundaryEmissions = d3.sum(emissionsData.dataInBoundaryNegCO2, d => d.emissions); 
            emissionsData.netInBoundaryEmissions    = emissionsData.grossInBoundaryEmissions + emissionsData.creditInBoundaryEmissions;

            // "In Boundary":  Calculate emisisons, and energy totals
            energyData.grossInBoundaryEnergy  = d3.sum(emissionsData.dataInBoundaryPosCO2, d => d.energy );
            energyData.offsetInBoundaryEnergy = d3.sum(emissionsData.dataInBoundaryNegCO2, d => d.energy );
            energyData.netInBoundaryEnergy    = energyData.grossInBoundaryEnergy + energyData.creditInBoundaryEnergy;

            // Create lists of unique names for emissionsTypes
            getUniqueNames(data, 'emissionsType', vis.bubbleChart.lists.emissionsType)

            // Summarise emissions data for (for numeric display/ labelling)
            for( let i = 0; i < model.schema.fieldOptions.baselineStocks.emissionsSector.length ; i++){
                // Create emissionSectorData
                let  obj = {
                    "name":                 model.schema.fieldOptions.baselineStocks.emissionsSector[i],
                    "emissionsGross":       d3.sum(data.filter(d => d.boundary === "Included" && d.emissions > 0  && d.emissionsSector === model.schema.fieldOptions.baselineStocks.emissionsSector[i]), d => d.emissions),
                    "emissionsCredit":      Math.abs(d3.sum(data.filter(d => d.boundary === "Included" && d.emissions < 0  && d.emissionsSector === model.schema.fieldOptions.baselineStocks.emissionsSector[i]), d => d.emissions)),
                    "netEmissions":         d3.sum(data.filter(d => d.boundary === "Included" && d.emissionsSector === model.schema.fieldOptions.baselineStocks.emissionsSector[i]), d => d.emissions),
                    "energyCredit":         d3.sum(data.filter(d => d.boundary === "Included" && d.emissions < 0 && d.emissionsSector === model.schema.fieldOptions.baselineStocks.emissionsSector[i]), d => d.energy),
                    "energyGross":          d3.sum(data.filter(d => d.boundary === "Included" && d.emissionsSector === model.schema.fieldOptions.baselineStocks.emissionsSector[i]), d => d.energy),
                    "netEnergy":            d3.sum(data.filter(d => d.boundary === "Included" && d.emissions > 0  && d.emissionsSector === model.schema.fieldOptions.baselineStocks.emissionsSector[i]), d => d.energy),
                    "electricityGrid":      d3.sum(data.filter(d => d.boundary === "Included" && d.source === 'Electricity' && d.emissionsSector === model.schema.fieldOptions.baselineStocks.emissionsSector[i]), d => d.natural),
                    "electricityRenewable": d3.sum(data.filter(d => d.boundary === "Included" && d.source === 'Wind' || d.source === 'Solar'  && d.emissionsSector === model.schema.fieldOptions.baselineStocks.emissionsSector[i]), d => d.natural),
                    "elecricityTotal":      d3.sum(data.filter(d => d.boundary === "Included" && d.source === 'Electricity' || d.source === 'Wind' || d.source === 'Solar' && d.emissionsSector === model.schema.fieldOptions.baselineStocks.emissionsSector[i]), d => d.natural)
                }
                vis.bubbleChart.emissionSectorData.push(obj)
            }

            // Helper to get unique names
            function getUniqueNames(data, unit, outputArray){
                var tmp = [];
                for(let i = 0; i < data.length; i++) {
                    if(tmp[data[i][unit]]) continue;
                    tmp[data[i][unit]] = true;
                    outputArray.push(data[i][unit]);
                }
            } //  end getNames()
        }; //endParseData()

        // B. Bubble chart render function
        function renderBubbleChart(svgID, chartData, unit) {
            // 0. Filter data and setup variables    
                positiveChartData = chartData.filter( d => d.emissions !== 0 )              // Filter to positive emissins and credits
                positiveChartData.forEach(d => d.emissions = Math.abs(d.emissions))

            // 1. Chart data variables and colour scales
                let svg, labelGroup, circles, forceSimulation    
                const creditData        = positiveChartData.filter( d => d.emissionsAbated > 0 ),
                    emissionsArray      = positiveChartData.map( d => +d[unit]),
                    meanEmissions       = d3.mean(emissionsArray),
                    emissionsExtent     = d3.extent(emissionsArray),
                    emissionsMax        = d3.max(emissionsArray),
                    emissionsAllArray   = emissionsArray.concat(creditData.map(d => -d.emissionsAbated)),        
                    emissionsAllExtent  = d3.extent(emissionsAllArray),   
                    sectors             = d3.set(positiveChartData.map( d => d.emissionsSector)),
                    sectorColorScale    = d3.scaleOrdinal().domain(sectors.values()).range(sectors.values().map(d => vis.colours.byEmissionSector[d]))
                                            
            // 2. Chart dimensions and bubble size scales
                const circleSize = { min: 10, max: 70 },
                    circlePadding = 4,
                    circleForce = -0.2,
                    forceStrength = 0.35,
                    circleRadiusScale = d3.scaleSqrt()
                        .domain(emissionsExtent)
                        .range([circleSize.min, circleSize.max]);

                vis.bubbleChart.scales.emissionsArrayScaleX =  d3.scaleBand()
                    .domain(model.schema.fieldOptions.baselineStocks.emissionsSector)
                    .range([circleSize.max + vis.bubbleChart.dims.margin.left , vis.bubbleChart.dims.width - vis.bubbleChart.dims.margin.left ])

                vis.bubbleChart.scales.emissionsArrayScaleY = d3.scaleLinear()
                    .domain([0, d3.max(emissionsArray)])
                    .range([vis.bubbleChart.dims.height - circleSize.max, circleSize.max*2])  

            // 3. Render the bubble chart (only if it has not already been added)
                createSVG(svgID, vis.bubbleChart.dims.width, vis.bubbleChart.dims.height);                // Add the SVG
                toggleKey(true)                                 // Show key
                createCircles(positiveChartData);                       
                createForces();
                createForceSimulation(positiveChartData);
                addGroupingListeners();

                // Add the next button to go to wedges
                d3.select('#bubbleChart-forward').on('click', () =>  {
                    d3.selectAll('.menu-option').classed('selected', false)
                    d3.select('#menu-flow').classed('selected', true)
                    d3.selectAll('.vis-container').classed('hidden', true).style('display', null)
                    d3.select('#'+document.getElementById('menu-flow').getAttribute('vis')+'-container')
                        .classed('hidden', false).style('display', 'grid').style('opacity', 0)
                        .transition().duration(500).style('opacity', 1)
                    movePenguins('menu-flow')
                })


            /////////////////////////////////////////////////
            /// SUPPPORTING FUNCTIONS TO RENDER THE CHART ///
            /////////////////////////////////////////////////    
                
                // a. Specify dimensions and defs for the (existing) SVG
                function createSVG(svgID, width, height) {
                    svg = d3.select("#"+svgID).attr('viewBox', "0 0 "+width+" "+height)
                    // Add gooey filter to defs
                    const defs = svg.append('defs'),
                        filter = defs.append('filter').attr('id','gooey'),
                        config = { radius: 5 };
                    filter.append('feGaussianBlur')
                        .attr('in','SourceGraphic')
                        .attr('stdDeviation', config.radius * 1.8)
                        .attr('result','blur');
                    filter.append('feColorMatrix')
                        .attr("class", "blurValues")
                        .attr('in','blur')
                        .attr('mode','matrix')
                        .attr('values', '1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 ' + config.radius +' -6')
                        .attr('result','gooey');
                    filter.append("feBlend")
                        .attr("in", "SourceGraphic")
                        .attr("in2", "gooey")
                        .attr("operator", "atop");
                }; // end createSVG()

                // b. Toggle the sector key (including creation if it does not exist)
                function toggleKey(showKey) {
                    const keyElementWidth = 10,  
                        keyElementHeight = 15,
                        onScreenYOffset = vis.bubbleChart.dims.height *0.7,
                        offScreenYOffset = 100;

                    // 1. Create key if it doesn't exist  
                    if (d3.select(".sector-key").empty()) { createKey(vis.bubbleChart.dims.width, vis.bubbleChart.dims.height); }          

                    // 2. Show/hide the key
                    if (showKey) {
                      translateKey("translate(0," + (vis.bubbleChart.dims.height - onScreenYOffset) + ")");
                    } else {
                      translateKey("translate(0," + (vis.bubbleChart.dims.height + offScreenYOffset) + ")");
                    }

                    // SUPPORTING FUNCTIONS 
                        // Create the key 
                        function createKey(width, height) {
                            const keyWidth = keyElementWidth * sectors.values().length,
                                keyScale = d3.scaleBand().domain(sectors.values())
                                    .range([(width - keyWidth) / 2, (width + keyWidth) / 2]);

                            const key = svg.append("g").attr("class", "sector-key")
                                .attr("transform", "translate(0," + (height + offScreenYOffset) + ")")
                                .selectAll("g")
                                    .data(sectors.values())
                                    .enter().append("g")
                                        .attr("class", "sector-key-element");

                            key.append("rect")
                                .attr("width", keyElementWidth)
                                .attr("height", keyElementHeight)
                                .attr("x",  0 )
                                .attr("y",  (d, i) => 300 + i * keyElementHeight )
                                .attr("fill", d => sectorColorScale(d) );

                            key.append("text")
                                .attr("x",  15 )
                                .attr("y",  (d, i) => 300 + i * keyElementHeight )
                                .attr("dy", 13)
                                .attr("fill", d => sectorColorScale(d))                               
                                .text(d => d)
                                // .call(vis.helpers.wrap, keyElementWidth, 1.1, true)
                        }; // createKey()

                        // Move the key in/out of position
                        function translateKey(translation) {
                           d3.select(".sector-key").transition()
                            .duration(500)
                            .attr("transform", translation);
                        }; // end tranalateKey()
                }; // end toggleKey()

                // c. Check for radio button options (note: cannot be an arrow function)
                function isChecked(elementID) {
                    return d3.select(elementID).property("checked");
                }; // isChecked()

                // d. Create the bubble circles
                function createCircles(data) {
                    const svgGroups = vis.bubbleChart.svgGroups
                    // Add circle and label group
                    svgGroups.circlesGroup = svg.append("g").attr("id", "circlesGroup")
                    svgGroups.labelGroup = svg.append("g").attr("id", "labelGroup")
                    const formatComma = d3.format(",");

                    // Append bubble circles
                    circles = svgGroups.circlesGroup.selectAll("circle")
                      .data(data).enter()
                        .append("circle")
                            .attr('class',  d => d.emissionsType+' bubbleChartCircle')            
                            .attr("r",      d => (d.emissionsType === 'Sinks and credits') ?  Math.sqrt(d.emissionsAbated / emissionsMax) * circleSize.max : Math.sqrt(d[unit] /emissionsMax) * circleSize.max )
                            .attr("fill",   d => (d.emissionsType === 'Sinks and credits') ? 'transparent' : sectorColorScale(d.emissionsSector) )
                            .attr("stroke", d => (d.emissionsType === 'Sinks and credits') ? sectorColorScale(d.emissionsSector) : null )
                            .on("mouseover", d => vis.bubbleChart.methods.toolTipOn(d, d3.event.pageX, d3.event.pageY) )          
                            .on("mouseout", vis.bubbleChart.methods.toolTipOff) 
                            .call(d3.drag()
                                .on("start",dragstarted)
                                .on("drag",dragged)
                                .on("end",dragended))           

                    // Supporting functions
                        function updateInfo(element) {
                          let info = "";
                          if(element) {
                            info = element.endUser+' | '+element.economicSector+' | '+element.activity +" | "+element.source+" | " +formatComma(element[unit]) +" t CO2-e";
                          }
                          d3.select("#info").html(info);
                        }

                    // Node drag behaviour
                        function dragstarted(d){ 
                            forceSimulation.restart();
                            forceSimulation.alpha(0.5);
                            d.fx = d.x;
                            d.fy = d.y;
                        }; // end dragstarted()

                        function dragged(d) {
                            d.fx = d3.event.x;
                            d.fy = d3.event.y;
                        }; // end dragged()

                        function dragended(d) {
                            d.fx = null;
                            d.fy = null;
                            forceSimulation.alpha(0.5);
                        }; // end draggended()
                }; // end createCircles()

                // e. Create the forces for each view (and labels)
                function createForces() {
                    vis.bubbleChart.forces = {
                        combine:                createCombineForces(),
                        emissionsSectors:       createEmissionSectorForces(),
                        economicSectors:        createEconomicSectorForces(),
                        distribution:           createDistributionForces(),
                        InBoundaryBoundary:     createInBoundaryForces(),
                        netEmissions:           createNetEmissionsForces(),
                    };
                
                    // Set of functions to control the focii
                    function createCombineForces() {                    
                        return {
                            x: d3.forceX(vis.bubbleChart.dims.width / 2).strength(forceStrength),
                            y: d3.forceY(vis.bubbleChart.dims.height * 0.5).strength(forceStrength)
                        };
                    }; // end createCombineForces

                    // Create EmissionsSector forces (and add label)
                    function createEmissionSectorForces() {            
                        const sectorOptions = model.schema.fieldOptions.baselineStocks.emissionsSector
                        // Create labels                  
                        vis.bubbleChart.svgGroups.labelGroup.selectAll(".sectorLabel.emissionsSector")
                            .data(sectorOptions)
                            .enter().append("text")
                                .classed('sectorLabel emissionsSector', true)
                                .text(d => d)  
                                .attr("dy", ".35em")      
                                .attr("x", d => sectorForceX( {emissionsSector: d }) )
                                .attr("y", d => sectorForceY( {emissionsSector: d }) )
                                .call(vis.helpers.wrap, 300, 1.1, true)

                        // Return forces
                        return {
                            x: d3.forceX(sectorForceX).strength(forceStrength),
                            y: d3.forceY(sectorForceY).strength(forceStrength)
                        };
                        // Functions to manually place foci (X,Y) by sector option
                            function sectorForceX(d) {        
                                switch(d.emissionsSector){
                                    case sectorOptions[0]:   return vis.bubbleChart.dims.width * 0.25        // Stationary Energy
                                    case sectorOptions[1]:   return vis.bubbleChart.dims.width * 0.5        // Transport
                                    case sectorOptions[2]:   return vis.bubbleChart.dims.width * 0.5         // Waste
                                    case sectorOptions[3]:   return vis.bubbleChart.dims.width * 0.25        // INdustrial processe
                                    case sectorOptions[4]:   return vis.bubbleChart.dims.width * 0.75        // Agriculture                     
                                    case sectorOptions[5]:   return vis.bubbleChart.dims.width * 0.75         // Land use, land use change and forestry                    
                                }                    
                            } // end sectorForceX()

                            function sectorForceY(d) {
                                switch(d.emissionsSector){
                                    case sectorOptions[0]:   return vis.bubbleChart.dims.height *0.35          // Stationary Energy
                                    case sectorOptions[1]:   return vis.bubbleChart.dims.height *0.75        // Transport
                                    case sectorOptions[2]:   return vis.bubbleChart.dims.height *0.25          // Waste
                                    case sectorOptions[3]:   return vis.bubbleChart.dims.height *0.65       // INdustrial processe  // Agriculture
                                    case sectorOptions[4]:   return vis.bubbleChart.dims.height *0.35          // Agriculture                         
                                    case sectorOptions[5]:   return vis.bubbleChart.dims.height *0.65         // Land use, land use change and forestry                               
                                }     
                            }; // end sectorForceY()
                    } // end createEmissionSectorForces()

                    function createEconomicSectorForces() {
                        const sectorOptions = model.schema.fieldOptions.baselineStocks.economicSector            
                        // Create labels            
                        vis.bubbleChart.svgGroups.labelGroup.selectAll(".sectorLabel.economicSector")
                            .data(sectorOptions).enter()
                                .append("text")
                                .classed('sectorLabel economicSector', true)
                                .text(d => d)            
                                .attr("x", d => sectorForceX( {economicSector: d }) )
                                .attr("y", d => sectorForceY( {economicSector: d }) )
                        // Return forces
                        return {
                            x: d3.forceX(sectorForceX).strength(forceStrength),
                            y: d3.forceY(sectorForceY).strength(forceStrength)
                        };
                        // Functions to manually place foci (X,Y) by sector option
                            function sectorForceX(d) {
                                switch(d.economicSector){
                                    case sectorOptions[0]:   return vis.bubbleChart.dims.width * 0.2      // Residential
                                    case sectorOptions[1]:   return vis.bubbleChart.dims.width * 0.8      // Commerical 
                                    case sectorOptions[2]:   return vis.bubbleChart.dims.width * 0.65      // Industrial
                                    case sectorOptions[3]:   return vis.bubbleChart.dims.width * 0.5      // Farming
                                    case sectorOptions[4]:   return vis.bubbleChart.dims.width * 0.35      // Municipal               
                                }                               
                            } // end sectorForceX()

                            function sectorForceY(d) {
                                switch(d.economicSector){
                                    case sectorOptions[0]:   return vis.bubbleChart.dims.height * 0.4      // Residential
                                    case sectorOptions[1]:   return vis.bubbleChart.dims.height * 0.4      // Commerical 
                                    case sectorOptions[2]:   return vis.bubbleChart.dims.height * 0.75      // Industrial
                                    case sectorOptions[3]:   return vis.bubbleChart.dims.height * 0.4      // Farming
                                    case sectorOptions[4]:   return vis.bubbleChart.dims.height * 0.75     // Municipal                 
                                }     
                            }; // end sectorForceY()
                    } // end createEmissionSectorForces()

                    function createInBoundaryForces() {
                        const sectorOptions = model.schema.fieldOptions.baselineStocks.boundary            
                        // Create labels
                        vis.bubbleChart.svgGroups.labelGroup.selectAll(".sectorLabel.InBoundary")
                            .data(sectorOptions)
                                .enter().append("text")
                                .classed('sectorLabel InBoundary', true)
                                    .text(d => d)            
                                    .attr("x", d => sectorForceX( {boundary: d }) )
                                    .attr("y", d => sectorForceY( {boundary: d }) )

                        // Return forces
                        return {
                            x: d3.forceX(sectorForceX).strength(forceStrength),
                            y: d3.forceY(sectorForceY).strength(forceStrength)
                        };
                        // Functions to manually place foci (X,Y) by sector option
                            function sectorForceX(d) {
                                switch(d.boundary){
                                    case sectorOptions[0]:   return vis.bubbleChart.dims.width / 4           // In boundary
                                    case sectorOptions[1]:   return vis.bubbleChart.dims.width / 4 * 3       // Out of boundary
                                }
                            } // end sectorForceX()

                            function sectorForceY(d) {
                                switch(d.boundary){
                                    case sectorOptions[0]:   return vis.bubbleChart.dims.height / 2          // In boundary
                                    case sectorOptions[1]:   return vis.bubbleChart.dims.height / 2          // Out of boundary
                                }
                            }; // end sectorForceY()
                    } // end createInBoundaryForces()

                    function createNetEmissionsForces() {
                        const sectorOptions = vis.bubbleChart.lists.emissionsType                
                        // Create labels
                        vis.bubbleChart.svgGroups.labelGroup.selectAll(".sectorLabel.sourcesSinks")
                            .data(sectorOptions)
                                .enter().append("text")
                                .classed('sectorLabel sourcesSinks', true)
                                    .text(d => d)           
                                    .attr("x", d => sectorForceX( {emissionsType: d }) )
                                    .attr("y", d => sectorForceY( {emissionsType: d }) )
                        // Return forces
                        return {
                            x: d3.forceX(sectorForceX).strength(forceStrength),
                            y: d3.forceY(sectorForceY).strength(forceStrength)
                        };
                        // Functions to manually place foci (X,Y) by sector option
                            function sectorForceX(d) {
                                switch(d.emissionsType){
                                    case sectorOptions[0]:   return vis.bubbleChart.dims.width * 0.4           // In boundary
                                    case sectorOptions[1]:   return vis.bubbleChart.dims.width * 0.75       // Out of boundary
                                }
                            } // end sectorForceX()

                            function sectorForceY(d) {
                                switch(d.emissionsType){
                                    case sectorOptions[0]:   return vis.bubbleChart.dims.height / 2          // In boundary
                                    case sectorOptions[1]:   return vis.bubbleChart.dims.height / 2          // Out of boundary
                                }
                            }; // end sectorForceY()
                    } // end createNetEmissionsForces()

                    // Function to create forces for layout
                    function createDistributionForces() {       
                        const centerCirclesInScaleBandOffset = vis.bubbleChart.scales.emissionsArrayScaleX.bandwidth() / 2;            
                        return {
                            x: d3.forceX(d => vis.bubbleChart.scales.emissionsArrayScaleX(d.emissionsSector) + centerCirclesInScaleBandOffset).strength(forceStrength),
                            y: d3.forceY(d => vis.bubbleChart.scales.emissionsArrayScaleY(d.emissions)).strength(forceStrength)
                        };
                    } // createDistributionForces()
                } // createForces()

                // f. Create force simulation
                function createForceSimulation(data) {
                    forceSimulation = d3.forceSimulation()
                        .force("x", vis.bubbleChart.forces.combine.x)
                        .force("y", vis.bubbleChart.forces.combine.y) 
                        .force('charge', d3.forceManyBody().strength(circleForce))          
                        .force("collide", d3.forceCollide(forceCollide))
                        .alpha(0.5)
                        .velocityDecay(0.5)

                    forceSimulation.nodes(data)
                        .on("tick", () => circles.attr("cx", d => d.x).attr("cy", d => d.y) )
                } // end createForceSimluation()

                // g. Add event listeners
                function addGroupingListeners() {
                    addListener("#bubbleRadio-all",                vis.bubbleChart.forces.combine);
                    addListener("#bubbleRadio-emissionSectors",    vis.bubbleChart.forces.emissionsSectors);
                    addListener("#bubbleRadio-economicSectors",    vis.bubbleChart.forces.economicSectors);
                    addListener("#bubbleRadio-distribution",       vis.bubbleChart.forces.distribution);
                    addListener("#bubbleRadio-sourcesSinks",       vis.bubbleChart.forces.netEmissions);

                    d3.selectAll('.sectorLabel').style('visibility', 'hidden')

                    // Heloer to add each listener to selector
                    function addListener(selector, forces) {
                        d3.select(selector).on("click", function() {                            
                            vis.bubbleChart.methods.updateCommentary(this.getAttribute('scene'))
                            // Sort out the labels
                            d3.selectAll('.sectorLabel')
                                .style('visibility', 'hidden')
                                .style('opacity', 0)
                            d3.selectAll('circle:not(.credit)')
                                .style('stroke', null)
                                .style('stroke-width', null)

                            toggleAxis(distributionGrouping());
                            toggleKey(!distributionGrouping())

                            if(isChecked("#bubbleRadio-economicSectors")){
                                d3.selectAll('.sectorLabel.economicSector').style('visibility', 'visible')
                                    .transition().duration(500)
                                    .style('opacity', 1)
                            } else if(isChecked("#bubbleRadio-emissionSectors")){                      
                                d3.selectAll('.sectorLabel.emissionsSector').style('visibility', 'visible')
                                    .transition().duration(500)
                                    .style('opacity', 1)
                                toggleKey(false)
                            } else if(isChecked("#bubbleRadio-sourcesSinks")){
                                d3.selectAll('.sectorLabel.sourcesSinks').style('visibility', 'visible')
                                    .transition().duration(500)
                                    .style('opacity', 1)                        
                            } else if(isChecked("#bubbleRadio-distribution")){
                                d3.selectAll('circle:not(.credit)')
                                    .style('stroke', '#fff')
                                    .style('stroke-width', '1.5px')
                            }
                            vis.bubbleChart.updateForces(forces); 
                        })
                    } // end addListener()

                    // Helper to update forces on selection
                    vis.bubbleChart.updateForces = function(forces) {
                        forceSimulation
                            .force("x", forces.x)
                            .force("y", forces.y)
                            .force("collide", d3.forceCollide(forceCollide))
                            .alpha(1)
                            .velocityDecay(0.7)
                            .restart();
                        //  Disable repulsive force for distribution chart
                        if(distributionGrouping()){ 
                            forceSimulation.force('charge', null)
                        } else { 
                            forceSimulation.force('charge', d3.forceManyBody().strength(circleForce))
                        }
                    } // end updateForces()

                    // Toggle axis for distribution view
                    function toggleAxis(showAxes) {
                        let onScreenXOffset = 40,
                            offScreenXOffset = -220,
                            onScreenYOffset = 60,
                            offScreenYOffset = 150;

                        // Create axis if not already created
                        if (d3.select(".x-axis").empty()) { createAxes(); }

                        // Toggle axis in/out of view            
                        const xAxis = d3.select(".x-axis"),
                            yAxis = d3.select(".y-axis");

                        if (showAxes) {
                            translateAxis(xAxis, "translate(0," + (height - onScreenYOffset) + ")");
                            translateAxis(yAxis, "translate(" + (onScreenXOffset+vis.bubbleChart.dims.margin.left) + ",0)");
                        } else {
                            translateAxis(xAxis, "translate(0," + (height + offScreenYOffset) + ")");
                            translateAxis(yAxis, "translate(" + (offScreenXOffset+vis.bubbleChart.dims.margin.left) + ",0)");
                        }

                        // Function to createAxes
                        function createAxes() {
                            let numberOfTicks = 10,
                                tickFormat = ".0s",
                                xAxis = d3.axisBottom(vis.bubbleChart.scales.emissionsArrayScaleX).ticks(5, tickFormat),
                                yAxis = d3.axisLeft(vis.bubbleChart.scales.emissionsArrayScaleY).ticks(numberOfTicks, tickFormat);                        

                            svg.append("g").attr("class", "x-axis")
                              .attr("transform", "translate(0," + (height + offScreenYOffset) + ")")
                              .call(xAxis)
                              .selectAll(".tick text")
                                .attr('dy', 0)
                                .attr('x', 0)
                                .attr('y', 10)
                                .classed('xAxisItemLabels', true)
                                .call(vis.helpers.wrap, 150, 1.1)

                            svg.append("g").attr("class", "y-axis yAxisItemLabels")
                              .attr("transform", "translate(" + offScreenXOffset + ",0)")                   
                              .call(yAxis);
                        } // createAxes() 

                        // Function to move axis in/out of view
                        function translateAxis(axis, translation) {
                            axis.transition().duration(500)
                                .attr("transform", translation);
                        } // translateAxis()
                    }// end toggleAxis()
                };  // addGroupingListeners()
       
                // x. Helper functions
                    // Helper to apply collision forces (disabled for Distribution view)
                    function forceCollide(d) {
                        if(distributionGrouping()){ 
                            return 0
                        } else { 
                            return (d.emissionsType === 'Sinks and credits') ?  Math.sqrt(d.emissionsAbated / emissionsMax) * circleSize.max + circlePadding : Math.sqrt(d[unit] /emissionsMax) * circleSize.max + circlePadding                         
                        }
                    }; // end forceCollide()

                    // Helper to check if distribution view is selected
                    function distributionGrouping(){ return isChecked("#bubbleRadio-distribution")};
        }; // renderBubbleChart()

        // C. ADD METHODS
        function addMethods(){
            const commentaryTitle   = d3.select('#bubleChart-narrativeTitle'),
                commentaryText      = d3.select('#bubleChart-narrative'),
                commentaryForward   = d3.select('#bubleChart-forward')

            // Tooltip for bubbles
            vis.bubbleChart.methods.toolTipOn = function(d, x, y, levelisedCost) {
                const actionData = model.actionBusinessCase[d.actionID]
                vis.bubbleChart.tooltipDiv  
                    .html(
                        "<div id = 'bubbleChart-tooltip-header' class= 'tooltipHeader'>"+ d.activity                         
                        +"</div><div id = 'bubbleChart-tooltip-classification' class = 'tooltipLabel'> from "+d.endUserType.toLowerCase()
                        +"s in the "+d.economicSector.toLowerCase()
                        +" sector, for "+d.emissionsSubSector.toLowerCase()+" only</div>"
                        +"</div><div id = 'bubbleChart-tooltip-emissions' class = 'tooltipLabel'> Estimated emisisons: "+vis.numberFormatters.formatComma(d.emissions)
                        +"t CO<sub>2</sub>-e </div><div id = 'bubbleChart-tooltip-description' class = 'tooltipLabel'> About the activity: "+d.activityDescription  
                        +"</div>"
                    )
                    .style("left", (x- 100) + "px")   
                    .style("top", (y + 10) + "px")
                    .transition().duration(200)    
                        .style("opacity", .75);   
            }; // end toolTipOn()

            // Tooltip off
            vis.bubbleChart.methods.toolTipOff = function(){
                vis.bubbleChart.tooltipDiv.transition().duration(500).style("opacity", 0)
            }; // end toolTipOff()    

            // Update commentary content
            vis.bubbleChart.methods.updateCommentary = (scene) => {
                d3.select('#bubbleChart-narrativeTitle').html(vis.commentary.bubbleChart[scene].title)
                d3.select('#bubbleChart-narrative').html(vis.commentary.bubbleChart[scene].content)
            }

            // A. INTRO NARRATIVE
            vis.bubbleChart.methods.intro = () => {
                vis.bubbleChart.methods.updateCommentary('intro')
            }; // end intro())
        }; // end addMthods()        
    }; // end renderBubbleVis()


////////////////////////////////////////////////////////////////////
///////////   PARTICLE SANKEY FOR EMISSIONS AND ENERGY   ///////////        
////////////////////////////////////////////////////////////////////

    // Particle sankey vis hacked together by Little Sketches with the layout code based on Elijah Meeks Particle Sankey work (so all credits to Elijah!)  > https://bl.ocks.org/emeeks/9673c96a682fe3948379  \ MIT License applies                                                                 
    function renderSankey(){
        // Set render status and change view layout
        vis.renderStatus.emissionsSankey = true        

        // 0. Initiate chart data variables in vis object
        vis.sankeyChart = {
            sankeyData:                 [],
            chartData: {
                graphEmissions:  {
                    "nodes" :           [], 
                    "links" :           [] 
                },
                graphEnergy:  {
                    "nodes" :           [], 
                    "links" :           [] 
                },
                nodeIDs:                [],                 
            },
            totalEmissions:             0, 
            totalEnergy:                0,
            view:                       'emissions',
            chartAnnotation:  {
                annotation:             '',
                annotationLabels:       [],         // Stores labels for sankeybar groups 
                annotationLabelDescriptions:       [],        
            },
            animation: {
                timer:                  '',
                tickSpeed:              0.1 
            },  
            colourMap: {            // Mnually set and looked up, otherise 
                residentNode:                       vis.colours.palette['blue'],
                "non-ResidentRatepayerNode":        vis.colours.palette['lightBlue'],
                localBusinessNode:                  vis.colours.palette['yellow'],
                publicSectorNode:                   vis.colours.palette['charcoal'],
                residentialNode:                    'blue',
                commercialNode:                     'red',
                industrialNode:                     'yellow',
                farmingNode:                        'green',
                municipalNode:                           vis.colours.palette['charcoal'],
                stationaryEnergyNode:                    vis.colours.byEmissionSector['Stationary Energy'],
                transportNode:                           vis.colours.byEmissionSector['Transport'],
                wasteNode:                               vis.colours.byEmissionSector['Waste'],
                industrialProcessesAndProductUseNode:    vis.colours.byEmissionSector['Industrial processes and product use'],
                agricultureNode:                         vis.colours.byEmissionSector['Agriculture'],
                "landUse,LandUseChangeAndForestryNode":  vis.colours.byEmissionSector['Land use, land use change and forestry'],
            }                    
        }

        // Create the sankey data structure: filtered for boundary, gross emissions
        createSankeyData(inputData.baselineStocks.filter(d => d.boundary === "Included" && d.emissions > 0))

        // Call function to parse and render
        parseSankeyData( vis.sankeyChart.sankeyData, vis.sankeyChart.chartData.graphEmissions, 'emissions');       // Parse source data to emissions graph data format      
        parseSankeyData(vis.sankeyChart.sankeyData, vis.sankeyChart.chartData.graphEnergy, 'energy')             // Parse source data to energy graph data format   
        renderSankey(vis.sankeyChart.view, 'sankeyChart', 'sankeyCanvas');

        // Update the commentary
        d3.select('#sankeyChart-narrativeTitle').html(vis.commentary.sankeyChart['intro'].title)
        d3.select('#sankeyChart-narrative').html(vis.commentary.sankeyChart['intro'].content)        

        // Add the next button to go to wedges
        d3.select('#sankeyChart-forward').on('click', () =>  {
            d3.selectAll('.menu-option').classed('selected', false)
            d3.select('#menu-wedges').classed('selected', true)
            d3.selectAll('.vis-container').classed('hidden', true).style('display', null)
            d3.select('#'+document.getElementById('menu-wedges').getAttribute('vis')+'-container')
                .classed('hidden', false).style('display', 'grid').style('opacity', 0)
                .transition().duration(1000).style('opacity', 1)
            movePenguins('menu-wedges')
        })

        /////////////////////////////////////////
        //////// SUPPORTING FUNCTIONS    ////////
        /////////////////////////////////////////

            // Create an array of objects to build the sankey layout
            function createSankeyData(inputData){
                const totalEmissions = inputData.map(d => d.emissions).reduce((a, b) => a + b, 0),
                    totalEnergy = inputData.map(d => d.energy).reduce((a, b) => a + b, 0),
                    grossData = inputData.filter(obj => obj.emissions !== obj.emissionsAbated),
                    sankeyLevels = [
                        {
                            label:              "People: Shire folk",
                            description:        "",
                            sourceName:         'endUserType',       
                            targetName:         'economicSector',                    
                        },
                        {   
                            label:              "Parts of the economy",
                            description:        "",
                            sourceName:         'economicSector',       
                            targetName:         'emissionsSector'                    
                        },
                        {  
                            label:              "Emission Sectors",
                            description:        "",
                            sourceName:         'emissionsSector',       
                            targetName:         'emissionsSubSector'                             
                        },
                        {  
                            label:              "Emission Sources",
                            description:        "",
                            sourceName:         'emissionsSubSector',       
                            targetName:         'activity'                     
                        },        
                        {  
                            label:              "Activities we can influence",
                            description:        "",
                            sourceName:         'activity',       
                            targetName:         'activity'            
                        }
                    ]

                sankeyLevels.forEach( (object, i) => {
                    // Get source and target array (options), 
                    const sourceArray = object.sourceOptions ? object.sourceOptions : model.schema.fieldOptions.baselineStocks[object.sourceName],
                        targetArray   = model.schema.fieldOptions.baselineStocks[object.targetName]

                    // Loop through source/targets for matches and assign emissions/energy from eitehr stock propotions or baselinestock data
                    sourceArray.forEach( (source, j) => {                       
                        targetArray.forEach( target => {
                            let emissions = 0, energy = 0, type
                            if(object.sourceTargetProportions){
                                emissions = object.sourceTargetProportions[source][target] * totalEmissions
                                energy    = object.sourceTargetProportions[source][target] * totalEnergy  
                                type = 'ward'
                            } else {
                                grossData.forEach( stockObject => {                        
                                    if(stockObject[object.sourceName] === source && stockObject[object.targetName] === target){
                                        emissions += stockObject.emissions
                                        energy +=   stockObject.energy
                                        type    = object.targetName
                                    }
                                })
                            }
                            // Push object to sankeyData  (excludes the last level) 
                            if(i < sankeyLevels.length - 1 && (energy || emissions)){
                                vis.sankeyChart.sankeyData.push({
                                    linkLevel:      i,
                                    source:         source,
                                    target:         target,
                                    emissions:      emissions,
                                    energy:         energy,
                                    class:          type
                                })                
                            }
                        })
                    })
                    // Push annotation labels and description
                    vis.sankeyChart.chartAnnotation.annotationLabels.push(object.label)
                    vis.sankeyChart.chartAnnotation.annotationLabelDescriptions.push(object.description)
                })
            }; // end createSankeyData()

            // Parse created sankeyData (dataIN) to graph format (dataOUT)
            function parseSankeyData(dataIN, dataOUT, value){          
                dataIN.forEach( d => {
                    if(+d[value] > 0){  
                        dataOUT.nodes.push({ name: d.source, class: d.class });
                        dataOUT.nodes.push({ name: d.target, class: d.class });
                        dataOUT.links.push({ 
                            source:     d.source,
                            target:     d.target,
                            value:      +d[value]
                        });
                        // Update the counter to sum the value     
                        if(value === 'emissions'){
                            vis.sankeyChart.totalEmissions = vis.sankeyChart.totalEmissions + (+d[value]) / (vis.sankeyChart.chartAnnotation.annotationLabels.length - 1);         
                        } else if (value === 'energy'){
                            vis.sankeyChart.totalEnergy = vis.sankeyChart.totalEnergy + (+d[value]) / (vis.sankeyChart.chartAnnotation.annotationLabels.length - 1);    
                        };
                    };
                });

                // Make a library to assign a class
                const nodeClassLibrary = d3.nest().key( d => d.name)
                    .object(dataOUT.nodes)
                
                // Return only the distinct / unique nodes
                dataOUT.nodes = d3.keys(
                    d3.nest().key( d => d.name)
                        .object(dataOUT.nodes)
                )

                // Loop through each link replacing the text with its index from node
                dataOUT.links.forEach( (d, i) => {
                    dataOUT.links[i].source = dataOUT.nodes.indexOf(dataOUT.links[i].source);
                    dataOUT.links[i].target = dataOUT.nodes.indexOf(dataOUT.links[i].target);
                });

                // Now loop through each nodes to make nodes an array of objects rather than an array of strings
                dataOUT.nodes.forEach( (d, i) => {
                    dataOUT.nodes[i] = { 
                        name:   d, 
                        id:     vis.helpers.camelize(d)+'Node',
                        class:  nodeClassLibrary[d][0]['class']
                    };
                    vis.sankeyChart.chartData.nodeIDs.push(vis.helpers.camelize(d)+'Node')
                });
            }; // end parseData()

            // Function to render the vis
            function renderSankey(chartType, svgID, canvasID) { 
                d3.selectAll('#sankeyChart > *').remove()        
                           
                /////////////////////////////////////
                /// 0. SETUP SVG / CANVAS LAYOUT  /// 
                /////////////////////////////////////
                    const visWidth = 1.75* window.innerHeight
                        visHeight = visWidth * 0.7,
                        margin = {top: 10, right: visWidth*0.2,  bottom: visHeight* 0.25, left: visWidth*0.09},
                        width = visWidth - margin.left - margin.right,
                        height = visHeight - margin.top - margin.bottom;

                    const svg = d3.select("#"+svgID)
                        .attr("width", width + margin.left + margin.right)
                        .attr("height", height + margin.top + margin.bottom)
                        .append("g").attr('id','chart')
                            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");  

                    d3.select("#"+canvasID)
                        .attr("width", visWidth)
                        .attr("height", visHeight)

                    const sankey = d3.sankey()
                        .nodeWidth(15)
                        .nodePadding(7)
                        .size([width, height]);

                    let path = sankey.link(),
                        link,
                        freqCounter = 1

                    const formatNumber = d3.format(",.0f"),
                        formatCO2 = (d) => formatNumber(d) + " tCO2-e",
                        formatTJ  = (d) => formatNumber(d) + " TeraJoules"                 

                    // Add annotation group
                    vis.sankeyChart.chartAnnotation.annotation = d3.select('#sankeyChart').append('g').attr('id', 'annotationGroup')            

                    // Render based on chartType
                    let totalCounter, dataGraph, format
                    if (chartType === 'emissions') { 
                        dataGraph = vis.sankeyChart.chartData.graphEmissions;      // Set the graphing data to emissions
                        totalCounter = vis.sankeyChart.totalEmissions;             // Set total counter to emission to work out Pcts for labels
                        format = formatCO2;                                        // Format labels for t CO2-e
                        annotateEmissions()                                        // Set Annotation fo0r Emissions
                    } else if(chartType === 'energy'){       
                        dataGraph = vis.sankeyChart.chartData.graphEnergy           // Set the graphing data to energy
                        totalCounter = vis.sankeyChart.totalEnergy                  // Set total counter to emission to work out Pcts for labels
                        format = formatTJ;                                          // Format labels for TeraJoules
                        annotateEnergy()                                            // Set Annotation fo0r Emissions
                    };

                ////////////////////////////////////
                /// 1. RENDER SVG SANKEY LAYOUT  /// 
                ////////////////////////////////////  
                    // a. Setup sankey layout
                        sankey.nodes(dataGraph.nodes)
                            .links(dataGraph.links)
                            .layout(25);
                    
                    // b. Append links with labels
                        link = svg.append("g").selectAll(".link")
                            .data(dataGraph.links)
                            .enter().append("path")
                                .attr("class", "link")
                                .attr("d", path)
                                .style("stroke-width", d => Math.max(1, d.dy))
                        link.append("title")
                            .text(d => d.source.name + " → " + d.target.name + "\n" + format(d.value) + " (" + Math.round(d.value / totalCounter * 1000)/10+'%)')

                    // c. Append the nodes
                        const node = svg.append("g").selectAll(".node")
                            .data(dataGraph.nodes)
                            .enter().append("g")
                                .attr("id", d => d.id+'Group')      
                                .attr("class", "node")  
                                .attr("transform", d => "translate(" + d.x + "," + d.y + ")")            
                            .call(d3.drag()
                                .on("start", function() { this.parentNode.appendChild(this); })
                                .on("drag", dragmove))

                        node.append("rect").attr("id", d => d.id)        
                            .attr("height", d => d.dy)
                            .attr("width", sankey.nodeWidth())
                            .style("fill", (d, i) => d.color = vis.sankeyChart.colourMap[d.id] ? vis.sankeyChart.colourMap[d.id] : d3.schemeSet3[i%d3.schemeSet3.length] )
                            .style("stroke", "none")
                                .append("title")
                                .text(d => d.name + "\n" + format(d.value) + " (" + Math.round(d.value / totalCounter * 1000)/10+'%)')

                    // d. Add labels on right side 
                        node.append("text")
                            .attr('class',  d => 'label '+d.class)
                            .attr("x",  6 + sankey.nodeWidth())
                            .attr("y", d => d.dy / 2)
                            .attr("dy", ".35em")
                            .attr("text-anchor", "start")
                            .attr("transform", null)
                            .text(d => d.name)
                            .filter( d => d.x < width * 0.8 )
                                .call(vis.helpers.wrap, width * 0.15 , 1)
                            .filter( d => d.x < width * 0.1 )     
                                .attr("dx", -30)                 
                                .attr("text-anchor", "end")

                    // e. Setup particles
                        const linkExtent = d3.extent(dataGraph.links,  d => d.value),
                            frequencyScale = d3.scaleLinear().domain(linkExtent).range([0.05,1]),
                            particleSize = d3.scaleLinear().domain(linkExtent).range([1,5]);

                        dataGraph.links.forEach( link => {
                            link.freq = frequencyScale(link.value);
                            link.particleSize = 2;
                            link.particleColor = d3.scaleLinear()
                                .domain([0,1])
                                .range([link.source.color, link.target.color]);
                        })

                    // f. Fade in the nodes and links and annotation
                        node.style('opacity',0) .transition().duration(500)
                            .style('opacity',1);     
                        link.style('opacity',0) .transition().duration(500)
                            .style('opacity',1);     

                ////////////////////////////
                /// 2. RENDER PARTICLES  /// 
                //////////////////////////// 
           
                    // a. Setup the tick function in the global vis object
                        let particles = []
                        vis.sankeyChart.animation.tick = function(elapsed, time) {
                            particles = particles.filter(d => d.current < d.path.getTotalLength());
                            d3.selectAll("path.link").each( function (d) {
                                var offset = (Math.random() - 0.5) * d.dy;
                                if (Math.random() < d.freq) {
                                    var length = this.getTotalLength();
                                    particles.push({
                                        link: d, 
                                        time: elapsed, 
                                        offset: offset, 
                                        path: this, 
                                        length: length, 
                                        animateTime: length
                                    })
                                }
                            });
                          particleEdgeCanvasPath(canvasID, elapsed);
                        }; // end tick()
                        
                    // b. Call the timer for particles
                        vis.sankeyChart.animation.timer = d3.timer(vis.sankeyChart.animation.tick , 1500)

                    // c. Move canvas with margins
                        positionCanvas()

                    // x. Supporting functions
                        // Prepare canvas element to show particles
                        function particleEdgeCanvasPath(canvasID, elapsed) {
                            let context = d3.select("#"+canvasID).node().getContext("2d"),
                                clearingMargin = 5

                            context.clearRect(-clearingMargin , -clearingMargin ,width + 2*clearingMargin, height + 2*clearingMargin);

                            for (let x in particles) {
                                let currentTime = elapsed - particles[x].time;
                                if(particles[x].path){
                                    particles[x].current = currentTime * vis.sankeyChart.animation.tickSpeed;
                                    let currentPos = particles[x].path.getPointAtLength(particles[x].current);
                                    context.beginPath();

                                    context.fillStyle = particles[x].link.particleColor(particles[x].current / particles[x].path.getTotalLength());
                                    context.arc(currentPos.x, currentPos.y + particles[x].offset, particles[x].link.particleSize, 0, 2*Math.PI);
                                    context.fill();
                                }
                            }
                        }; // end particleEdgeCanvasPath()

                        // Function to drag nodes
                        function dragmove(d) {
                            d3.select(this).attr("transform", "translate(" + d.x + "," + (d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))) + ")");
                            sankey.relayout();
                            link.attr("d", path);     
                        };  // end dragmove()

                        // Re-position canvase for margins
                        function positionCanvas(){
                            const c = document.getElementById(canvasID),
                                ctx = c.getContext("2d");
                            ctx.translate(margin.left, margin.top);
                        }; // end positionCanvas()
                
                ////////////////////////////////
                /// X. SUPPORTING FUNCTIONS  ///
                //////////////////////////////// 

                    // Function to annotate the SVG with title, labels and commentary for emissions
                    function annotateEmissions(){
                        const annotation = vis.sankeyChart.chartAnnotation.annotation
                        // Append labels
                        annotation.selectAll('.annotationLabel')
                          .data(vis.sankeyChart.chartAnnotation.annotationLabels)
                          .enter().append('text').attr('class','annotationLabel')
                          .text(function(d, i){ return d ;} )
                          .attr('x', function(d, i){return margin.left + i * width / (vis.sankeyChart.chartAnnotation.annotationLabels.length - 1)} )
                          .attr('y', margin.top + height + margin.bottom * 0.1) 
                          .attr("dy", ".35em")
                          .call(vis.helpers.wrap, width / 8, 1)   

                        // Fade in
                        annotation.style('opacity',0)
                            .transition().duration(1500)
                            .style('opacity',1)
                    }; // end annotateEmissions()

                    function annotateEnergy(){
                        const annotation = vis.sankeyChart.chartAnnotation.annotation            
                        // Append Annotation
                        annotation.append('text').attr('class','title')
                          .text('energy particles')
                          .attr('x', margin.left)
                          .attr('y', margin.top) 

                        annotation.append('text').attr('id', 'switchButton')
                          .attr('class','title')
                          .text('>')
                          .attr('x', 0)
                          .attr('y', margin.top)
                          .on('click', switchView)      
                          .transition().duration(1500)     
                          .attr('x', margin.left + 330)

                        // Append commentary
                        annotation.append('text')
                          .attr('class','annotation')
                          .text(vis.sankeyChart.chartAnnotation.annotationParagraphs[2]+ Math.round(totalEnergy) +vis.sankeyChart.chartAnnotation.annotationParagraphs[3])
                          .attr('x', margin.left)
                          .attr('y', margin.top + 20) 
                          .attr("dy", ".35em")
                          .call(vis.helpers.wrap, 400, 1.2)

                        // Append labels
                        annotation.selectAll('.annotationLabel')
                          .data(vis.sankeyChart.chartAnnotation.annotationLabels)
                          .enter().append('text').attr('class','annotationLabel')
                          .text(function(d, i){ return d ;} )
                          .attr('x', function(d, i){return margin.left + i * width / (vis.sankeyChart.chartAnnotation.annotationLabels.length - 1)} )
                          .attr('y', margin.top + height + margin.bottom *0.4) 
                          .attr("dy", ".35em")
                          .call(vis.helpers.wrap, width / 5, 1.2)        
                        
                        // Fade in
                        annotationstyle('opacity',0)
                            .transition().duration(1500)
                            .style('opacity',1)
                    }; // end annotateEnergy()
            }; // end renderVis()

            // Change the scree to as wide as possible to accomodate sankey
            function toWideScreen(){
            }; // end toWideScreen()

            // Resize SVG and canvas on resize
            function resizeSankey(){
                // TO BE WRITTEN
            }; // end resizeSankey()

            // Custom view functions       
            function switchView(){
                if(vis.sankeyChart.view === 'emissions') {      
                  renderVis('energy')
                  vis.sankeyChart.view = 'energy'
                } else if(vis.sankeyChart.view === 'energy'){
                  renderVis('emissions')
                  vis.sankeyChart.view = 'emissions'
                }
            }; // endSwitchView
    }; // end renderSankey()


////////////////////////////////////////////////////////////////////
////////   MARGINAL ABATEMENT COST CURVE INTERACTIVE TOOL  /////////
////////////////////////////////////////////////////////////////////
       
    function renderCostCurve(svgID = 'costCurve'){
        vis.renderStatus.costCurve = true     
        // 0. Setup cost curve data object, and add methods
            vis.costCurve = {
                chartData:                  [],
                svg:                        d3.select('#'+svgID),
                emissionsData: {
                    baselineEmissions:      '', 
                    targetEmissions:        '', 
                    cumAbatement:           0,
                },   
                metrics: {
                    benefitNo:              0,
                    benefitEmissions:       0,
                    costNo:                 0,
                    costEmissions:          0,
                    aveAbatementCost:       0
                },
                dims: {
                    canvasWidth:            1080, 
                    canvasHeight:           500, 
                    margin: {
                        top:                40, 
                        right:              200, 
                        bottom:             100, 
                        left:               200
                    },
                    height:                 '',
                    width:                  ''        
                },
                abatementInTargetYear:      0,
                scales:                     {},
                view:                       'curve',
                blockData: {
                    blockIDs:               [], 
                    blockClasses:           [],
                    optionTypeList:         [], 
                    legendIDs:              [],
                },
                tooltipDiv:                 '',
                emissionsScaleMax:          'totalEmissions',
                targetLineRendered:         false,
                targeLineLabelYpos:         60,
                actors:                     [],
                methods:                    {}              
            }

            createCostCurveData();          // Retreive actionBusinessCase data and add create ID/class names, sort by least cost and create blockIDs array
            addCostCurveMethods()

        // 1. Draw "Crisp" emissions abatement cost curve
            drawCostCurve(vis.costCurve.chartData, 'levelisedCost', 2000);

        // 2. Add event listener to close the action business case inputs page and to date selector
            d3.select('#costCurveNext').on('click', () => vis.costCurve.methods.showIntro())

        // 3. Set the starting view
            vis.costCurve.methods.showIntro() 

        // Function to add charting methods of the vis.costCurve object
        function addCostCurveMethods(){
            // Function to draw GreenPower shadow price
            vis.costCurve.methods.offsetLine = function(price, className) {
                const lineData = [ 
                    {"x": 0,    "y": price},
                    {"x": vis.costCurve.emissionsData.targetEmissions, "y": price}
                ]
                const line = d3.line()
                    .x( d => vis.costCurve.scales.xScale(d.x) )
                    .y( d => vis.costCurve.scales.yScale(d.y) )
                vis.costCurve.svg.append('path')
                    .attr('class', 'offsetLine '+className)
                    .attr("d", line(lineData))
            }; // end offsetLine()

            // Function to draw target line
            vis.costCurve.methods.targetLine = function(target, className) {
                const lineData = [ 
                    {"x": target, "y": 0 },
                    {"x": target, "y": height}
                ]
                const line = d3.line()
                    .x( d => vis.costCurve.scales.xScale(d.x))
                    .y( d => vis.costCurve.scales.yScale(d.y))

                vis.costCurve.svg.append('path')
                    .attr('class', 'offsetLine '+className)
                    .attr("d", line(lineData))
            }; // end targetLine()

            // Tooltip for blocks
            vis.costCurve.methods.toolTipOn = function(d, x, y, levelisedCost) {
                const actionData = model.actionBusinessCase[d.actionID]
                vis.costCurve.tooltipDiv  
                    .html("<div id = 'costCurve-tooltip-header' class= 'tooltipHeader'>"+ d.name 
                        +"</div><div id = 'costCurve-tooltip-uptakeHeader'       class = 'tooltipLabel'>Modelled uptake: "+actionData.About.Target['Units']
                        +"</div><div id = 'costCurve-tooltip-contributionHeader' class = 'tooltipLabel'>Contribution to Net zero</div></div><div id = 'costCurve-tooltip-abatementHeader' class = 'tooltipLabel'>Emissions abatement</div><div id = 'costCurve-tooltip-abatementCostHeader' class = 'tooltipLabel'>Abatement cost per tCO<sub>2</sub>e</div><div id = 'costCurve-tooltip-uptake' class = 'tooltipNumber'>"
                        +vis.numberFormatters.formatComma(Math.round(actionData["Uptake"]["Baseline"]["Target"][model.schema.reportTime.analysisPeriod]))+" <span class = 'tooltipUnit'>"+actionData["Uptake"]["Units"]+"<br> by "+(model.schema.time.startTime + model.schema.reportTime.analysisPeriod)
                        +"</span></div><div id = 'costCurve-tooltip-contribution' class = 'tooltipNumber'>"
                        + Math.round(d.abatementPct * 1000)/10+"%</div><div id = 'costCurve-tooltip-abatement' class = 'tooltipNumber'>" 
                        +vis.numberFormatters.formatComma(d.abatement)+"<br><span class = 'tooltipUnit'>t CO<sub>2</sub>e p.a.</span></div><div id = 'costCurve-tooltip-abatementCost' class = 'tooltipNumber'> $"
                        +Math.round(d['levelisedCost']*100)/100 
                        +"</div><div id = 'costCurve-tooltip-instruction' class = 'tooltipInstruction' bold'>Click on the block to read about the model assumptions<div>" )
                    .style("left", (x) + "px")   
                    .style("top", (y + 10) + "px")
                    .transition().duration(200)    
                        .style("opacity", .75);   
            }; // end toolTipOn()

            vis.costCurve.methods.toolTipOff = function(){
                vis.costCurve.tooltipDiv.transition().duration(500).style("opacity", 0)
            }; // end toolTipOff()

            // Animate the cost curve over time
            vis.costCurve.methods.timeLapseCostCurve = function(intervalDuration = 1500, start = 0, end = model.schema.reportTime.analysisPeriod){
                for(let i = start; i < end; i ++){
                    setTimeout( () => {
                        updateCostCurve(i)
                        let year = model.schema.time.startTime + i + 1           
                        document.getElementById('costCurve-timeSelector').value = year
                        document.getElementById('costCurve-time').innerHTML = year
                    }, i * intervalDuration) 
                }        
            }; // end timeLapseCostCurve 

            // Show the target and target line
            vis.costCurve.methods.showTargetAndGap = function(duration = 1000){ 
                if(!vis.costCurve.targetLineRendered){
                    vis.costCurve.targetLineRendered = true

                    // Add the target and gap lines
                        const annotationMarks = vis.costCurve.svg.append("g").attr('id', 'costCurveAnnotation-group'),
                            targetLine        = annotationMarks.append('g').attr('id', 'costCurveTargetLineGroup').style('opacity', 0),
                            gapToTargetGroup  = annotationMarks.append('g').attr('id', 'costCurveGapToTarget').style('opacity', 0),
                            targetAbatement   = vis.wedgesChart.stockTotal.referenceWorld["netEmissions"][model.schema.reportTime.analysisPeriod],
                            gapToTarget        = targetAbatement - vis.costCurve.abatementInTargetYear

                    // Target line and label
                        targetLine.append('line').attr('id', 'costCurveTargetLine')
                            .attr('x1',  vis.costCurve.scales.xScale(targetAbatement))
                            .attr('y1',  vis.costCurve.dims.canvasHeight - vis.costCurve.dims.margin.bottom - vis.costCurve.dims.margin.top)
                            .attr('x2',  vis.costCurve.scales.xScale(targetAbatement))
                            .attr('y2',  0)

                        const targetLabel =  targetLine.append('g').attr('id', 'costCurveTargetLabel')   
                            .style('transform', 'translate('+(10 + vis.costCurve.scales.xScale(targetAbatement))+'px , '+(vis.costCurve.targeLineLabelYpos + 20)+'px)')
                        targetLabel.append('text').attr('class', 'costCurveTargetText')
                            .text('Abatement target in 2030' )
                        targetLabel.append('text').attr('class', 'costCurveTargetText')
                            .text(vis.numberFormatters.formatComma(targetAbatement) +' tCO2-e' )
                            .attr('dy', 15)

                    // Gap to trget line and label
                        gapToTargetGroup.append('line').attr('id', 'costCurveAbatementLine')
                            .attr('x1',  vis.costCurve.scales.xScale(vis.costCurve.abatementInTargetYear))
                            .attr('y1',  vis.costCurve.dims.canvasHeight - vis.costCurve.dims.margin.bottom - vis.costCurve.dims.margin.top)
                            .attr('x2',  vis.costCurve.scales.xScale(vis.costCurve.abatementInTargetYear))
                            .attr('y2',  0)
                        const gapToTargetLabel =  gapToTargetGroup.append('g').attr('id', 'costCurveGapToTargetLabel')   
                            .style('transform', 'translate('+(10 + vis.costCurve.scales.xScale(vis.costCurve.abatementInTargetYear))+'px , '+(vis.costCurve.targeLineLabelYpos + 60)  +'px)')
                        gapToTargetLabel.append('text').attr('id', 'costCurveGaptoTarget-label1').attr('class', 'costCurveAbatementText')
                            .text('Gap to reaching zero emissions' )
                        gapToTargetLabel.append('text').attr('id', 'costCurveGaptoTarget-label2').attr('class', 'costCurveAbatementText')
                            .text('of '+vis.numberFormatters.formatComma(gapToTarget) +' tCO2-e' )
                            .attr('dy', 15)
                }

                d3.selectAll('#costCurveTargetLineGroup, #costCurveGapToTarget').transition().duration(duration)
                    .style('opacity', 1)
            }; // end showTargetAndGap()

            // Update the data and callback to update the blocks
            vis.costCurve.methods.updateCostCurveData = function(time = model.schema.reportTime.analysisPeriod, callback){
                // 1. Retrieve CostCurve data from all actionBusinessCases and pass to vis.costCurve global object
                    vis.costCurve.chartData.forEach( blockObject => {
                        const actionID = blockObject.actionID,
                            actionData = model.actionBusinessCase[actionID],
                            actionDuration          = actionData['Action parameters']['Action duration'],
                            annualAbatement         = !isEmpty(actionData['System impacts']['Marginal impact']['emissions']['value'])     ? -actionData['System impacts']['Marginal impact']['emissions']['value'][time] : actionData['System impacts']['Marginal impact']['emissionsAbated']['value'][time] ,
                            annualEnergy            = !isEmpty(actionData['System impacts']['Marginal impact']['energy']['value'])        ? -actionData['System impacts']['Marginal impact']['energy']['value'][time] : 0,
                            annualElectricity       = !isEmpty(actionData['System impacts']['Marginal impact']['naturalVolume']['value']) ? -actionData['System impacts']['Marginal impact']['naturalVolume']['value'][time] : 0,
                            baselineEmissions       = inputData.baselineStocks.filter(d => d.boundary === 'Included').reduce((sum, d) => d.emissions + sum, 0),
                            baselineEnergy          = inputData.baselineStocks.filter(d => d.boundary === 'Included').reduce((sum, d) => d.energy + sum, 0),
                            baselineElectricity     = inputData.baselineStocks.filter(d => d.boundary === 'Included').reduce((sum, d) => d.naturalVolume + sum, 0),
                            levelisedAbatementCost  = actionData.About.Impact.Type !== 'additional' ? actionData['Summary metrics (per unit)']['Levelised cost']['emissions'] : -actionData['Summary metrics (per unit)']['Levelised cost']['emissionsAbated']  

                        // Update the block object with new action ID
                        blockObject.levelisedCost       = actionData.About.Impact.Type !== 'additional' ? actionData['Summary metrics (per unit)']['Levelised cost']['emissions'] : -actionData['Summary metrics (per unit)']['Levelised cost']['emissionsAbated']
                        blockObject.abatement           = annualAbatement
                        blockObject.abatementPct        = annualAbatement / baselineEmissions

                        blockObject.levelisedCostEnergy = actionData['Summary metrics (per unit)']['Levelised cost']['energy']
                        blockObject.abatementEnergy     = annualEnergy
                        blockObject.abatementPctEnergy  = annualEnergy / baselineEmissions

                        blockObject.levelisedCostElec   = actionData['Summary metrics (per unit)']['Levelised cost']['naturalVolume']
                        blockObject.abatementElec       = annualElectricity
                        blockObject.abatementPctElec    = annualElectricity / baselineElectricity
                    })

                // 2. Sort by levelised cost (lowest first)
                    vis.costCurve.chartData.sort((a,b) => (a.levelisedCost >b.levelisedCost) ? 1 : ((b.levelisedCost > a.levelisedCost) ? -1 : 0) ); 

                // 3. Update the cumulative abatement and all metrics for the sorted chart data
                    vis.costCurve.emissionsData.cumAbatement = 0
                    vis.costCurve.blockData.blockIDs         = []
                    vis.costCurve.blockData.blockClasses     = []
                    vis.costCurve.metrics.benefitNo          = 0
                    vis.costCurve.metrics.benefitEmissions   = 0
                    vis.costCurve.metrics.costNo             = 0
                    vis.costCurve.metrics.costEmissions      = 0
                    vis.costCurve.metrics.aveAbatementCost   = 0

                    vis.costCurve.chartData.forEach( obj => {      
                        obj.abatementCumulative = vis.costCurve.emissionsData.cumAbatement;
                        vis.costCurve.emissionsData.cumAbatement += obj.abatement;      
                        vis.costCurve.blockData.blockIDs.push(obj.blockID)          // build BlockIDs array with actionIDs (for scribbles)
                        vis.costCurve.blockData.blockClasses.push(obj.class)        // build blockClasses array (for scribbles)    
                        vis.costCurve.metrics.benefitNo        += obj.levelisedCost < 0 ? 1 : 0
                        vis.costCurve.metrics.benefitEmissions += obj.levelisedCost < 0 ? obj.abatement : 0
                        vis.costCurve.metrics.costNo           += obj.levelisedCost > 0 ? 1 : 0
                        vis.costCurve.metrics.costEmissions    += obj.levelisedCost > 0 ? obj.abatement : 0
                    })  
                    vis.costCurve.chartData.forEach( obj => {
                        vis.costCurve.metrics.aveAbatementCost += obj.levelisedCost * obj.abatement / vis.costCurve.emissionsData.cumAbatement  
                    })

                    vis.costCurve.metrics.aveAbatementCost = (vis.costCurve.emissionsData.cumAbatement) ? vis.costCurve.metrics.aveAbatementCost : 0
                // 4. Callback to update blocks
                   callback(vis.costCurve.chartData, 'levelisedCost')
            }; // end updateCostCurveData()

            // Update the curve blocks
            vis.costCurve.methods.updateBlocks = function(chartData, levelisedCostType = 'levelisedCost', animationTime = 500){
                // 1. Update the scales and axis
                const  totalAbatement = (vis.costCurve.emissionsScaleMax === 'totalEmissions') ? d3.max([0.1, d3.sum(chartData, d =>  d.abatement), vis.costCurve.abatementInTargetYear]) : vis.wedgesChart.stockTotal.referenceWorld["netEmissions"][model.schema.reportTime.analysisPeriod]
                vis.costCurve.scales.xScale.domain([0,totalAbatement]);
                vis.costCurve.scales.yScale.domain(d3.extent(chartData,  d => d[levelisedCostType]) );
                vis.costCurve.scales.yScale.domain([d3.max([-500, d3.min(chartData,  d => d[levelisedCostType])]) , d3.max(chartData,  d => d[levelisedCostType]) ] );
                vis.costCurve.scales.yAxis   = d3.axisLeft().scale(vis.costCurve.scales.yScale).ticks(10).tickFormat(d => (d === 0) ? '' : vis.numberFormatters.formatCostInteger(d) )

                d3.select('.costCurve.x.axis').transition().duration(animationTime).ease(d3.easeLinear)
                    .attr("transform", "translate(0,"+ vis.costCurve.scales.yScale(0) +")")
                    .call(vis.costCurve.scales.xAxis)
                d3.select('.costCurve.y.axis').transition().duration(animationTime).ease(d3.easeLinear)
                    .call(vis.costCurve.scales.yAxis)

                // 2. Update the block positions and widths
                chartData.forEach( blockObject => {       
                    d3.select('#'+blockObject.blockID).transition().duration(animationTime).ease(d3.easeLinear)
                        .attr("x", d => vis.costCurve.scales.xScale(d.abatementCumulative) )
                        .attr("width", d => vis.costCurve.scales.xScale(d.abatement))        // Prevent width from being zero
                        .attr("y", d => d[levelisedCostType] > 0 ? vis.costCurve.scales.yScale(d[levelisedCostType]) : vis.costCurve.scales.yScale(0) )  // Offset positive blocks by height to position correctly on y-axis
                        .attr("height", d => Math.abs(vis.costCurve.scales.yScale(d[levelisedCostType] ? d[levelisedCostType] : 0) - vis.costCurve.scales.yScale(0)) )          
                })

                // 3. Update the summary metrics position and numbers
                d3.select('#costCurveMetrics-group').transition().duration(animationTime).ease(d3.easeLinear)                
                    .style('transform', 'translate('+(vis.costCurve.scales.xScale(vis.costCurve.emissionsData.cumAbatement)+10)+'px,'+(vis.costCurve.dims.margin.top*0)+'px)')
                d3.select('#ccMetrics-abatement').text(vis.numberFormatters.formatComma(vis.costCurve.emissionsData.cumAbatement)+' tCO2-e of emissions')
                d3.select('#ccMetrics-abatementCost-l1').text( vis.costCurve.metrics.aveAbatementCost < 0  ? 'saved at an average benefit' : 'saved at an average cost')
                d3.select('#ccMetrics-abatementCost-l2').text('of $'+Math.round(Math.abs(vis.costCurve.metrics.aveAbatementCost*10))/10 + ' per tCO2-e')

                // 3. Update the annotation group (target lines etc.)
                const targetAbatement = vis.wedgesChart.stockTotal.referenceWorld["netEmissions"][model.schema.reportTime.analysisPeriod],
                    gapToTarget = targetAbatement - vis.costCurve.abatementInTargetYear  
                d3.select('#costCurveTargetLabel').transition().duration(animationTime).ease(d3.easeLinear)      
                    .style('transform', 'translate('+(10 + vis.costCurve.scales.xScale(targetAbatement))+'px , '+vis.costCurve.targeLineLabelYpos+'px)')
                d3.select('#costCurveAbatementLine').transition().duration(animationTime).ease(d3.easeLinear)  
                    .attr('x1', vis.costCurve.scales.xScale(vis.costCurve.emissionsData.cumAbatement))
                    .attr('x2', vis.costCurve.scales.xScale(vis.costCurve.emissionsData.cumAbatement))
                d3.select('#costCurveGapToTargetLabel').transition().duration(animationTime).ease(d3.easeLinear)     
                    .style('transform', 'translate('+(10 + vis.costCurve.scales.xScale(vis.costCurve.emissionsData.cumAbatement))+'px , '+(vis.costCurve.targeLineLabelYpos + 30)+'px)')
                d3.select('#costCurveGaptoTarget-label1').text(gapToTarget > 0 ? 'Gap to reaching zero emissions' : 'Abatement beyond zero emissions' )
                d3.select('#costCurveGaptoTarget-label2').text('of '+vis.numberFormatters.formatComma(gapToTarget) +' tCO2-e' )
            }; // end updateBlocks()

            // Tabular view
            vis.costCurve.methods.toggleTable = function(levelisedCostType = 'levelisedCost', duration = 2000){
                // Tranitiion block to small dot points sqaures
                const dotWidth = 6,
                    actorMap =  {
                        household:              "Households",
                        business:               "Businesses",
                        farm:                   "Farms and land holders",
                        supplier:               "Service providers and suppliers",
                        commercialOperator:     "Commercial project owners",
                        commuter:               "Commuters"
                    }
                if(vis.costCurve.view === 'curve'){
                    vis.costCurve.view = 'table'
                    let yPos = vis.costCurve.dims.margin.top/ 4,
                    xpos = vis.costCurve.scales.xScale(0)  + 100

                    d3.selectAll('.actorHeader').remove()
                    d3.select('#zeroCostLabel-group')
                        .transition().duration(duration)
                        .style('opacity', 0)                    
                    vis.costCurve.actors.forEach( (actor, i) => {
                        
                        vis.costCurve.svg.append('text')
                            .classed('actorHeader', true)
                            .attr('x', xpos )   
                            .attr('y', yPos)     
                            .text(actorMap[actor])
                        yPos += 10

                        d3.selectAll('#costCurveGroup .block.'+actor)
                            .on("mouseover", null )          
                            .on("mouseout", null)  
                            .transition().duration(duration)
                                .attr('x', xpos )
                                .attr('y', (d, j) => (dotWidth + 7) * j + yPos)
                                .attr("width", dotWidth)  
                                .attr("height", dotWidth) 
                                .style('fill', '#000')
                            .transition().duration(250)                          
                                .attr('rx', '50%')
                                .attr('ry', '50%')

                        d3.selectAll('.optionLabel.'+actor).transition().duration(duration)
                            .attr("x",  d => xpos + dotWidth * 2 )
                            .attr('y',  (d, j) =>  (dotWidth + 7) * j + yPos)
                            .attr("dy", dotWidth * 5 / 6)
                            .attr("dx", 0)
                            .style('fill', '#000')

                        if(yPos > vis.costCurve.dims.canvasHeight - 300){
                            yPos = vis.costCurve.dims.margin.top/ 4 
                            xpos += 350
                        } else{ 
                            yPos += (d3.selectAll(".block."+actor)._groups[0].length) * (dotWidth + 7) + 20

                        }
                    })

                    d3.selectAll('#costCurveLegend, #costCurveMetrics-group, #costCurveXaxis, #costCurveYaxis').style('opacity', 0)         // Hide all chart junk           

                } else {
                    vis.costCurve.view = 'curve'
                    d3.selectAll('.actorHeader').remove()     
                    d3.select('#zeroCostLabel-group')
                        .transition().duration(duration + 250).delay(duration)
                        .style('opacity', null)

                    d3.selectAll('#costCurveGroup .block').data(vis.costCurve.chartData)
                        .on("mouseover", d => vis.costCurve.methods.toolTipOn(d, d3.event.pageX, d3.event.pageY) )          
                        .on("mouseout", vis.costCurve.methods.toolTipOff) 
                        .transition().duration(250)                          
                            .attr('rx', '0%')
                            .attr('ry', '0%')
                        .transition().duration(duration)
                            .attr("x", d => vis.costCurve.scales.xScale(d.abatementCumulative) )
                            .attr("width", d => vis.costCurve.scales.xScale(d3.max([d.abatement, 0.000001]) ))      // Prevent width from being zero
                            .attr("y", d => d[levelisedCostType] > 0 ? vis.costCurve.scales.yScale(d[levelisedCostType]) : vis.costCurve.scales.yScale(0) )  // Offset positive blocks by height to position correctly on y-axis
                            .attr("height", d => Math.abs(vis.costCurve.scales.yScale(d[levelisedCostType]) - vis.costCurve.scales.yScale(0)) )         
                            .style('fill', null)

                    d3.selectAll(".optionLabel").transition().duration(duration).delay(250)
                        .attr("x",      d => vis.costCurve.scales.xScale(d.abatementCumulative) + vis.costCurve.scales.xScale(d3.max([d.abatement, 0.000001]))/ 2 )
                        .attr('y',      d => vis.costCurve.scales.yScale(d[levelisedCostType]) ) 
                        .attr("dy",     d => (d[levelisedCostType] > 0 ? -3 : 8) + d.dy )                                         
                        .attr("dx",     function(d){ return d[levelisedCostType] > 0 ? -this.getBBox().width + d.dx : d.dx }) 
                        .style('fill', null)
                }
            }; // toggleTable

            //////////////////////////////////////
            //////  STORY SEQUENCE METHODS  ////// 
            //////////////////////////////////////

                const narrative = {}

                // Update commentary content
                vis.costCurve.methods.updateCommentary = scene => {
                    d3.select('#costCurve-narrativeTitle').html(vis.commentary.costCurve[scene].title)
                    d3.select('#costCurve-narrative').html(vis.commentary.costCurve[scene].content)
                }

                // COST CURVE EXPLAINER
                vis.costCurve.methods.showIntro = function(duration = 500){
                    // On loop (return)
                    d3.select('#costCurvePrevious').on('click', null).style('opacity', 0)
                    vis.costCurve.methods.toggleTable('levelisedCost', 0)
                    // 0. Scene setup                    
                    d3.select('#costCurve').style('opacity', 1).classed('perspective', true)
                    d3.selectAll('#costCurveLegend, #costCurveMetrics-group, #costCurveXaxis, #costCurveYaxis').style('opacity', 0)
                    d3.select('#costCurve-narrative').classed('perspective', false).style('z-index', null)
                        .transition().duration(duration)
                        .style('opacity', 1)
                    // 1.Update narrative a buttons
                    vis.costCurve.methods.updateCommentary('intro') 
                    d3.selectAll('#costCurve-back, #costCurve-forward').on('click', null)                    
                    setTimeout( () => {
                        d3.select('#costCurve-back').on('click', null).style('opacity', 0)
                        d3.select('#costCurve-forward').on('click', () => vis.costCurve.methods.showTargetYearCostCurve())
                    }, duration) 
                }; // end showIntro()

                // COST CURVE WITH FOCUS ON BLOCKS ONLY
                vis.costCurve.methods.showTargetYearCostCurve = function(duration = 1000){
                    // 0. Scene setup              
                    vis.costCurve.methods.toggleTable()
                    d3.select('#costCurve').classed('perspective', false)                           
                    d3.selectAll('#costCurveLegend, #costCurveMetrics-group, #costCurveXaxis, #costCurveYaxis').style('opacity', 0)
                        document.getElementById('costCurve-timeSelector').value = model.schema.time.startTime + model.schema.reportTime.analysisPeriod
                        document.getElementById('costCurve-time').innerHTML = model.schema.time.startTime + model.schema.reportTime.analysisPeriod             
                    // 1. Narrative: reopened on delay to be pinned to bottom on delay
                    d3.select('#costCurve-narrative').classed('perspective', true).style('z-index', 0)
                        .transition().duration(duration/2).style('opacity', 0)   
                    setTimeout( () => {
                        d3.select('#costCurve-narrative-container').style('grid-area', '5 / 2 / 6 / 6')
                        d3.select('#costCurve-narrative').html(narrative.showTargetYearCostCurve).classed('perspective', false)
                            .transition().duration(duration/2).style('opacity', 1)
                    }, duration / 2) 
                    // 1.Update narrative a buttons
                    vis.costCurve.methods.updateCommentary('targetYearCostCurve')                     
                    d3.selectAll('#costCurve-back, #costCurve-forward').on('click', null)
                    setTimeout( () => {
                        d3.select('#costCurve-back').on('click', () => vis.costCurve.methods.showIntro()).style('opacity', null)
                        d3.select('#costCurve-forward').on('click', () => vis.costCurve.methods.showAxes())
                    }, duration) 
                }; // end showTargetYearCostCurve()

                // COST CURVE WITH AXES
                vis.costCurve.methods.showAxes = function(duration = 1000){
                    // 0. Scene setup
                    d3.selectAll('#costCurveXaxis, #costCurveYaxis').transition().duration(duration).style('opacity', 1)
                    // 1. Update narrative a buttons
                    vis.costCurve.methods.updateCommentary('showAxes')     
                    setTimeout( () => {
                        d3.select('#costCurve-back').on('click', () => vis.costCurve.methods.showTargetYearCostCurve())
                        d3.select('#costCurve-forward').on('click', () => vis.costCurve.methods.showMetricsAndLegend())
                    }, duration) 
                }; // end showAxes()

                // COST CURVE WITH METRICS AND LEGEND ADDED
                vis.costCurve.methods.showMetricsAndLegend = function(duration = 1000){
                    // 0. Scene setup
                    vis.costCurve.emissionsScaleMax = 'totalEmissions'
                    updateCostCurve()
                    d3.selectAll('#costCurveTargetLineGroup, #costCurveGapToTarget').transition().duration(duration).style('opacity', 0)
                    d3.selectAll('#costCurveLegend, #costCurveMetrics-group').transition().duration(duration).style('opacity', 1)            
                    // 1. Update narrative a buttons
                    vis.costCurve.methods.updateCommentary('showMetricsAndLegend')    
                    d3.selectAll('#costCurve-back, #costCurve-forward').on('click', null)
                    // 2. Ensure labels are visible
                    d3.selectAll('.optionLabel').classed('faded', false)                    
                    setTimeout( () => {
                        d3.select('#costCurve-back').on('click', () => vis.costCurve.methods.showTargetYearCostCurve())
                        d3.select('#costCurve-forward').on('click', () => vis.costCurve.methods.showZNETScale())
                    }, duration) 
                }; // end showMetricsAndLegend()

                // COST CURVE WITH TARGET SHOWN 
                vis.costCurve.methods.showZNETScale = function(duration = 1000){
                    // 0. Scene setup
                    d3.select('#zeroCostLabel-group').style('opacity', 0)
                    vis.costCurve.emissionsScaleMax = 'targetEmissions'
                    updateCostCurve()
                    vis.costCurve.methods.showTargetAndGap() 
                    // 1. Update narrative a buttons
                    vis.costCurve.methods.updateCommentary('netZeroScale') 
                    d3.selectAll('#costCurve-back, #costCurve-forward').on('click', null)
                    // 2. Hide the lables
                    d3.selectAll('.optionLabel').classed('faded', true)
                    setTimeout( () => {
                        d3.select('#costCurve-back').on('click', () => vis.costCurve.methods.showTargetYearCostCurve())
                        d3.select('#costCurve-forward').on('click', () => vis.costCurve.methods.showLimitationsWarning())
                    }, duration) 
                }; // end showZNETScale()

                // WARNING OF COST CURVE LIMITAITONS 
                vis.costCurve.methods.showLimitationsWarning = function(duration = 1000){
                    // 0. Scene setup
                    vis.costCurve.emissionsScaleMax = 'totalEmissions'
                    updateCostCurve()
                    d3.selectAll('#costCurveTargetLineGroup, #costCurveGapToTarget').transition().duration(duration).style('opacity', 0)
                    // 1. Update narrative a buttons
                    vis.costCurve.methods.updateCommentary('staticLimitations') 
                    d3.selectAll('#costCurve-back, #costCurve-forward').on('click', null)
                    setTimeout( () => {
                        d3.select('#costCurve-back').on('click', () => vis.costCurve.methods.showZNETScale())
                        d3.select('#costCurve-forward').on('click', () => vis.costCurve.methods.showTimeLapse())
                    }, duration) 
                }; // end showLimitationsWarning()

                // TIME LAPSE CURVE VIEW
                vis.costCurve.methods.showTimeLapse = function(duration = 1000){
                    // 0. Scene setup
                    vis.costCurve.methods.timeLapseCostCurve(duration, 0, model.schema.reportTime.analysisPeriod)  // Call the timelapse method                        
                    // 1. Update narrative a buttons
                    vis.costCurve.methods.updateCommentary('costCurveTimeLapse') 
                    d3.selectAll('#costCurve-back, #costCurve-forward').on('click', null)
                    d3.select('#menu-costCurve').style('pointer-events', 'none')
                    setTimeout( () => {
                        d3.select('#costCurve-back').on('click', () => vis.costCurve.methods.showActionSummary())
                        d3.select('#costCurve-forward').on('click', () => vis.costCurve.methods.showCaution())
                        document.getElementById('costCurve-timeSelector').addEventListener("change", function(){ 
                            d3.select('#costCurve-time').html(this.value)
                            updateCostCurve(+this.value - model.schema.time.startTime) 
                        })       
                        d3.select('#menu-costCurve').style('pointer-events', null)                 
                    }, duration * model.schema.reportTime.analysisPeriod) 
                }; // end showTimeLapse()

                // EXLPAIN DYNAMIC ACTION OPTIONS
                vis.costCurve.methods.showDynamicOptions = function(duration = 1000){
                    // 0. Scene setup
                    d3.select('#costCurve-narrative-container').style('grid-area', '5 / 2 / 6 / 6')
                    d3.select('#costCurve').classed('perspective', false)                      
                    // 1. Update narrative a buttons
                    vis.costCurve.methods.updateCommentary('exploreActions') 
                    d3.selectAll('#costCurve-back, #costCurve-forward').on('click', null)
                    setTimeout( () => {
                        d3.select('#costCurve-back').on('click', () => vis.costCurve.methods.showTimeLapse())
                        d3.select('#costCurve-forward').on('click', () => vis.costCurve.methods.showCaution())
                    }, duration) 
                }; // end showDynamicOptions()

                // FINAL CAUTION
                vis.costCurve.methods.showCaution = function(duration = 1000){
                    // 0. Scene setup
                    d3.select('#costCurve-narrative-container').style('grid-area', null)       // Set to original grid area (over chart)     
                    d3.select('#costCurve').classed('perspective', true)  

                    // 1. Update narrative a buttons
                    vis.costCurve.methods.updateCommentary('showCaution') 
                    d3.selectAll('#costCurve-back, #costCurve-forward').on('click', null)
                    setTimeout( () => {
                        d3.select('#costCurve-back').on('click', () => vis.costCurve.methods.showTimeLapse())
                        d3.select('#costCurve-forward').on('click', () => vis.costCurve.methods.showIntro())
                    }, duration) 
                }; // end showCaution()


                vis.costCurve.methods.showAction = function(){
                    const actionID = this.id.slice(0, this.id.indexOf('-'))
                    d3.select('#activityDescription-container').classed('onscreen', true)
                    d3.selectAll('#activityDescription-name, #activityDescription-content').transition().duration(200).style('opacity', 0)
                    setTimeout( () => {
                        d3.select('#activityDescription-name').html(model.actionBusinessCase[actionID].About.Action.Label).transition().duration(500).style('opacity', 1)
                        d3.select('#activityDescription-content').html(model.actionBusinessCase[actionID].About.Action.Description.General).transition().duration(500).style('opacity', 1)
                    }, 200)

                }; // end showAction()

        }; // end addCostCurveMethods()

        // // Parse data: add ID anc class fields and sort to least cost order
        function createCostCurveData(time = model.schema.reportTime.analysisPeriod){
            // 1. Retrieve CostCurve data from all actionBusinessCases and pass to vis.costCurve global object
                model.actionList.allIDs.forEach(actionID => {                   
                    const actionData            = model.actionBusinessCase[actionID],
                        actionDuration          = actionData['Action parameters']['Action duration'],
                        annualAbatement         = !isEmpty(actionData['System impacts']['Marginal impact']['emissions']['value'])     ? -actionData['System impacts']['Marginal impact']['emissions']['value'][time] : actionData['System impacts']['Marginal impact']['emissionsAbated']['value'][time] ,
                        annualEnergy            = !isEmpty(actionData['System impacts']['Marginal impact']['energy']['value'])        ? -actionData['System impacts']['Marginal impact']['energy']['value'][time] : 0,
                        annualElectricity       = !isEmpty(actionData['System impacts']['Marginal impact']['naturalVolume']['value']) ? -actionData['System impacts']['Marginal impact']['naturalVolume']['value'][time] : 0,
                        baselineEmissions       = inputData.baselineStocks.filter(d => d.boundary === 'Included').reduce((sum, d) => d.emissions + sum, 0),
                        baselineEnergy          = inputData.baselineStocks.filter(d => d.boundary === 'Included').reduce((sum, d) => d.energy + sum, 0),
                        baselineElectricity     = inputData.baselineStocks.filter(d => d.boundary === 'Included').reduce((sum, d) => d.naturalVolume + sum, 0),
                        levelisedAbatementCost  = actionData.About.Impact.Type !== 'additional' ? actionData['Summary metrics (per unit)']['Levelised cost']['emissions'] : -actionData['Summary metrics (per unit)']['Levelised cost']['emissionsAbated']  

                    const actionCostCurveObj = {
                        name:                   actionData.About.Action.Title,
                        actionID:               actionID,
                        blockID:                actionID+'-block',
                        sector:                 actionData.About.Action.Owner,
                        area:                   actionData.About.Action.modelType,
                        type:                   actionData.About.Action.Type,
                        levelisedCost:          actionData.About.Impact.Type !== 'additional' ? actionData['Summary metrics (per unit)']['Levelised cost']['emissions'] : -actionData['Summary metrics (per unit)']['Levelised cost']['emissionsAbated'],
                        abatement:              annualAbatement,
                        abatementUnit:          'tCO2-e',
                        abatementPct:           annualAbatement / baselineEmissions,
                        levelisedCostEnergy:    actionData['Summary metrics (per unit)']['Levelised cost']['energy'],
                        abatementEnergy:        annualEnergy,
                        abatementUnitEnergy:    'GJ',
                        abatementPctEnergy:     annualEnergy / baselineEnergy,
                        levelisedCostElec:      actionData['Summary metrics (per unit)']['Levelised cost']['naturalVolume'],
                        abatementElec:          annualElectricity,
                        abatementUnitElec:      'MWh',
                        abatementPctElec:       annualElectricity / baselineElectricity,
                        description:            actionData.About.Action.Description.General,
                        dy:                     actionData.costCurveLabel.dy,             
                        dx:                     actionData.costCurveLabel.dx             

                    }
                    vis.costCurve.chartData.push(actionCostCurveObj)
                    vis.costCurve.abatementInTargetYear    += !isEmpty(actionData['System impacts']['Marginal impact']['emissions']['value']) ? -actionData['System impacts']['Marginal impact']['emissions']['value'][model.schema.reportTime.analysisPeriod] : actionData['System impacts']['Marginal impact']['emissionsAbated']['value'][model.schema.reportTime.analysisPeriod]
                    vis.costCurve.metrics.benefitNo        += actionCostCurveObj.levelisedCost < 0 ? 1 : 0
                    vis.costCurve.metrics.benefitEmissions += actionCostCurveObj.levelisedCost < 0 ? actionCostCurveObj.abatement : 0
                    vis.costCurve.metrics.costNo           += actionCostCurveObj.levelisedCost > 0 ? 1 : 0
                    vis.costCurve.metrics.costEmissions    += actionCostCurveObj.levelisedCost > 0 ? actionCostCurveObj.abatement : 0
                    
                    if(vis.costCurve.actors.indexOf(actionData.About.Action.Owner) < 0){ vis.costCurve.actors.push(actionData.About.Action.Owner) }
                })
            // 1. Add ID and classes to block data object
                vis.costCurve.chartData.forEach( obj => {    
                    const camelType   = vis.helpers.camelize(obj.type),
                        camelSector = vis.helpers.camelize(obj.sector),
                        camelArea   = vis.helpers.camelize(obj.area)

                    obj.class = camelType+" "+camelSector+" "+camelArea 
                })

            // 2. Sort by levelised cost (lowest first)
                vis.costCurve.chartData.sort((a,b) => (a.levelisedCost >b.levelisedCost) ? 1 : ((b.levelisedCost > a.levelisedCost) ? -1 : 0) ); 
               
            // 3. Add a cumulative abatement to each (sorted) action object
                vis.costCurve.chartData.forEach( obj => {      
                    obj.abatementCumulative = vis.costCurve.emissionsData.cumAbatement;
                    vis.costCurve.emissionsData.cumAbatement += obj.abatement;   
                    vis.costCurve.blockData.blockIDs.push(obj.blockID)          // build BlockIDs array with actionIDs (for scribbles)
                    vis.costCurve.blockData.blockClasses.push(obj.class)        // build blockClasses array (for scribbles)    
                    vis.costCurve.blockData.optionTypeList.push(obj.type)       // build option list type array                     
                })  

            // 4. Create unique optionType list
                vis.costCurve.blockData.optionTypeList = vis.costCurve.blockData.optionTypeList.filter(vis.helpers.onlyUnique).sort()
                for( let i = 0; i < vis.costCurve.blockData.optionTypeList.length; i++){
                    vis.costCurve.blockData.legendIDs[i] = "legendBlock"+vis.helpers.camelize(vis.costCurve.blockData.optionTypeList[i])
                };

            // 5. Calculate average abatement cost
            vis.costCurve.chartData.forEach( actionCostCurveObj =>{
                vis.costCurve.metrics.aveAbatementCost += actionCostCurveObj.levelisedCost * actionCostCurveObj.abatement / vis.costCurve.emissionsData.cumAbatement     
            })
        }; // end createCostCurveData()

        // Function to draw MACC curve 
        function drawCostCurve(chartData, levelisedCostType, animationTime) {             
            // 1. Prepare chart canvas
                // a. Calculate dimensions and set SVG
                vis.costCurve.dims.width = vis.costCurve.dims.canvasWidth - vis.costCurve.dims.margin.left - vis.costCurve.dims.margin.right
                vis.costCurve.dims.height = vis.costCurve.dims.canvasHeight - vis.costCurve.dims.margin.top - vis.costCurve.dims.margin.bottom
                d3.select('#'+svgID) .attr('width', '100%').attr('viewBox', '0 0 '+vis.costCurve.dims.canvasWidth+' '+vis.costCurve.dims.canvasHeight)

                // b. Setup scales and axes
                vis.costCurve.scales.xScale  = d3.scaleLinear().range([0, vis.costCurve.dims.width])
                vis.costCurve.scales.yScale  = d3.scalePow().exponent(0.5).range([vis.costCurve.dims.height, 0])
                vis.costCurve.scales.yScale  = d3.scaleLinear().range([vis.costCurve.dims.height, 0])
                // vis.costCurve.scales.yScale  = d3.scaleLinear().range([vis.costCurve.dims.height, 0])
                vis.costCurve.scales.xAxis   = d3.axisBottom().scale(vis.costCurve.scales.xScale ).ticks(10)
                vis.costCurve.scales.yAxis   = d3.axisLeft().scale(vis.costCurve.scales.yScale).ticks(10).tickFormat(d => (d === 0) ? '' : vis.numberFormatters.formatCostInteger(d) )

                // c. Append group for chart
                d3.selectAll("#costCurveGroup").remove()                // Clear canvas no other chart is rendered          
                vis.costCurve.svg = d3.select("#"+svgID).append("g")
                    .attr('id', 'costCurveGroup')
                    .attr("width", vis.costCurve.dims.width + vis.costCurve.dims.margin.left + vis.costCurve.dims.margin.right)
                    .attr("height", vis.costCurve.dims.height + vis.costCurve.dims.margin.top + vis.costCurve.dims.margin.bottom)
                    .append("g")
                        .attr("transform", "translate(" + vis.costCurve.dims.margin.left + "," + vis.costCurve.dims.margin.top + ")");
                
                // d. Apply transforma to scribble fills group
                d3.select("#scribbleFills")
                    .attr("transform", "translate(" + vis.costCurve.dims.margin.left + "," + vis.costCurve.dims.margin.top + ")");

                // e. Add the tooltips div
                vis.costCurve.tooltipDiv = d3.select("main").append("div").attr("class", "costCurve-tooltip").style("opacity", 0);     // Define the div for the tooltip
            
            // 2. Set domains for axes from abatement and levelised cost data
                const totalAbatement = d3.sum(chartData, d =>  d.abatement);             
                vis.costCurve.scales.xScale.domain([0, totalAbatement] );
                vis.costCurve.scales.yScale.domain(d3.extent(chartData,  d => d[levelisedCostType]) );
                vis.costCurve.scales.yScale.domain([d3.max([-500, d3.min(chartData,  d => d[levelisedCostType])]) , d3.max(chartData,  d => d[levelisedCostType]) ] );
   
            // 3. Add blocks (rectangles)
                vis.costCurve.svg.selectAll(".block").data(chartData)
                    .enter().append("rect")
                    .attr("class", d =>  d.class.replace(/[(/).:]/g,"")+" block" )
                    .attr("id", d =>  d.blockID )
                    .attr("x", d => vis.costCurve.scales.xScale(d.abatementCumulative) )
                    .attr("width", d => vis.costCurve.scales.xScale(d3.max([d.abatement, 0.000001]) ))      // Prevent width from being zero
                    .attr("y", d => d[levelisedCostType] > 0 ? vis.costCurve.scales.yScale(d[levelisedCostType]) : vis.costCurve.scales.yScale(0) )  // Offset positive blocks by height to position correctly on y-axis
                    .attr("height", d => Math.abs(vis.costCurve.scales.yScale(d[levelisedCostType]) - vis.costCurve.scales.yScale(0)) )         
                    .attr('rx', '0%')
                    .attr('ry', '0%')
                    .on("mouseover", d => vis.costCurve.methods.toolTipOn(d, d3.event.pageX, d3.event.pageY) )          
                    .on("mouseout", vis.costCurve.methods.toolTipOff) 
                    .on("click", vis.costCurve.methods.showAction)          
       
            // 4. Add x axis and label
                const xAxisGroup = vis.costCurve.svg.append("g").attr('id', 'costCurveXaxis')
                    .attr("class", "x axis costCurve")
                    .attr("transform", "translate(0,"+ vis.costCurve.scales.yScale(0) +")")
                    .call(vis.costCurve.scales.xAxis)
                xAxisGroup.append("text")
                    .attr("class", "label costCurve")
                    .attr("transform","translate("+ vis.costCurve.dims.width +", 39)")
                    .style("text-anchor", "end")
                    .text("Emissions abatement")
                xAxisGroup.append("text")
                    .attr("class", "subLabel costCurve")
                    .attr("transform","translate("+ vis.costCurve.dims.width +", 52)")
                    .style("text-anchor", "end")
                    .text("tonnes of carbon dioxide per annum");

            // 5. Add y axis and label
                const yAxisGroup = vis.costCurve.svg.append("g").attr('id', 'costCurveYaxis')
                    .attr("class", "y axis costCurve")
                    .call(vis.costCurve.scales.yAxis)
                yAxisGroup.append("text")
                    .attr("class", "label costCurve")
                    .attr("transform", "rotate(-90)")
                    .attr("y", -55)
                    .style("text-anchor", "end")
                    .text("Marginal cost of abatement")           
                yAxisGroup.append("text")
                    .attr("class", "subLabel costCurve")
                    .attr("transform", "rotate(-90)")
                    .attr("y", -42)
                    .style("text-anchor", "end")
                    .text("$ per tonne of carbon dioxide")   

            // 6. Add block label group
                const optionLabelGroup = vis.costCurve.svg.append("g").attr("class", "optionLabelGroup"),
                    zeroCostLabel = optionLabelGroup.append('g').attr('id', 'zeroCostLabel-group')
                        .style('pointer-events', 'none')
                        .style('opacity', 0)
                
                optionLabelGroup.selectAll(".optionLabel")
                    .data(chartData).enter().append("text")
                    .attr("class",  d => d.class + " optionLabel")
                    .attr("id",     d => d.id + "optionLabel")
                    .attr("x",      d => vis.costCurve.scales.xScale(d.abatementCumulative) + vis.costCurve.scales.xScale(d3.max([d.abatement, 0.000001]))/ 2 )
                    .attr('y',      d => vis.costCurve.scales.yScale(d[levelisedCostType]) ) 
                    .attr("dy",     d => (d[levelisedCostType] > 0 ? -3 : 8) + d.dy )                                       
                    .text( d =>     d.name)
                    .attr("dx",     function(d){return  d[levelisedCostType] > 0 ? -this.getBBox().width + d.dx : d.dx }) 

                // add the Zero cost klabel
                let zeroCostCumStart, zeroCostCumEnd, zeroCostCum, zeroCostY = -24
                vis.costCurve.chartData.forEach(blockObj => {
                    if(blockObj.levelisedCost === 0 && isNaN(zeroCostCumStart)){
                        zeroCostCumStart = blockObj.abatementCumulative
                    }
                    if(blockObj.levelisedCost === 0){
                        zeroCostCumEnd = blockObj.abatementCumulative
                    }
                })
                zeroCostCum = d3.mean([zeroCostCumStart,zeroCostCumEnd])

                zeroCostLabel.append('text').classed('zero-label', true)
                    .text('Zero cost actions')
                    .attr("x", vis.costCurve.scales.xScale(zeroCostCum) - 5)
                    .attr("y", zeroCostY + 8)
                    .style('text-anchor', 'end')

                zeroCostLabel.append('line').classed('zero-labelLine', true)
                    .attr("x1", vis.costCurve.scales.xScale(zeroCostCum))
                    .attr("y1", zeroCostY)
                    .attr("x2", vis.costCurve.scales.xScale(zeroCostCum))
                    .attr("y2", vis.costCurve.scales.yScale(2))          

            // 7. Add Legend
               drawLegend(vis.costCurve.blockData.optionTypeList, animationTime)

            // 8. Add summary metrics
                const costCurveSummary = vis.costCurve.svg.append('g').attr('id', 'costCurveMetrics-group')
                    .style('transform', 'translate('+(vis.costCurve.scales.xScale(vis.costCurve.abatementInTargetYear)+10)+'px,'+(vis.costCurve.dims.margin.top*0)+'px)')
                // Header
                costCurveSummary.append('text').attr('id', 'ccMetrics-header')
                    .classed('costCurve-metrics', true)
                    .attr('x', 0)
                    .attr('y', 0)
                    .text("Total cost and impact")
                // Impact (abatement)
                costCurveSummary.append('text').attr('id', 'ccMetrics-abatement')
                    .classed('costCurve-metrics', true)                
                    .attr('x', 0)
                    .attr('y', 18)
                    .text(vis.numberFormatters.formatComma(vis.costCurve.emissionsData.cumAbatement)+' tCO2-e of emissions')
                // Cost per unit
                costCurveSummary.append('text').attr('id', 'ccMetrics-abatementCost-l1')
                    .classed('costCurve-metrics', true)                
                    .attr('x', 0)
                    .attr('y', 38)
                    .text( (vis.costCurve.metrics.aveAbatementCost < 0  ? 'saved at an average benefit' : 'saved at an average cost'))
                costCurveSummary.append('text').attr('id', 'ccMetrics-abatementCost-l2')
                    .classed('costCurve-metrics', true)                
                    .attr('x', 0)
                    .attr('y', 55)
                    .text('of $'+Math.round(Math.abs(vis.costCurve.metrics.aveAbatementCost*10))/10 + 'per tCO2-e')

            // x. Supporting functions
                // Draw the Legend
                function drawLegend(d, animationTime){
                    const dims = vis.costCurve.dims,
                        legend = vis.costCurve.svg.append('g').attr('id', 'costCurveLegend')
                            .style('transform', 'translate('+(dims.width + 13)+'px ,'+(dims.height - dims.margin.bottom)+'px)')
                    
                    legend.append('text').attr('id', 'legend-header')
                            .attr("x",  0)
                            .attr("y", (d, i) => -15 )
                            .text('Types of action')

                    legend.selectAll(".block.legend").data(d)
                        .enter().append("rect")
                            .attr('id', d => 'legendBlock'+vis.helpers.camelize(d))
                            .attr('class', d => 'block legend '+vis.helpers.camelize(d))
                            .attr("x",  0)
                            .attr("y", (d, i) => 20 * i)
                            .attr("width", 18)
                            .attr("height", 18)
                            .style("opacity", 0)
                            .transition().duration(animationTime / 3)
                                .style("opacity", 1)

                    legend.selectAll(".label.legend").data(d)
                        .enter().append("text")
                            .attr('class',  d => 'label legend '+vis.helpers.camelize(d))
                            .attr("x",      d => 20)
                            .attr("y", (d, i) => 22 * i)
                            .attr("dy", 10)
                            .text(d => d)
                            .style("opacity", 0)
                            .transition().duration(animationTime / 3)
                                .style("opacity", 1)   
                }; // end drawLegend()
        }; // end drawMACC()
    }; // end drawCostCurve()

    // Update the Cost Curve
    function updateCostCurve(time, levelisedCostType, xScaleMax = vis.costCurve.emissionsScaleMax){
        if(vis.costCurve){ vis.costCurve.methods.updateCostCurveData(time, vis.costCurve.methods.updateBlocks) }      // Update block data and callback to update the blocks 
    }; // end updateCostCurve()


////////////////////////////////////////////////////////////////////
//////////////////    ABATEMENT WEDGES CHART      //////////////////
////////////////////////////////////////////////////////////////////

    function renderWedgesChart(){
        vis.renderStatus.abatementWedges = true          
        // 0. Setup wedges data object, and add methods
        vis.wedgesChart = {
            svg:                        '',  
            timeHorizon:                2030,               
            dims: {
                canvasWidth:            1080, 
                canvasHeight:           600, 
                margin: {
                    top:                80, 
                    right:              250, 
                    bottom:             50, 
                    left:               100
                },
                height:                 '',
                width:                  ''        
            },
            scales:                     {},                                
            actionWedgeData:            [],
            stockTotal: {
                actionWorld:            {},
                referenceWorld:         {}
            },
            seriesData: {
                actionWorldData:        {},
                referenceWorldData:     {},               
            },
            series:                     {},
            grossData: {
                actionWorldData:        {}                    
            },
            layerOrder: [
                'Land use, land use change and forestry',       // Ensures this is at the bottom 
                'Agriculture',
                'Industrial processes and product use',
                'Stationary Energy',
                'Transport',
                'Waste'
            ],
            layerLabelPosition:         [2028, 2023, 2023,  2022, 2028, 2021],
            sectorMultiples:            {},
            summaryMultiples:           {},
            curve:                      d3.curveMonotoneX,
            methods:                    {},
            view: {
                layers:                 '',             // Choice of wedge types, emissions "sector", 'summary' of net/gross/offsets, or "actionAbatement" (and 'none')
                type:                   '',             // Stacked or multiples view
                showTotals:             false,          
                showActionLayers:       false           // Boolean to show the action wedges above net emissions (i.e. gap to Reference case)
            }                      
        }   
        addWedgesMethods(vis.wedgesChart.timeHorizon)

        // 1.  Get stock and wedge data 
        vis.wedgesChart.methods.createWedgesData()
        vis.wedgesChart.methods.createSystemData()
    
        // 2. Draw wedges chart to specified SVG
        d3.selectAll('#wedgesChart > *').remove()
        drawWedges('wedgesChart', 'netEmissions', vis.wedgesChart.timeHorizon)

        // 3. Create the multiples charts dataset and axes 
        createSectorWedgeMultiples()
        
        // 4. Set the starting view
        d3.select('#wedgesChart-back').style('opacity', 0)        
        vis.wedgesChart.methods.showBaseline('netEmissions') 

        // X. Add supporting functions for rendering/updating as methods
        function addWedgesMethods(timeHorizon){
            // Gather wedges chart data
            vis.wedgesChart.methods.createWedgesData = function(){
                // For each action
                model.actionList.allIDs.forEach( actionID => {
                    const actionData = model.actionBusinessCase[actionID],
                        systemImpactsObject = actionData['System impacts']['Marginal impact']                       
                    // 1. Create marginal impacts object
                    const emissionsImpactArray   =  Object.values(model.stocks.actionImpacts.byAction[actionID].emissions).reduce((r, a) => a.map((b, i) => (r[i] || 0) + b), []).map(d => -d),
                        energyImpactArray        =  Object.values(model.stocks.actionImpacts.byAction[actionID].energy).reduce((r, a) => a.map((b, i) => (r[i] || 0) + b), []).map(d => -d),
                        naturalVolumeImpactArray =  Object.values(model.stocks.actionImpacts.byAction[actionID].naturalVolume).reduce((r, a) => a.map((b, i) => (r[i] || 0) + b), []).map(d => -d),    
                        marginalSystemImpacts    = { 
                            emissions:          model.schema.time.yearArray.map((year, i) => emissionsImpactArray[i] ? emissionsImpactArray[i] : emissionsImpactArray[model.schema.time.endTime - model.schema.time.startTime]),
                            energy:             model.schema.time.yearArray.map((year, i) => energyImpactArray[i] ? energyImpactArray[i] : energyImpactArray[model.schema.time.endTime - model.schema.time.startTime]),
                            naturalVolume:      model.schema.time.yearArray.map((year, i) => naturalVolumeImpactArray[i] ? naturalVolumeImpactArray[i] : naturalVolumeImpactArray[model.schema.time.endTime - model.schema.time.startTime])
                        }               

                    // 2. Push the actionData with marginal impacts object as data object
                    vis.wedgesChart.actionWedgeData.push({
                        [actionID]: {
                            label:              actionData.About.Action.Label,
                            type:               actionData.About.Action.Type,
                            owner:              actionData.About.Action.Owner,
                            uptakeByTarget:     actionData.Uptake.Modelled.Value[model.schema.time.endTime - model.schema.time.startTime],   
                            uptakeDescription:  '',   
                            data:               marginalSystemImpacts
                        }
                    })
                })
            }; // end createWdegesData()

            // Retrieve system data from model.stocks
            vis.wedgesChart.methods.createSystemData = function(timeHorizon = vis.wedgesChart.timeHorizon){
                const  stockNames =  ['emissions', 'energy', 'emissionsAbated', 'naturalVolume'],
                    stockMetaInfo = inputData.baselineStocks

                // 1. Create sector series 
                stockNames.forEach( (stockName, stockNameIndex) => {
                    vis.wedgesChart.seriesData.actionWorldData[stockName] = {}    
                    vis.wedgesChart.seriesData.referenceWorldData[stockName] = {}      
                    model.schema.reportTime.forEach((time, timePeriod) => {
                        vis.wedgesChart.seriesData.actionWorldData[stockName][time] = {}    
                        vis.wedgesChart.seriesData.referenceWorldData[stockName][time] = {} 

                        model.schema.fieldOptions.baselineStocks.emissionsSector.forEach(sector => {
                            vis.wedgesChart.seriesData.actionWorldData[stockName][time][sector] = 0
                            vis.wedgesChart.seriesData.referenceWorldData[stockName][time][sector] = 0    
                            stockMetaInfo.forEach( (stockMetaData, stockIndex) => {                
                                if(stockMetaData.emissionsSector === sector && stockMetaData.boundary === 'Included') {
                                    vis.wedgesChart.seriesData.actionWorldData[stockName][time][sector] += model.stocks.actionCase[stockName][stockMetaData.id][timePeriod]         // Currently GRoss emissions
                                    vis.wedgesChart.seriesData.referenceWorldData[stockName][time][sector] +=  model.stocks.referenceCase[stockName][stockMetaData.id][timePeriod]   // NET?
                                }
                            })
                        })
                    })
                    // Create series data for layering
                    const data = Object.values(vis.wedgesChart.seriesData.actionWorldData[stockName])
                    vis.wedgesChart.series[stockName] =  d3.stack().keys(vis.wedgesChart.layerOrder)(data)
                })

                // 2. Create actionWorld NET EMISSIONS SECTOR datasets 
                vis.wedgesChart.seriesData.actionWorldData['netEmissions'] = {}
                vis.wedgesChart.seriesData.referenceWorldData['netEmissions'] = {}
                model.schema.reportTime.forEach( time => {
                    vis.wedgesChart.seriesData.actionWorldData['netEmissions'][time] = {}                    
                    vis.wedgesChart.seriesData.referenceWorldData['netEmissions'][time] = {}                    
                    
                    model.schema.fieldOptions.baselineStocks.emissionsSector.forEach( sector => {
                        vis.wedgesChart.seriesData.actionWorldData['netEmissions'][time][sector] = vis.wedgesChart.seriesData.actionWorldData['emissions'][time][sector]  - vis.wedgesChart.seriesData.actionWorldData['emissionsAbated'][time][sector]    
                        vis.wedgesChart.seriesData.referenceWorldData['netEmissions'][time][sector] = vis.wedgesChart.seriesData.referenceWorldData['emissions'][time][sector] - vis.wedgesChart.seriesData.referenceWorldData['emissionsAbated'][time][sector] 
                    })
                })
                vis.wedgesChart.series['netEmissions'] =  d3.stack().keys(vis.wedgesChart.layerOrder).offset(d3.stackOffsetDiverging)(Object.values(vis.wedgesChart.seriesData.actionWorldData['netEmissions']))

                // 3. Create actionWorld  Net + Gross Emissions vs Gross Offsets datasets
                vis.wedgesChart.grossData.actionWorldData['emissions']  = {}
                vis.wedgesChart.grossData.actionWorldData['offsets']    = {}
                vis.wedgesChart.grossData.actionWorldData['net']        = {}
                model.schema.reportTime.forEach(function(time){                
                    vis.wedgesChart.grossData.actionWorldData['emissions'][time] = 0    
                    vis.wedgesChart.grossData.actionWorldData['offsets'][time] = 0    
                    vis.wedgesChart.grossData.actionWorldData['net'][time] = 0    
                    model.schema.fieldOptions.baselineStocks.emissionsSector.forEach( sector => {
                        const sectorNet = vis.wedgesChart.seriesData.actionWorldData['emissions'][time][sector] - vis.wedgesChart.seriesData.actionWorldData['emissionsAbated'][time][sector]                    
                        vis.wedgesChart.grossData.actionWorldData['net'][time] += sectorNet                   
                        vis.wedgesChart.grossData.actionWorldData['offsets'][time] += vis.wedgesChart.seriesData.actionWorldData['emissionsAbated'][time][sector]
                    })
                    vis.wedgesChart.grossData.actionWorldData['emissions'][time] = vis.wedgesChart.grossData.actionWorldData['net'][time] + vis.wedgesChart.grossData.actionWorldData['offsets'][time]
                })
            }; // end createSystemData()

            // Set axis domains
            vis.wedgesChart.methods.setAxisDomains = function(stockName){
                vis.wedgesChart.stockTotal.actionWorld[stockName] = []  
                vis.wedgesChart.stockTotal.referenceWorld[stockName] = []  
                model.schema.reportTime.forEach( time => {
                    vis.wedgesChart.stockTotal.actionWorld[stockName].push(d3.sum(Object.values(vis.wedgesChart.seriesData.actionWorldData[stockName][time]))) 
                    vis.wedgesChart.stockTotal.referenceWorld[stockName].push(d3.sum(Object.values(vis.wedgesChart.seriesData.referenceWorldData[stockName][time])))
                })

                // Find total offsets and the minumum range (i.e maximiun gross offsets)
                const offOffsetsArray = Object.values(vis.wedgesChart.seriesData.actionWorldData[stockName]).map(sectorObj => d3.sum(Object.values(sectorObj).filter(d => d < 0))),
                    maxGrossOffsets = d3.min(offOffsetsArray)

                vis.wedgesChart.scales.xScale.domain([model.schema.time.startTime, timeHorizon])
                vis.wedgesChart.scales.yScale.domain([maxGrossOffsets, d3.max(vis.wedgesChart.stockTotal.referenceWorld[stockName])]);  
            }; // end setAxisDomains()

            vis.wedgesChart.methods.setGrossAxisDomains = function(){
                vis.wedgesChart.stockTotal.actionWorld['grossEmissions'] = []  
                vis.wedgesChart.stockTotal.actionWorld['offsets'] = []  
                model.schema.reportTime.forEach( time => {
                    vis.wedgesChart.stockTotal.actionWorld['grossEmissions'].push( vis.wedgesChart.grossData.actionWorldData.emissions[time]) 
                    vis.wedgesChart.stockTotal.actionWorld['offsets'].push(vis.wedgesChart.grossData.actionWorldData.offsets[time])
                })   

                vis.wedgesChart.scales.yScale.domain([-d3.max(vis.wedgesChart.stockTotal.actionWorld['offsets']), d3.max(vis.wedgesChart.stockTotal.actionWorld['grossEmissions']) ]);  
                d3.select(".y.axis.wedgesChart").transition().duration(500)
                    .call(vis.wedgesChart.scales.yAxis)
            }; // end setGrossAxisDomains()

            // Set shape generators
            vis.wedgesChart.methods.setShapeGenerators = function(){
                // a. Line generator
                vis.wedgesChart.methods.line = d3.line().curve(vis.wedgesChart.curve)
                    .x((d,i) => vis.wedgesChart.scales.xScale(i + model.schema.time.startTime))
                    .y((d) => vis.wedgesChart.scales.yScale(d)) 

                // b. Stacked area generator
                vis.wedgesChart.methods.stackedArea = d3.area().curve(vis.wedgesChart.curve)
                    .x( (d, i) => vis.wedgesChart.scales.xScale(i + model.schema.time.startTime))
                    .y0( (d, i) => vis.wedgesChart.scales.yScale(d[0]))
                    .y1( (d, i) => vis.wedgesChart.scales.yScale(d[1])) 

                // c. Positive area generator (from x-axis)
                vis.wedgesChart.methods.areaPositive = d3.area().curve(vis.wedgesChart.curve)
                    .x( (d, i) => vis.wedgesChart.scales.xScale(i + model.schema.time.startTime))
                    .y0(vis.wedgesChart.scales.yScale(0))
                    .y1( (d, i) => vis.wedgesChart.scales.yScale(d))  

                // d. Negative area generator (from x-axis)
                vis.wedgesChart.methods.areaNegative = d3.area().curve(vis.wedgesChart.curve)
                    .x( (d, i) => vis.wedgesChart.scales.xScale(i + model.schema.time.startTime))
                    .y0(vis.wedgesChart.scales.yScale(0))
                    .y1( (d, i) => vis.wedgesChart.scales.yScale(-d))  
            }; // end setShapeGenerators()

            // Update the sector multiples
            vis.wedgesChart.methods.updateSectorWedgeMultiples = function(stockName = 'netEmissions', timeHorizon = vis.wedgesChart.timeHorizon, duration = 1500){
                const allsectorDataArray = Object.values(vis.wedgesChart.seriesData.actionWorldData[stockName]).map(timeObject => Object.values(timeObject)).flatten()

                // Make multiples by looping through each sector
                vis.wedgesChart.layerOrder.forEach( (sectorName, i) => {
                    const multiplesSectionHeight = (vis.wedgesChart.dims.height / vis.wedgesChart.layerOrder.length),
                        multiplesHeight = 0.7 * multiplesSectionHeight,
                        chartAxisYpos = vis.wedgesChart.dims.height - multiplesSectionHeight * i

                    vis.wedgesChart.sectorMultiples.sectorData[sectorName] = Object.values(vis.wedgesChart.seriesData.actionWorldData[stockName]).map(d => d[sectorName]) 
                    
                    //Update scale and  axes
                    vis.wedgesChart.sectorMultiples.scales[sectorName]['yScale'].domain([d3.min(allsectorDataArray), d3.max(allsectorDataArray)])
                    vis.wedgesChart.sectorMultiples.scales[sectorName]['xScale'].domain(vis.wedgesChart.scales.xScale.domain())
                    vis.wedgesChart.sectorMultiples.scales[sectorName]['yAxis'].scale(vis.wedgesChart.sectorMultiples.scales[sectorName]['yScale'])
                    vis.wedgesChart.sectorMultiples.scales[sectorName]['xAxis'].scale(vis.wedgesChart.sectorMultiples.scales[sectorName]['xScale'])

                    // Update Custom area generators
                    vis.wedgesChart.sectorMultiples.areaGenerator[sectorName] = d3.area().curve(vis.wedgesChart.curve)
                        .x( (d, i) => vis.wedgesChart.scales.xScale(i + model.schema.time.startTime))
                        .y0( vis.wedgesChart.sectorMultiples.scales[sectorName]['yScale'](0))
                        .y1( d =>  vis.wedgesChart.sectorMultiples.scales[sectorName]['yScale'](d))  

                    // Update axis positions
                    d3.select('.'+vis.helpers.camelize(sectorName).replace(',','')+'_multiplesAxes.xAxis')
                        .transition().duration(duration)
                        .attr("transform", "translate(0,"+ vis.wedgesChart.sectorMultiples.scales[sectorName]['yScale'](0) +")")

                })
            }; // end wedgesToMultiples()

            // Toggle sector view between multiples and stacked
            vis.wedgesChart.methods.toggleSectorView = function(stockName = 'netEmissions', duration = 1500){
                if(vis.wedgesChart.view.layers === 'sector'){
                    // Set view and transition layers based on toggled selection
                    if(vis.wedgesChart.view.type === 'stacked'){
                        vis.wedgesChart.methods.showSectorMutiples('netEmissions', 1500)
                    } else if(vis.wedgesChart.view.type === 'multiples'){
                        vis.wedgesChart.methods.showSectorStacked('netEmissions', 1500)
                    }
                }
            }; // end toggleSectorView()

            // Transition to sector multiples (from stacked)
            vis.wedgesChart.methods.showSectorMutiples = function(stockName = 'netEmissions', duration = 1500){
                vis.wedgesChart.view.type = 'multiples'
                vis.wedgesChart.layerOrder.forEach(function(sectorName, i){
                    const wedgeID = '#'+vis.helpers.camelize(sectorName).replace(',','')+'_wedge'
                    d3.select(wedgeID).transition().duration(duration).ease(d3.easeElasticInOut).delay(i* 0)
                        .attr('d', vis.wedgesChart.sectorMultiples.areaGenerator[sectorName](vis.wedgesChart.sectorMultiples.sectorData[sectorName]))
                })
                // Label positions centered
                d3.selectAll('.sectorWedgeLabel').data(vis.wedgesChart.series[stockName])
                    .transition().duration(duration)   
                    .attr('x', d => vis.wedgesChart.scales.xScale(model.schema.time.startTime + (vis.wedgesChart.timeHorizon - model.schema.time.startTime)/2))
                    .attr('y', d => vis.wedgesChart.sectorMultiples.scales[d.key]['yScale'](0) - 5)
                    .attr('dy', '-5px')
                    .style('font-size', '30px')
                    .style('fill', d => vis.colours.byEmissionSector[d.key])
                    .style('mix-blend-mode', 'multiply')
                
                // Set axes view with ternary
                d3.selectAll('.y.axis.wedgesChart, .x.axis.wedgesChart, #stockTotals-group').transition().duration(duration).style('opacity', 0)  
                d3.selectAll('.multiplesAxes.wedgesChart').transition().duration(duration).style('opacity', 1)    
            }; // end showSectorMultiples()

            // Transtion to stacked sectors (from multiples)
            vis.wedgesChart.methods.showSectorStacked = function(stockName = 'netEmissions', duration = 1500){
                vis.wedgesChart.view.type  = 'stacked'
                d3.selectAll('.actionWorldStock').data(vis.wedgesChart.series[stockName])  
                    .transition().duration(duration).ease(d3.easeElasticInOut)
                    .attr('d', vis.wedgesChart.methods.stackedArea)
                // Label positions basd on ribbon widths
                d3.selectAll('.sectorWedgeLabel').data(vis.wedgesChart.series[stockName])
                    .transition().duration(duration)   
                    .attr('x', (d, i) => vis.wedgesChart.scales.xScale(vis.wedgesChart.layerLabelPosition[i]))
                    .attr('y', (d, i) => vis.wedgesChart.scales.yScale(d[vis.wedgesChart.layerLabelPosition[i]-model.schema.time.startTime][0] + (d[vis.wedgesChart.layerLabelPosition[i]-model.schema.time.startTime][1] - d[vis.wedgesChart.layerLabelPosition[i]-model.schema.time.startTime][0])/2) )
                    .style('font-size', function(d, i){
                        const ribbonWidth = (vis.wedgesChart.scales.yScale(0) - vis.wedgesChart.scales.yScale(d[vis.wedgesChart.layerLabelPosition[i]-model.schema.time.startTime][1] - d[vis.wedgesChart.layerLabelPosition[i]-model.schema.time.startTime][0]))
                        return d3.max([0.5 * ribbonWidth, 18])+'px'
                    })
                    .attr('dy', function(d, i){
                        const ribbonWidth = (vis.wedgesChart.scales.yScale(0) - vis.wedgesChart.scales.yScale(d[vis.wedgesChart.layerLabelPosition[i]-model.schema.time.startTime][1] - d[vis.wedgesChart.layerLabelPosition[i]-model.schema.time.startTime][0]))
                        return d3.max([0.05 * ribbonWidth, 2.5])+'px'
                    })    
                    .style('fill', null)
                    .style('mix-blend-mode', null)

                // Set axes view with ternary
                d3.selectAll('.y.axis.wedgesChart, .x.axis.wedgesChart, #stockTotals-group').transition().duration(duration).style('opacity', 1)  
                d3.selectAll('.multiplesAxes.wedgesChart').transition().duration(duration).style('opacity', 0)   
            }; // end showSectorStacked()         

            // Animate the net emissions
            vis.wedgesChart.methods.animatePath = function(id, duration = 2500){
                const pathLength = d3.select('#'+id).node().getTotalLength()
                d3.select('#'+id).style('opacity', 1)  
                    .style('stroke-dasharray', pathLength)
                    .style('stroke-dashoffset', pathLength)
                    .transition().duration(duration)
                    .style('stroke-dashoffset', 0)

                setTimeout(function(){
                    d3.select('#'+id).style('stroke-dasharray', null)
                }, duration)
            }; // end animatePath()

            vis.wedgesChart.methods.animateMarker = function(markerID, pathID, duration = 2500){
                d3.select('#'+markerID).style('opacity', 1)
                    .transition().duration(duration)
                    .attrTween("transform", translateAlong(d3.select('#'+pathID).node()))

                function translateAlong(path) {
                    const l = path.getTotalLength();
                    return d => {
                        return t => {
                            const p = path.getPointAtLength(t * l);
                            return "translate(" + p.x + "," + p.y + ")";//Move marker
                        }
                    }
                }
            }; // end animatePath()

            // Set wedges chart view
            vis.wedgesChart.methods.wedgesChartView = function(level, grouping, totals, actionLayer, duration = 250){
                vis.wedgesChart.view.layers  =   level
                vis.wedgesChart.view.type    =   grouping
                // Wedge layers to show/hide
                if(level !== 'none'){
                    if(d3.select('#'+level+'Wedges-group').style('opacity') !== 1){
                        d3.select('#'+level+'Wedges-group').classed('hidden', false)
                            .transition().duration(duration)
                            .style('opacity', 1)  
                    }
                } 
                d3.selectAll('.wedgesGroup:not(#'+level+'Wedges-group)').transition().duration(duration)
                    .style('opacity', 0)
                setTimeout( () => d3.selectAll('.wedgesGroup:not(#'+level+'Wedges-group)').classed('hidden', true), duration)

                // Show/hide totals lines group
                d3.select('#totals-group').classed('hidden', !totals)
            }; //wedgesChartView()


            //////////////////////////////////////
            //////  STORY SEQUENCE METHODS  ////// 
            //////////////////////////////////////

                // Update commentary content
                vis.wedgesChart.methods.updateCommentary = scene => {
                    d3.select('#wedgesChart-narrativeTitle').html(vis.commentary.wedgesChart[scene].title)
                    d3.select('#wedgesChart-narrative').html(vis.commentary.wedgesChart[scene].content)
                }

                // Create narrative text object from the input data
                let narrative = {}         
                vis.wedgesChart.methods.showBaseline = function(stockName = 'netEmissions', duration = 2500){
                    // On loop (return)
                        if(vis.wedgesChart.view.type === 'multiples'){ 
                            vis.wedgesChart.methods.showSectorStacked(stockName, 0)                     
                            d3.select('#actionEmissionsPath').style('stroke', null).style('mix-blend-mode', null).style('opacity', 1)       // Return styles
                            d3.select('#netEmissionsLabel').style('fill', null)                                                             // Return styles
                        }  
                    // 0. Scene setup        
                        d3.select('#wedgesChart').style('opacity', 1).classed('perspective', true)     
                        vis.wedgesChart.methods.wedgesChartView ('none', 'stacked', false, false, 0)
                        if(d3.select('#wedgesChart').style('opacity') !== 1){
                            d3.select('#wedgesChart').style('opacity', 0).transition().duration(250).style('opacity', 1)                        
                        }
                        d3.selectAll('.axis.wedgesChart, .label.wedgesChart, .subLabel.wedgesChart, #referenceLabelOnPath, #actionLabelOnPath, #referenceEmissionsPath, #actionEmissionsPath, #baselineEmissionsMarker, #targetEmissionsMarkerInner, #targetEmissionsMarkerOuter, #referenceEmissionsPathMarker, #actionEmissionsPathMarker, #targetEmissionsLabel, #referenceEmissionsLabel, #netEmissionsLabel').style('opacity', 0)   

                    // 1. Animate the baseline marker into view
                        d3.select('#totals-group').classed('hidden', false)   
                        d3.select('#baselineEmissionsMarker').style('r', 0).transition().duration(duration * 0.5).style('r', null).style('opacity', 1)

                    // 2. Animate in the axis
                        setTimeout( () => {                        
                            d3.selectAll('.y.axis.wedgesChart, .label.wedgesChart, .subLabel.wedgesChart').transition().duration(duration).style('opacity', 1)
                            setTimeout( () => {    
                                d3.selectAll('.x.axis.wedgesChart').transition().duration(duration).style('opacity', 1)
                                d3.selectAll('#targetEmissionsMarkerInner, #targetEmissionsMarkerOuter, #targetEmissionsLabel').transition().duration(500).delay(duration).style('opacity', 1)
                            }, duration)    
                        }, duration* 0.5)    
  
                    // 3. Update narrative and buttons
                        vis.wedgesChart.methods.updateCommentary('intro')                                       
                        d3.selectAll('#wedgesChart-back, #wedgesChart-forward').on('click', null)
                        setTimeout( () => {
                            d3.select('#wedgesChart-back').on('click', null).style('opacity', 0)
                            d3.select('#wedgesChart-forward').on('click', () => vis.wedgesChart.methods.showReferenceCase('netEmissions'))
                        }, duration) 
                }; // end showIntro()

                // EMISSIONS REFERECNCE CASE ANIMATION 
                vis.wedgesChart.methods.showReferenceCase = function(stockName = 'netEmissions', duration = 2500){
                    // 0. Scene setup        
                    d3.selectAll('#referenceEmissionsPath, #actionEmissionsPath, #referenceLabelOnPath, #actionLabelOnPath, #referenceEmissionsPathMarker, #actionEmissionsPathMarker, #referenceEmissionsLabel, #netEmissionsLabel').style('opacity', 0)   

                    // 1. Animate the baseline marker into view
                    d3.select('#baselineEmissionsLabel').transition().duration(duration * 0.5).attr('transform', 'translate(-20, -40)')

                    // 2. Animate the referenceEmisisons path
                    setTimeout( () => {                    
                        vis.wedgesChart.methods.animatePath('referenceEmissionsPath', duration) 
                        vis.wedgesChart.methods.animateMarker('referenceEmissionsPathMarker', 'referenceEmissionsPath', duration) 
                        d3.selectAll('#referenceEmissionsLabel,  #referenceEmissionsPathMarker, #referenceLabelOnPath').transition().duration(500).delay(duration).style('opacity', 1) 
                    }, duration* 0.5)    
  
                    // 3. Update narrative and buttons
                    vis.wedgesChart.methods.updateCommentary('referenceCase')   
                    d3.select('#wedgesChart-back').style('opacity', 1)
                    d3.selectAll('#wedgesChart-back, #wedgesChart-forward').on('click', null)
                    setTimeout( () => {
                        d3.select('#wedgesChart-back').on('click', () => {vis.wedgesChart.methods.showBaseline()} ).style('opacity', 1)
                        d3.select('#wedgesChart-forward').on('click', () => {vis.wedgesChart.methods.showActionCase() } )
                    }, duration) 
                }; // end showIntro()

                // EMISSIONS ACTION CASE ANIMATION 
                vis.wedgesChart.methods.showActionCase = function(stockName = 'netEmissions', duration = 2500){
                    // 0. Scene setup        
                    d3.selectAll('#actionEmissionsPath, #actionEmissionsPathMarker, #netEmissionsLabel').style('opacity', 0)   

                    // 1. Animate the actionEmissions path
                    setTimeout( () => {                    
                        vis.wedgesChart.methods.animatePath('actionEmissionsPath', duration) 
                        vis.wedgesChart.methods.animateMarker('actionEmissionsPathMarker', 'actionEmissionsPath', duration) 
                        d3.selectAll('#netEmissionsLabel, #referenceEmissionsPathMarker,  #actionLabelOnPath').transition().duration(500).delay(duration).style('opacity', 1) 
                    }, duration * 0.5)    
  
                    // 2. Update narrative and buttons
                    vis.wedgesChart.methods.updateCommentary('actionCase')   
                    d3.selectAll('#wedgesChart-back, #wedgesChart-forward').on('click', null)
                    setTimeout( () => {
                        d3.select('#wedgesChart-back').on('click', () => {vis.wedgesChart.methods.showReferenceCase() })
                        d3.select('#wedgesChart-forward').on('click', () => {vis.wedgesChart.methods.showNetEmissionsImpact()} )
                    }, duration) 
                }; // end showIntro()


                // EMISSIONS CHALLENGE: NET EMISSIONS VS ABATEMENT
                vis.wedgesChart.methods.showNetEmissionsImpact = function(stockName = 'netEmissions', duration = 1500){ 
                    // 0. Scene setup                     
                    vis.wedgesChart.methods.wedgesChartView ('summary', 'stacked', true, false, 0)                   
                    d3.selectAll('#netTotalsWedge, #referenceCaseWedge, #grossTotalWedge, #grossOffsetWedge, #impactWedgeLabel, #netTotalsWedgeLabel, #grossWedgeLabel, #offsetsLabel, #targetEmissionsMarkerInner, #targetEmissionsMarkerOuter, #targetEmissionsLabel').style('opacity', 0)   
                    
                    // 1. Show net emissions and savings with narrative labels
                    d3.selectAll('#referenceEmissionsPath,  #referenceEmissionsPathMarker, #referenceEmissionsLabel, #actionEmissionsPath, #netEmissionsLabel, #referenceLabelOnPath').transition().duration(0).style('opacity', 1)
                    d3.selectAll('#netTotalsWedge, #referenceCaseWedge, #netTotalsWedgeLabel, #referenceEmissionsLabel, #impactWedgeLabel').transition().duration(duration/3).style('opacity', 1)
                    d3.selectAll('#baselineEmissionsMarker, #baselineEmissionsLabel').transition().duration(1000).style('opacity', 0)
                     vis.wedgesChart.methods.setAxisDomains('netEmissions')

                    // 2. Update narrative and buttons
                    vis.wedgesChart.methods.updateCommentary('netEmissionsImpact')   
                    d3.selectAll('#wedgesChart-back, #wedgesChart-forward').on('click', null)
                    setTimeout( () => {
                        d3.select('#wedgesChart-back').on('click', () => vis.wedgesChart.methods.showActionCase())
                        d3.select('#wedgesChart-forward').on('click', () => vis.wedgesChart.methods.showSectorComponents())
                    }, duration) 
                }; // end showNetEmissionsChallenge

                // COMPONENTS OF ZERO NET EMISSIONS
                vis.wedgesChart.methods.showNetEmissionsComponents = function(stockName = 'netEmissions', duration = 1500){ 
                    // 0. Scene setup
                    vis.wedgesChart.methods.wedgesChartView ('summary', 'stacked', true, false, 0)                   
                    d3.selectAll('#referenceLabelOnPath, #netTotalsWedge, #referenceCaseWedge, #grossTotalWedge, #grossOffsetWedge, #netTotalsWedgeLabel, #grossWedgeLabel, #offsetsLabel').style('opacity', 0)   
                    d3.select('#actionEmissionsPath').transition().duration(duration/3).style('stroke', null).style('mix-blend-mode', null).style('opacity', 1)              // Return styles
                    d3.select('#netEmissionsLabel').transition().duration(duration/3).style('fill', null)                                                                    // Return styles
                    
                    // 1. Show gross emission sand offsest emissions with narrative label
                    d3.selectAll('#referenceEmissionsPath, #referenceEmissionsPathMarker, #referenceEmissionsLabel, #impactWedgeLabel, #referenceCaseWedge').transition().duration(duration/3).style('opacity', 0)                   
                    d3.selectAll('#grossWedgeLabel, #offsetsLabel').transition().duration(duration/3).delay(duration/3).style('opacity', 1)
                    vis.wedgesChart.methods.setGrossAxisDomains()
                    d3.select('#grossTotalWedge').datum(Object.values(vis.wedgesChart.grossData.actionWorldData['emissions']))
                        .transition().duration(duration)               
                        .attr("d", vis.wedgesChart.methods.areaPositive)     
                        .style('opacity', 1)                    
                    d3.select('#grossOffsetWedge').datum(Object.values(vis.wedgesChart.grossData.actionWorldData['offsets']))
                        .transition().duration(duration)                  
                        .attr("d", vis.wedgesChart.methods.areaNegative)     
                        .style('opacity', 1)

                    // 2. Update narrative and buttons
                    vis.wedgesChart.methods.updateCommentary('netEmissionsImpact')   
                    d3.selectAll('#wedgesChart-back, #wedgesChart-forward').on('click', null)
                    setTimeout( () => {
                        d3.select('#wedgesChart-back').on('click',() => vis.wedgesChart.methods.showNetEmissionsImpact())
                        d3.select('#wedgesChart-forward').on('click', () => vis.wedgesChart.methods.showSectorComponents())
                    }, duration * 4/3) 
                }; // end showNetEmissionsChallenge()

                // SECTOR COMPONENTS AND EMISSIONS PATHWAYS
                vis.wedgesChart.methods.showSectorComponents = function(stockName = 'netEmissions', duration = 1500){  
                    // 0. Scene setup                               
                    if(vis.wedgesChart.view.layers !== 'sector'){ vis.wedgesChart.methods.wedgesChartView ('sector', 'stacked', true, false, 0) }
                    if(vis.wedgesChart.view.type   === 'multiples'){ 
                        vis.wedgesChart.methods.showSectorStacked(stockName, duration) 
                        d3.selectAll('#actionEmissionsPath, #netEmissionsLabel').transition().duration(duration/3).style('opacity', 1)    
                    } else {
                        d3.selectAll('#netTotalsWedge, #referenceCaseWedge, #grossTotalWedge, #grossOffsetWedge, #netTotalsWedgeLabel, #grossWedgeLabel, #offsetsLabel, #referenceEmissionsPath, #referenceEmissionsPathMarker, #actionLabelOnPath, #referenceEmissionsLabel, #referenceLabelOnPath, #impactWedgeLabel').style('opacity', 0)   

                        // 1. Show emission sector component view in stacked form, with net emissions total line (transition to white line to fade out)
                        d3.selectAll('#sectorWedges-group path').style('opacity', 0)
                            .transition().duration(duration/3)
                            .style('opacity', 1)
                        d3.selectAll('#sectorWedges-group text').style('opacity', 0)
                            .transition().duration(duration/3).delay(duration/3).style('opacity', 1)
                        d3.select('#actionEmissionsPath').transition().duration(duration/3)
                            .style('stroke', '#fff')
                            .style('mix-blend-mode', 'normal')
                            .style('opacity', 0.3)     
                        d3.select('#netEmissionsLabel').transition().duration(duration/3)
                            .style('fill', 'grey')
                    }    
                    
                    // 2. Update narrative and buttons
                    vis.wedgesChart.methods.updateCommentary('grossVsOffsets')   
                    d3.selectAll('#wedgesChart-back, #wedgesChart-forward').on('click', null)
                    setTimeout( () =>  {
                        d3.select('#wedgesChart-back').on('click', () => vis.wedgesChart.methods.showNetEmissionsImpact())
                        d3.select('#wedgesChart-forward').on('click', () => vis.wedgesChart.methods.showSectorMultiples())
                    }, duration) 
                }; // end showSectorComponents

                // SECTOR MULTPLES
                vis.wedgesChart.methods.showSectorMultiples = function(stockName = 'netEmissions', duration = 1500){
                    // 0. Scene setup                               
                    vis.wedgesChart.methods.wedgesChartView('sector', 'stacked', true, false, 0)  
                    d3.selectAll('#netTotalsWedge, #referenceCaseWedge, #grossTotalWedge, #grossOffsetWedge, #netTotalsWedgeLabel, #grossWedgeLabel, #offsetsLabel, #referenceEmissionsPath, #referenceEmissionsLabel, #actionEmissionsPathMarker, #impactWedgeLabel').style('opacity', 0)  

                    // 1. Switch sector layers to multiples 
                    if(vis.wedgesChart.view.type  === 'stacked'){vis.wedgesChart.methods.showSectorMutiples(stockName, duration)}
                    d3.selectAll('#actionEmissionsPath, #netEmissionsLabel').transition().duration(duration/3)
                        .style('opacity', 0)     

                    // 2. Update narrative and buttons
                    vis.wedgesChart.methods.updateCommentary('sectorMultiples')   
                    d3.selectAll('#wedgesChart-back, #wedgesChart-forward').on('click', null)
                    setTimeout( () => {
                        d3.select('#wedgesChart-back').on('click', () => vis.wedgesChart.methods.showSectorComponents())
                        d3.select('#wedgesChart-forward').on('click', () => {
                            d3.selectAll('.menu-option').classed('selected', false)
                            d3.select('#menu-costCurve').classed('selected', true)
                            d3.selectAll('.vis-container').classed('hidden', true).style('display', null)
                            d3.select('#'+document.getElementById('menu-costCurve').getAttribute('vis')+'-container')
                                .classed('hidden', false).style('display', 'grid').style('opacity', 0)
                                .transition().duration(1000).style('opacity', 1)
                            movePenguins('menu-costCurve')
                        })
                    }, duration)                     
                }; // end showSectorMultiples()
        }; // end addMethods()
        
        // Rendering and data preparation function
            // Function to draw the wedges 
            function drawWedges(svgID, stockName, timeHorizon, callback){
                // 1.PREPARE CANVAS 
                    // a. Calculate dimensions and set SVG
                    vis.wedgesChart.dims.width = vis.wedgesChart.dims.canvasWidth - vis.wedgesChart.dims.margin.left - vis.wedgesChart.dims.margin.right
                    vis.wedgesChart.dims.height = vis.wedgesChart.dims.canvasHeight - vis.wedgesChart.dims.margin.top - vis.wedgesChart.dims.margin.bottom
                    d3.select('#'+svgID).attr('viewBox', '0 0 '+vis.wedgesChart.dims.canvasWidth+' '+vis.wedgesChart.dims.canvasHeight)

                    // b. Setup scales and axes
                    vis.wedgesChart.scales.xScale  = d3.scaleLinear().range([0, vis.wedgesChart.dims.width])
                    vis.wedgesChart.scales.yScale  = d3.scaleLinear().range([vis.wedgesChart.dims.height, 0])
                    vis.wedgesChart.scales.xAxis   = d3.axisBottom().scale(vis.wedgesChart.scales.xScale).ticks(timeHorizon - model.schema.time.startTime).tickFormat( d => (d > timeHorizon) ? '' : vis.numberFormatters.formatInteger(d))
                    vis.wedgesChart.scales.yAxis   = d3.axisLeft().scale(vis.wedgesChart.scales.yScale).ticks(10).tickFormat( d => (d === 0) ? 'Zero emissions' : vis.numberFormatters.formatComma(d))

                    // c. Append group for chart      
                    vis.wedgesChart.svg = d3.select("#"+svgID).append("g")
                        .attr('id', 'wegdesChartGroup')
                        .attr("width", vis.wedgesChart.dims.width + vis.wedgesChart.dims.margin.left + vis.wedgesChart.dims.margin.right)
                        .attr("height", vis.wedgesChart.dims.height + vis.wedgesChart.dims.margin.top + vis.wedgesChart.dims.margin.bottom)
                        .append("g")
                            .attr("transform", "translate(" + vis.wedgesChart.dims.margin.left + "," + vis.wedgesChart.dims.margin.top + ")")
                         
                // 2. DOMAINS AND AXES: Set domains for axes from abatement and levelised cost data
                    vis.wedgesChart.methods.setAxisDomains(stockName)

                // 3. GENERATORS: Define shape generators (addded to methods to recall on update)
                    vis.wedgesChart.methods.setShapeGenerators()

                // 4. ADD WEDGES
                    // a. Add emissions sector actionWorld wedges                  
                    const actionWorldSectorWedges = vis.wedgesChart.svg.append("g").attr('id', 'sectorWedges-group').classed('wedgesGroup', true)
                        .selectAll("path")
                        .data(vis.wedgesChart.series[stockName])
                        .join("path")
                            .attr("d", vis.wedgesChart.methods.stackedArea)
                            .attr('id', d => vis.helpers.camelize(d.key).replace(',','')+'_wedge')
                            .attr("fill", (d, i) => vis.colours.byEmissionSector[d.key])
                            .attr('class', (d, i) => d[i]['data'][d.key] < 0 ? 'negative actionWorldStock '+vis.helpers.camelize(d.key) : 'positive actionWorldStock '+vis.helpers.camelize(d.key))
                            .append("title")
                            .text(({key}) => key);

                    // b. Add the "Summary" Gross and Net wedges
                    const actionWorldSummary = vis.wedgesChart.svg.append("g").attr('id', 'summaryWedges-group').classed('wedgesGroup', true)     
                    actionWorldSummary.append("path")                  
                        .datum(vis.wedgesChart.stockTotal.referenceWorld[stockName])
                        .attr("d", vis.wedgesChart.methods.areaPositive)                            
                        .attr('id', 'referenceCaseWedge')     
                        .classed('grossWedge', true)
                    actionWorldSummary.append("path")                  
                        .datum(Object.values(vis.wedgesChart.grossData.actionWorldData['emissions']))
                        .attr("d", vis.wedgesChart.methods.areaPositive)                            
                        .attr('id', 'grossTotalWedge')     
                        .classed('grossWedge', true)
                    actionWorldSummary.append("path")                  
                        .datum(Object.values(vis.wedgesChart.grossData.actionWorldData['net']))
                        .attr("d", vis.wedgesChart.methods.areaPositive)                            
                        .attr('id', 'netTotalsWedge')     
                        .classed('netWedge', true)
                    actionWorldSummary.append("path")                  
                        .datum(Object.values(vis.wedgesChart.grossData.actionWorldData['offsets']))
                        .attr("d", vis.wedgesChart.methods.areaNegative)                            
                        .attr('id', 'grossOffsetWedge')     
                        .classed('emissions', true)

                    // c. Add the Action wedges        
                    const actionWorldAbatement = vis.wedgesChart.svg.append("g").attr('id', 'abatementWedges-group').classed('wedgesGroup', true)     

                // 5. ADD TOTALS LINES AND MARKERS 
                    // a. Add Total stock lines for action and reference case
                    const stockTotals = vis.wedgesChart.svg.append("g").attr('id', 'totals-group')    
                    stockTotals.append("path").attr('id', 'actionEmissionsPath')
                        .datum(Object.values(vis.wedgesChart.stockTotal.actionWorld[stockName]))
                        .attr("d", vis.wedgesChart.methods.line)    
                        .classed('actionWorld line', true)
                    stockTotals.append("path").attr('id', 'referenceEmissionsPath')
                        .datum(Object.values(vis.wedgesChart.stockTotal.referenceWorld[stockName]))
                        .attr("d", vis.wedgesChart.methods.line)
                        .classed('referenceWorld line', true)

                    stockTotals.append('circle').attr('id', 'baselineEmissionsMarker')
                        .attr('cx', vis.wedgesChart.scales.xScale(model.schema.time.startTime))
                        .attr('cy', vis.wedgesChart.scales.yScale(vis.wedgesChart.stockTotal.actionWorld[stockName][0]))
                    stockTotals.append('circle').attr('id', 'targetEmissionsMarkerInner')
                        .attr('cx', vis.wedgesChart.scales.xScale(model.schema.time.startTime + model.schema.reportTime.analysisPeriod))
                        .attr('cy', vis.wedgesChart.scales.yScale(0))
                    stockTotals.append('circle').attr('id', 'targetEmissionsMarkerOuter')
                        .attr('cx', vis.wedgesChart.scales.xScale(model.schema.time.startTime + model.schema.reportTime.analysisPeriod))
                        .attr('cy', vis.wedgesChart.scales.yScale(0))
                    stockTotals.append('circle').attr('id', 'actionEmissionsPathMarker')
                        .attr('cx', 0)
                        .attr('cy', 0)
                    stockTotals.append('circle').attr('id', 'referenceEmissionsPathMarker')
                        .attr('cx', 0)
                        .attr('cy', 0)

                // 6. ADD AXIS
                    const wedgesAxes = vis.wedgesChart.svg.append("g").attr('id', 'wedgesChartAxes-group')

                    // a. Add x axis and label
                    const xAxisGroup = wedgesAxes.append("g")
                        .attr("class", "x axis wedgesChart")
                        .attr("transform", "translate(0,"+ vis.wedgesChart.scales.yScale(0) +")")
                        .call(vis.wedgesChart.scales.xAxis)

                    // b. Add y axis and label
                    const yAxisGroup = wedgesAxes.append("g")
                        .attr("class", "y axis wedgesChart")
                        .call(vis.wedgesChart.scales.yAxis)
                    yAxisGroup.append("text")
                        .attr("class", "label wedgesChart")
                        .attr("transform", "rotate(-90)")
                        .attr("y", -68)
                        .style("text-anchor", "end")
                        .text("Emissions")           
                    yAxisGroup.append("text")
                        .attr("class", "subLabel wedgesChart")
                        .attr("transform", "rotate(-90)")
                        .attr("y", -53)
                        .style("text-anchor", "end")
                        .text("tonnes of carbon dioxide equivalent")   

                // 7. ADD LABELS
                    // Sector wedges                 
                    d3.select('#sectorWedges-group').selectAll('text')
                        .data(vis.wedgesChart.series[stockName])
                        .enter().append('text')
                            .classed('sectorWedgeLabel', true)
                            .attr('x', (d, i) => vis.wedgesChart.scales.xScale(vis.wedgesChart.layerLabelPosition[i]))
                            .attr('y', (d, i) => 5 + vis.wedgesChart.scales.yScale(d[vis.wedgesChart.layerLabelPosition[i] - model.schema.time.startTime][0] + (d[vis.wedgesChart.layerLabelPosition[i]-model.schema.time.startTime][1] - d[vis.wedgesChart.layerLabelPosition[i]-model.schema.time.startTime][0])/2) )
                            .style('font-size', function(d, i){
                                const ribbonWidth = (vis.wedgesChart.scales.yScale(0) - vis.wedgesChart.scales.yScale(d[vis.wedgesChart.layerLabelPosition[i]-model.schema.time.startTime][1] - d[vis.wedgesChart.layerLabelPosition[i]-model.schema.time.startTime][0]))
                                return d3.max([0.5 * ribbonWidth, 20])+'px'
                            })
                            .attr('dy', function(d, i){
                                const ribbonWidth = (vis.wedgesChart.scales.yScale(0) - vis.wedgesChart.scales.yScale(d[vis.wedgesChart.layerLabelPosition[i]-model.schema.time.startTime][1] - d[vis.wedgesChart.layerLabelPosition[i]-model.schema.time.startTime][0]))
                                return d3.max([-0.15 * ribbonWidth, -2.5])+'px'
                            })                            
                            .text(({key}) => key);

                    // Summary wedges
                    actionWorldSummary.append('text').attr('id', 'impactWedgeLabel')
                        .classed('wedgeLabel', true)
                        .attr('x', vis.wedgesChart.scales.xScale(model.schema.time.endTime - 2.5) )
                        .attr('y', vis.wedgesChart.scales.yScale(vis.wedgesChart.stockTotal.referenceWorld[stockName][model.schema.reportTime.analysisPeriod] *0.7
                        ))
                        .attr('dy', 0)                        
                        .text('The emissions impact of community action')
                        .style('font-size', function(d, i){
                            const wedgeWidth = vis.wedgesChart.scales.yScale(0) - vis.wedgesChart.scales.yScale(vis.wedgesChart.stockTotal.referenceWorld[stockName][model.schema.reportTime.analysisPeriod] - vis.wedgesChart.stockTotal.actionWorld[stockName][model.schema.reportTime.analysisPeriod])
                            return 25
                            // return d3.max([0.1 * wedgeWidth, 25])+'px'
                        })
                        .style('dy', function(d, i){
                            const wedgeWidth = vis.wedgesChart.scales.yScale(0) - vis.wedgesChart.scales.yScale(vis.wedgesChart.stockTotal.referenceWorld[stockName][model.schema.reportTime.analysisPeriod] - vis.wedgesChart.stockTotal.actionWorld[stockName][model.schema.reportTime.analysisPeriod])
                            return d3.max([0.1 * wedgeWidth, 25])+'px'
                        })
                         .call(vis.helpers.wrap, 300, 1.1)


                    actionWorldSummary.append('text').attr('id', 'netTotalsWedgeLabel')
                        .classed('wedgeLabel', true)
                        .attr('x', vis.wedgesChart.scales.xScale(model.schema.time.startTime + 3) )
                        .attr('y', vis.wedgesChart.scales.yScale(vis.wedgesChart.stockTotal.actionWorld[stockName][Math.floor(model.schema.reportTime.analysisPeriod/2)] * 0.6) )
                        .attr('dy', 0)
                        .text('Our potential net emissions if we take action')
                        .style('font-size', function(d, i){
                            const wedgeWidth = vis.wedgesChart.scales.yScale(0) - vis.wedgesChart.scales.yScale(vis.wedgesChart.stockTotal.actionWorld[stockName][model.schema.reportTime.analysisPeriod])
                            return 25
                            // return d3.max([0.15 * wedgeWidth, 25])+'px'
                        })
                        .style('dy', function(d, i){
                            const wedgeWidth = vis.wedgesChart.scales.yScale(0) - vis.wedgesChart.scales.yScale(vis.wedgesChart.stockTotal.actionWorld[stockName][model.schema.reportTime.analysisPeriod])
                            return d3.max([0.15 * wedgeWidth, 12.5])+'px'
                        })                        
                        .call(vis.helpers.wrap, 280, 1.1)

                    const grossWedgeLabel = actionWorldSummary.append('g').attr('id', 'grossWedgeLabel')
                        .attr('transform', 'translate('+
                            vis.wedgesChart.scales.xScale(model.schema.time.startTime + 3 )+' , '+
                            vis.wedgesChart.scales.yScale(vis.wedgesChart.grossData.actionWorldData['emissions'][Math.floor(model.schema.time.startTime + 3 )] / 2)
                        +')' )

                    grossWedgeLabel.append('text').attr('id', 'grossWedgeMainLabel')
                        .classed('wedgeLabel', true)
                        .attr('dy', 10)
                        .text('Emissions')

                    grossWedgeLabel.append('text').attr('id', 'grossWedgeSubLabel')
                        .classed('wedgeSubLabel', true)
                        .attr('dy', 35)
                        .text('that we put in the atmosphere')

                    const offsetsWedgeLabel = actionWorldSummary.append('g').attr('id', 'offsetsLabel')
                        .attr('transform', 'translate('+
                            vis.wedgesChart.scales.xScale(model.schema.time.startTime +  model.schema.reportTime.analysisPeriod / 2)+' , '+
                            vis.wedgesChart.scales.yScale(-vis.wedgesChart.grossData.actionWorldData['offsets'][Math.floor(model.schema.time.startTime +  model.schema.reportTime.analysisPeriod / 2)] / 2 )
                        +')' )

                    offsetsWedgeLabel.append('text').attr('id', 'offsetsMainLabel')
                        .classed('wedgeLabel', true)
                        .attr('dy', 0)
                        .text('Sequestration and exported offsets')   
                    offsetsWedgeLabel.append('text').attr('id', 'offsetsSubLabel')
                        .classed('wedgeSubLabel', true)
                        .attr('dy', 25)
                        .text('Emissions we capture and/or offset for others')

                    // Baseline an stockline totals and labels
                    stockTotals.append('text').attr('id', 'baselineEmissionsLabel')
                        .classed('stockTotalLabel', true)
                        .attr('x', vis.wedgesChart.scales.xScale(model.schema.time.startTime + 1.5))
                        .attr('y', -17.5 + vis.wedgesChart.scales.yScale(vis.wedgesChart.stockTotal.actionWorld[stockName][0]))
                        .text('In 2019 Bass Coast emitted an estimated '+vis.numberFormatters.formatComma(vis.wedgesChart.stockTotal.referenceWorld[stockName][0])+ ' t CO2-e')
                        .attr('dy', 0)
                        .call(vis.helpers.wrap, 200, 1.2)  
                    stockTotals.append('text').attr('id', 'targetEmissionsLabel')
                        .classed('stockTotalLabel', true)
                        .attr('x', vis.wedgesChart.scales.xScale(model.schema.time.startTime + model.schema.reportTime.analysisPeriod) + 20)
                        .attr('y', -5 + vis.wedgesChart.scales.yScale(0))
                        .text('Zero net emissions')
                        .attr('dy', 0)
                        .call(vis.helpers.wrap, 80, 1.2)  
                    stockTotals.append('text').attr('id', 'netEmissionsLabel')
                        .classed('stockTotalLabel', true)
                        .attr('x', vis.wedgesChart.scales.xScale(model.schema.time.startTime + model.schema.reportTime.analysisPeriod) + 10)
                        .attr('y', -20 + vis.wedgesChart.scales.yScale(Object.values(vis.wedgesChart.stockTotal.actionWorld[stockName])[model.schema.reportTime.analysisPeriod]) )
                        .attr('dy', 0)
                        .text('Net emissions with actions of '+vis.numberFormatters.formatComma(Object.values(vis.wedgesChart.stockTotal.actionWorld[stockName])[model.schema.reportTime.analysisPeriod])+ ' t CO2-e')
                        .call(vis.helpers.wrap, 170, 1.2)  
                    stockTotals.append('text').attr('id', 'referenceEmissionsLabel')
                        .classed('stockTotalLabel', true)
                        .attr('x', vis.wedgesChart.scales.xScale(model.schema.time.startTime + model.schema.reportTime.analysisPeriod) + 10)
                        .attr('y', -20 + vis.wedgesChart.scales.yScale(Object.values(vis.wedgesChart.stockTotal.referenceWorld[stockName])[model.schema.reportTime.analysisPeriod]) )
                        .attr('dy', 0)
                        .text('By 2030 our net emissions without actions reach '+vis.numberFormatters.formatComma(Object.values(vis.wedgesChart.stockTotal.referenceWorld[stockName])[model.schema.reportTime.analysisPeriod])+ ' t CO2-e')
                        .call(vis.helpers.wrap, 170, 1.2)                          

                    // Reference / business as usual
                    stockTotals.append('text').attr('id', 'referenceLabelOnPath').attr('class', 'labelOnPath')
                        .attr("transform", "translate(0, -5)")
                        .append('textPath')
                            .attr('xlink:href', '#referenceEmissionsPath')
                            .style("text-anchor","middle")    
                            .attr("startOffset", "60%")
                            .text("Our business as usual emissions pathway");

                    // Reference / business as usual
                    stockTotals.append('text').attr('id', 'actionLabelOnPath').attr('class', 'labelOnPath')
                        .attr("transform", "translate(5, -5)")
                        .append('textPath')
                            .attr('xlink:href', '#actionEmissionsPath')
                            .style("text-anchor","middle")    
                            .attr("startOffset", "60%")
                            .text("Our emissions pathway with community action");

                    // 8. Add anonotation group
                        vis.wedgesChart.annotation = vis.wedgesChart.svg.append("g").attr('id', 'wedgesAnnotation-group')     
            }; // end drawWedges

            // Function to create sector multples
            function createSectorWedgeMultiples(stockName = 'netEmissions', timeHorizon = vis.wedgesChart.timeHorizon, duration = 1500){
                vis.wedgesChart.sectorMultiples.scales = {}
                vis.wedgesChart.sectorMultiples.areaGenerator = {}
                vis.wedgesChart.sectorMultiples.sectorData = {}
                function flatten(arr) {
                  return arr.reduce(function (flat, toFlatten) {
                    return flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten);
                  }, []);
                }
                const allsectorDataArray = flatten(Object.values(vis.wedgesChart.seriesData.actionWorldData[stockName]).map(timeObject => Object.values(timeObject)))

                // Make multiples by looping through each sector
                vis.wedgesChart.layerOrder.forEach(function(sectorName, i){
                    const multiplesSectionHeight = (vis.wedgesChart.dims.height / vis.wedgesChart.layerOrder.length),
                        multiplesHeight = 0.7 * multiplesSectionHeight,
                        chartAxisYpos = vis.wedgesChart.dims.height - multiplesSectionHeight * i

                    vis.wedgesChart.sectorMultiples.sectorData[sectorName] = Object.values(vis.wedgesChart.seriesData.actionWorldData[stockName]).map(d => d[sectorName]) 
                    
                    // Set scale and define axes
                    vis.wedgesChart.sectorMultiples.scales[sectorName] = {}
                    vis.wedgesChart.sectorMultiples.scales[sectorName]['yScale'] = d3.scaleLinear().range([chartAxisYpos, chartAxisYpos - multiplesHeight]).domain([d3.min(allsectorDataArray), d3.max(allsectorDataArray)])
                    vis.wedgesChart.sectorMultiples.scales[sectorName]['xScale'] = d3.scaleLinear().range([0, vis.wedgesChart.dims.width]).domain(vis.wedgesChart.scales.xScale.domain())
                    vis.wedgesChart.sectorMultiples.scales[sectorName]['yAxis'] = d3.axisLeft().scale(vis.wedgesChart.sectorMultiples.scales[sectorName]['yScale']).ticks(3).tickFormat(d => vis.numberFormatters.formatComma(d))
                    vis.wedgesChart.sectorMultiples.scales[sectorName]['xAxis'] = d3.axisBottom().scale(vis.wedgesChart.sectorMultiples.scales[sectorName]['xScale']).ticks(timeHorizon - model.schema.time.startTime).tickFormat( d => (d > timeHorizon) ? '' : vis.numberFormatters.formatInteger(d))

                    // Custom area generators
                    vis.wedgesChart.sectorMultiples.areaGenerator[sectorName] = d3.area().curve(vis.wedgesChart.curve)
                        .x( (d, i) => vis.wedgesChart.scales.xScale(i + model.schema.time.startTime))
                        .y0( vis.wedgesChart.sectorMultiples.scales[sectorName]['yScale'](0))
                        .y1( d =>  vis.wedgesChart.sectorMultiples.scales[sectorName]['yScale'](d))  
                    // Add axis 
                    vis.wedgesChart.sectorMultiples.axesGroup = d3.select('#wedgesChartAxes-group').append("g")
                        .attr("class", "multiplesAxes wedgesChart")
                        .style('opacity', 0)
                    vis.wedgesChart.sectorMultiples.axesGroup.append('g')
                        .attr('class', vis.helpers.camelize(sectorName).replace(',','')+'_multiplesAxes yAxis')
                        .call(vis.wedgesChart.sectorMultiples.scales[sectorName]['yAxis'])
                    vis.wedgesChart.sectorMultiples.axesGroup.append('g')
                        .attr('class', vis.helpers.camelize(sectorName).replace(',','')+'_multiplesAxes xAxis')
                        .attr("transform", "translate(0,"+ vis.wedgesChart.sectorMultiples.scales[sectorName]['yScale'](0) +")")
                        .call( vis.wedgesChart.sectorMultiples.scales[sectorName]['xAxis'])
                })
            }; // end createSectorWedgeMultiples()
    }; // end renderWedgesChart()


////////////////////////////////////////////////////////////////////
////////////// DATA VISUALISATION HELPER METHODS  /////////////////      
////////////////////////////////////////////////////////////////////

    // Helper to wrap text labels
    vis.helpers.wrap = function(text, width, lineHeight, centerVertical = false) {

        text.each(function() {
            let text = d3.select(this),
                words = text.text().split(/\s+/).reverse(),
                word,
                line = [],
                lineNumber = 0,
                y = text.attr("y"),
                x = text.attr("x"),
                fontSize = parseFloat(text.style("font-size")),
                dy = parseFloat(text.attr("dy")),
                tspan = text.text(null).append("tspan").attr("x", x).attr("y", y).attr("dy", dy + "em");

            while (word = words.pop()) {
                line.push(word);
                tspan.text(line.join(" "));

                if (tspan.node().getComputedTextLength() > width) {
                    line.pop();
                    tspan.text(line.join(" "));
                    line = [word];
                    tspan = text.append("tspan")
                        .attr("x", x)
                        .attr("y",  y)
                        .attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
                }                    
            }            
            if(centerVertical){
                text.style("transform",  "translateY(-"+(10 * (lineNumber))+"px)")
            }
        })
    }; // end wrap()

    // String to camelCase
    vis.helpers.camelize = function(str) {
        return str.replace(/(?:^\w|[A-Z]|\b\w|\s+)/g, function(match, index) {
            if (+match === 0) return ""; // or if (/\s+/.test(match)) for white spaces
            return index == 0 ? match.toLowerCase() : match.toUpperCase();
        });
    }; // end camelize

    // Filter for unique values
    vis.helpers.onlyUnique = function(value, index, self) { return self.indexOf(value) === index; };

        // Check if an objet is empty
    function isEmpty(obj) {
        for(var key in obj) {
            if(obj.hasOwnProperty(key))
                return false;
        }
        return true;
    }; // end isEmpty()
